// Generated by dart2js, the Dart to JavaScript compiler.
// The code supports the following hooks:
// dartPrint(message)   - if this function is defined it is called
//                        instead of the Dart [print] method.
// dartMainRunner(main) - if this function is defined, the Dart [main]
//                        method will not be invoked directly.
//                        Instead, a closure that will invoke [main] is
//                        passed to [dartMainRunner].
(function($) {
function Isolate() {}
init();

$ = Isolate.$isolateProperties;
var $$ = {};

// Native classes
// Bound closures
$$.BoundClosure$3 = {"": "BoundClosure;_self,_target,_receiver",
  call$3: function(p0, p1, p2) {
    return this._self[this._target](p0, p1, p2);
  }
};

$$.BoundClosure$2 = {"": "BoundClosure;_self,_target,_receiver",
  call$2: function(p0, p1) {
    return this._self[this._target](p0, p1);
  }
};

$$.BoundClosure$1 = {"": "BoundClosure;_self,_target,_receiver",
  call$1: function(p0) {
    return this._self[this._target](p0);
  }
};

$$.BoundClosure$0 = {"": "BoundClosure;_self,_target,_receiver",
  call$0: function() {
    return this._self[this._target]();
  }
};

$$.Closure$main = {"": "Closure;call$0,$name"};

$$.Closure$_processWorkerMessage = {"": "Closure;call$2,$name"};

$$.Closure$toStringWrapper = {"": "Closure;call$0,$name"};

$$.Closure$invokeClosure = {"": "Closure;call$5,$name"};

$$.Closure$typeNameInChrome = {"": "Closure;call$1,$name"};

$$.Closure$typeNameInSafari = {"": "Closure;call$1,$name"};

$$.Closure$typeNameInOpera = {"": "Closure;call$1,$name"};

$$.Closure$typeNameInFirefox = {"": "Closure;call$1,$name"};

$$.Closure$typeNameInIE = {"": "Closure;call$1,$name"};

$$.Closure$constructorNameFallback = {"": "Closure;call$1,$name"};

$$.Closure$callDartFunctionWith1Arg = {"": "Closure;call$2,$name"};

$$.Closure$_asyncRunCallback = {"": "Closure;call$0,$name"};

$$.Closure$_nullDataHandler = {"": "Closure;call$1,$name"};

$$.Closure$_nullErrorHandler = {"": "Closure;call$1,$name"};

$$.Closure$_nullDoneHandler = {"": "Closure;call$0,$name"};

$$.Closure$compare = {"": "Closure;call$2,$name"};

(function (reflectionData) {
  function map(x){x={x:x};delete x.x;return x}
  if (!init.libraries) init.libraries = [];
  if (!init.mangledNames) init.mangledNames = map();
  if (!init.mangledGlobalNames) init.mangledGlobalNames = map();
  if (!init.statics) init.statics = map();
  if (!init.interfaces) init.interfaces = map();
  var libraries = init.libraries;
  var mangledNames = init.mangledNames;
  var mangledGlobalNames = init.mangledGlobalNames;
  var hasOwnProperty = Object.prototype.hasOwnProperty;
  var length = reflectionData.length;
  for (var i = 0; i < length; i++) {
    var data = reflectionData[i];
    var name = data[0];
    var uri = data[1];
    var metadata = data[2];
    var descriptor = data[3];
    var isRoot = !!data[4];
    var fields = descriptor && descriptor[""];
    var classes = [];
    var functions = [];
    function processStatics(descriptor) {
      for (var property in descriptor) {
        if (!hasOwnProperty.call(descriptor, property)) continue;
        if (property === "") continue;
        var element = descriptor[property];
        var firstChar = property.substring(0, 1);
        var previousProperty;
        if (firstChar === "+") {
          mangledGlobalNames[previousProperty] = property.substring(1);
          if (element && element.length) init.interfaces[previousProperty] = element;
        } else if (firstChar === "@") {
          property = property.substring(1);
          $[property]["@"] = element;
        } else if (typeof element === "function") {
          $[previousProperty = property] = element;
          functions.push(property);
        } else {
          previousProperty = property;
          var newDesc = {};
          var previousProp;
          for (var prop in element) {
            if (!hasOwnProperty.call(element, prop)) continue;
            firstChar = prop.substring(0, 1);
            if (prop === "static") {
              processStatics(init.statics[property] = element[prop]);
            } else if (firstChar === "+") {
              mangledNames[previousProp] = prop.substring(1);
            } else if (firstChar === "@" && prop !== "@") {
              newDesc[prop.substring(1)]["@"] = element[prop];
            } else {
              newDesc[previousProp = prop] = element[prop];
            }
          }
          $$[property] = newDesc;
          classes.push(property);
        }
      }
    }
    processStatics(descriptor);
    libraries.push([name, uri, classes, functions, metadata, fields, isRoot]);
  }
})([
["FallinBasket", "box2dtest.dart", , {
initializeCanvas: function() {
  var t1, t2, extents, t3, t4;
  $.canvas = document.querySelector("#canvas");
  $.set$width$x($.canvas, $.CANVAS_WIDTH);
  $.set$height$x($.canvas, $.CANVAS_HEIGHT);
  $.ctx = $.getContext$1$x($.canvas, "2d");
  t1 = $.CANVAS_WIDTH;
  if (t1 == null)
    throw t1.$div();
  t2 = $.CANVAS_HEIGHT;
  if (t2 == null)
    throw t2.$div();
  extents = new $.Vector2(new Float32Array(2));
  t3 = extents.storage;
  t4 = t3.length;
  if (0 >= t4)
    throw $.ioore(0);
  t3[0] = t1 / 2;
  if (1 >= t4)
    throw $.ioore(1);
  t3[1] = t2 / 2;
  t2 = new $.Vector2(new Float32Array(2));
  t2.setFrom$1(extents);
  t3 = new $.Vector2(new Float32Array(2));
  t3.setFrom$1(extents);
  t3 = new $.CanvasViewportTransform(null, t2, 20, t3);
  t3.yFlip = true;
  $.viewport = t3;
  t3 = $.viewport;
  t3.scale = 1;
  $.debugDraw = $.CanvasDraw$(t3, $.ctx);
  t3 = $.world;
  t2 = $.debugDraw;
  t3.set$debugDraw;
  t3._debugDraw = t2;
},

run: function() {
  C.Window_methods.get$animationFrame(window).then$1(new $.run_closure());
},

step: function() {
  var t1 = $.world;
  t1.step$3(t1, 0.016666666666666666, 10, 10);
  $.clearRect$4$x($.ctx, 0, 0, $.CANVAS_WIDTH, $.CANVAS_HEIGHT);
  $.world.drawDebugData$0();
  $.run();
},

main: function() {
  $.play($.level);
  $.initializeCanvas();
  $.run();
},

createBox: function(width, height) {
  var sd, bd, t1, t2, t3, t4, boxFixtureDef, groundFixture;
  $.CANVAS_WIDTH = C.JSDouble_methods.toInt$0(width);
  $.CANVAS_HEIGHT = C.JSDouble_methods.toInt$0(height);
  sd = $.PolygonShape$();
  bd = $.BodyDef$();
  t1 = width / 2;
  sd.setAsBox$2(t1, 5);
  t2 = height / 2;
  t3 = bd.position.storage;
  t4 = t3.length;
  if (0 >= t4)
    throw $.ioore(0);
  t3[0] = 0;
  if (1 >= t4)
    throw $.ioore(1);
  t3[1] = 0.5 - t2;
  boxFixtureDef = $.FixtureDef$();
  boxFixtureDef.restitution = 0.7;
  boxFixtureDef.density = 0.05;
  boxFixtureDef.shape = sd;
  groundFixture = $.world.createBody$1(bd).createFixture$1(boxFixtureDef);
  sd.setAsBox$2(0, t2);
  t3 = bd.position.storage;
  t4 = t3.length;
  if (0 >= t4)
    throw $.ioore(0);
  t3[0] = -width / 2;
  if (1 >= t4)
    throw $.ioore(1);
  t3[1] = 0;
  $.world.createBody$1(bd).createFixtureFromShape$1(sd);
  t3 = bd.position.storage;
  t4 = t3.length;
  if (0 >= t4)
    throw $.ioore(0);
  t3[0] = t1;
  if (1 >= t4)
    throw $.ioore(1);
  t3[1] = 0;
  $.world.createBody$1(bd).createFixtureFromShape$1(sd);
  sd.setAsBox$2(t1, 0);
  t1 = bd.position.storage;
  t3 = t1.length;
  if (0 >= t3)
    throw $.ioore(0);
  t1[0] = 0;
  if (1 >= t3)
    throw $.ioore(1);
  t1[1] = t2;
  $.world.createBody$1(bd).createFixtureFromShape$1(sd);
  return groundFixture;
},

createBasket: function(width, height, position) {
  var t1, t2, x, y, sd, bd, t3, t4, t5, bkFixtureDef;
  t1 = position.storage;
  t2 = t1.length;
  if (0 >= t2)
    throw $.ioore(0);
  x = t1[0];
  if (1 >= t2)
    throw $.ioore(1);
  y = t1[1];
  sd = $.PolygonShape$();
  $.BodyDef$();
  t1 = height / 2;
  sd.setAsBox$2(5, t1);
  bd = $.BodyDef$();
  t2 = width / 2;
  t3 = y + t1;
  t4 = bd.position.storage;
  t5 = t4.length;
  if (0 >= t5)
    throw $.ioore(0);
  t4[0] = x - t2;
  if (1 >= t5)
    throw $.ioore(1);
  t4[1] = t3;
  bkFixtureDef = $.FixtureDef$();
  bkFixtureDef.shape = sd;
  $.world.createBody$1(bd).createFixture$1(bkFixtureDef);
  sd.setAsBox$2(5, t1);
  t1 = bd.position.storage;
  t4 = t1.length;
  if (0 >= t4)
    throw $.ioore(0);
  t1[0] = x + t2;
  if (1 >= t4)
    throw $.ioore(1);
  t1[1] = t3;
  $.world.createBody$1(bd).createFixture$1(bkFixtureDef);
  sd.setAsBox$2(t2, 2);
  t2 = bd.position.storage;
  t3 = t2.length;
  if (0 >= t3)
    throw $.ioore(0);
  t2[0] = x;
  if (1 >= t3)
    throw $.ioore(1);
  t2[1] = y + 7;
  bkFixtureDef.shape = sd;
  return $.world.createBody$1(bd).createFixture$1(bkFixtureDef);
},

buildObstacle: function() {
  var t1, t2, t3, t4, sd, bd, boxFixtureDef;
  $.get$random();
  t1 = Math.random();
  $.get$random();
  t2 = Math.random();
  $.get$random();
  t3 = Math.random();
  $.get$random();
  t4 = Math.random();
  sd = $.PolygonShape$();
  bd = $.BodyDef$();
  sd.setAsBox$2((t1 * 50 + 50) / 2, (t2 * 30 + 30) / 2);
  t2 = bd.position.storage;
  t1 = t2.length;
  if (0 >= t1)
    throw $.ioore(0);
  t2[0] = t3 * 600 - 300;
  if (1 >= t1)
    throw $.ioore(1);
  t2[1] = t4 * 300 - 100;
  boxFixtureDef = $.FixtureDef$();
  boxFixtureDef.restitution = 0.1;
  boxFixtureDef.density = 0.05;
  boxFixtureDef.shape = sd;
  $.world.createBody$1(bd).createFixture$1(boxFixtureDef);
},

inContact: function(contact, A, B) {
  for (; contact != null; contact = contact.get$next()) {
    if ($.$eq(contact.get$fixtureA(), A) && $.$eq(contact.get$fixtureB(), B))
      return true;
    if ($.$eq(contact.get$fixtureA(), B) && $.$eq(contact.get$fixtureB(), A))
      return true;
  }
  return false;
},

play: function(level) {
  var t1, pi, groundFixture, t2, t3, t4, t5, passFixture, bouncingBall, ballFixtureDef, ballBodyDef, ballBody, ball, i;
  t1 = $.get$playInfos();
  if (level >>> 0 !== level || level >= 2)
    throw $.ioore(level);
  pi = t1[level];
  $.world = $.World$(pi.gravity, true, $.DefaultWorldPool$());
  groundFixture = $.createBox(800, 600);
  $.get$random();
  t1 = Math.random();
  t2 = $.CANVAS_HEIGHT;
  if (t2 == null)
    throw t2.$negate();
  t3 = new $.Vector2(new Float32Array(2));
  t4 = t3.storage;
  t5 = t4.length;
  if (0 >= t5)
    throw $.ioore(0);
  t4[0] = t1 * 500 - 250;
  if (1 >= t5)
    throw $.ioore(1);
  t4[1] = -t2 / 2;
  passFixture = $.createBasket(80, 90, t3);
  bouncingBall = $.CircleShape$();
  bouncingBall.radius = 20;
  ballFixtureDef = $.FixtureDef$();
  ballFixtureDef.friction = 0.005;
  ballFixtureDef.restitution = 0.7;
  ballFixtureDef.density = 0.05;
  ballFixtureDef.shape = bouncingBall;
  ballBodyDef = $.BodyDef$();
  t1 = new $.Vector2(new Float32Array(2));
  t2 = t1.storage;
  t3 = t2.length;
  if (0 >= t3)
    throw $.ioore(0);
  t2[0] = -2;
  if (1 >= t3)
    throw $.ioore(1);
  t2[1] = -20;
  ballBodyDef.linearVelocity = t1;
  $.get$random();
  t1 = Math.random();
  t2 = new $.Vector2(new Float32Array(2));
  t3 = t2.storage;
  t4 = t3.length;
  if (0 >= t4)
    throw $.ioore(0);
  t3[0] = t1 * 500 - 250;
  if (1 >= t4)
    throw $.ioore(1);
  t3[1] = 250;
  ballBodyDef.position = t2;
  ballBodyDef.type = 2;
  ballBody = $.world.createBody$1(ballBodyDef);
  ball = ballBody.createFixture$1(ballFixtureDef);
  for (t1 = pi.numBlocks, i = 0; i < t1; ++i)
    $.buildObstacle();
  t1 = $.world;
  t1.set$contactListener;
  t1._contactManager.contactListener = new $._ContactListener(groundFixture, passFixture, ball, level, false);
  t1 = document;
  C.EventStreamProvider_keydown.forTarget$2$useCapture;
  t1 = new $._EventStream(t1, C.EventStreamProvider_keydown._eventType, false);
  new $._EventStreamSubscription(0, t1._liblib2$_target, t1._eventType, new $.play_closure(pi, ballBody), t1._useCapture)._tryResume$0();
},

PlayInfo: {"": "Object;gravity,numBlocks,build,specialBasket,_basketWidth,basketHeight,impulse<",
  set$basketWidth: function(width) {
    this._basketWidth = width;
    this.basketHeight = width * 9 / 8;
  }
},

run_closure: {"": "Closure;",
  call$1: function(time) {
    return $.step();
  }
},

_ContactListener: {"": "Object;_ground,_pass,_ball,_level,_done",
  beginContact$1: function(contact) {
    var t1, t2, over, t3, t4;
    if (this._done)
      return;
    t1 = $.world;
    t1.get$contactList;
    t2 = this._ball;
    if ($.inContact(t1._contactManager.contactList, this._pass, t2)) {
      this._done = true;
      $.Primitives_printString("pass");
      over = document.querySelector("#win");
      t1 = $.get$classes$x(over);
      t1.remove$1(t1, "disappear");
      t2 = t2.body;
      t1 = new $.Vector2(new Float32Array(2));
      t3 = t1.storage;
      t4 = t3.length;
      if (0 >= t4)
        throw $.ioore(0);
      t3[0] = 0;
      if (1 >= t4)
        throw $.ioore(1);
      t3[1] = 0;
      t2.set$linearVelocity(t1);
      t1 = $.S($.level);
      $.get$playInfos();
      $.Primitives_printString(t1 + ", 2");
      t1 = $.$add$ns($.level, 1);
      $.level = t1;
      $.get$playInfos();
      if ($.$lt$n(t1, 2)) {
        t1 = new $._ZoneTimer($.get$_Zone__current(), new $._ContactListener_beginContact_closure(over), null);
        t2 = t1._zone;
        t2._openCallbacks = t2._openCallbacks + 1;
        t1._timer = $._createTimer(C.Duration_1000000, t1.get$_run());
      }
    } else {
      t1 = $.world;
      t1.get$contactList;
      if ($.inContact(t1._contactManager.contactList, this._ground, t2)) {
        this._done = true;
        $.Primitives_printString("fail");
        t1 = $.get$classes$x(document.querySelector("#end"));
        t1.remove$1(t1, "disappear");
        t2 = t2.body;
        t1 = new $.Vector2(new Float32Array(2));
        t3 = t1.storage;
        t4 = t3.length;
        if (0 >= t4)
          throw $.ioore(0);
        t3[0] = 0;
        if (1 >= t4)
          throw $.ioore(1);
        t3[1] = 0;
        t2.set$linearVelocity(t1);
      }
    }
  }
},

_ContactListener_beginContact_closure: {"": "Closure;over_0",
  call$0: function() {
    $.Primitives_printString("in");
    var t1 = $.get$classes$x(this.over_0);
    t1.add$1(t1, "disappear");
    $.play($.level);
    $.initializeCanvas();
    $.run();
  }
},

play_closure: {"": "Closure;pi_0,ballBody_1",
  call$1: function(evt) {
    var t1, t2, t3, t4, t5, t6;
    t1 = $.getInterceptor$x(evt);
    if (t1.get$keyCode(evt) === 37) {
      t2 = this.ballBody_1;
      t3 = this.pi_0.get$impulse();
      if (typeof t3 !== "number")
        throw t3.$negate();
      t4 = new $.Vector2(new Float32Array(2));
      t5 = t4.storage;
      t6 = t5.length;
      if (0 >= t6)
        throw $.ioore(0);
      t5[0] = -t3;
      if (1 >= t6)
        throw $.ioore(1);
      t5[1] = 0;
      t2.applyLinearImpulse$2(t4, t2.sweep.center);
      t1.preventDefault$0(evt);
    } else if (t1.get$keyCode(evt) === 39) {
      t2 = this.ballBody_1;
      t3 = this.pi_0.get$impulse();
      t4 = new $.Vector2(new Float32Array(2));
      t5 = t4.storage;
      t6 = t5.length;
      if (0 >= t6)
        throw $.ioore(0);
      t5[0] = t3;
      if (1 >= t6)
        throw $.ioore(1);
      t5[1] = 0;
      t2.applyLinearImpulse$2(t4, t2.sweep.center);
      t1.preventDefault$0(evt);
    } else if (t1.get$keyCode(evt) === 38) {
      t2 = this.ballBody_1;
      t3 = this.pi_0.get$impulse();
      t4 = new $.Vector2(new Float32Array(2));
      t5 = t4.storage;
      t6 = t5.length;
      if (0 >= t6)
        throw $.ioore(0);
      t5[0] = 0;
      if (1 >= t6)
        throw $.ioore(1);
      t5[1] = t3;
      t2.applyLinearImpulse$2(t4, t2.sweep.center);
      t1.preventDefault$0(evt);
    } else if (t1.get$keyCode(evt) === 40) {
      t2 = this.ballBody_1;
      t3 = this.pi_0.get$impulse();
      if (typeof t3 !== "number")
        throw t3.$negate();
      t4 = new $.Vector2(new Float32Array(2));
      t5 = t4.storage;
      t6 = t5.length;
      if (0 >= t6)
        throw $.ioore(0);
      t5[0] = 0;
      if (1 >= t6)
        throw $.ioore(1);
      t5[1] = -t3;
      t2.applyLinearImpulse$2(t4, t2.sweep.center);
      t1.preventDefault$0(evt);
    }
  }
}},
1],
["_interceptors", "dart:_interceptors", , {
getInterceptor: function(object) {
  return void 0;
},

getDispatchProperty: function(object) {
  return object[$.dispatchPropertyName];
},

setDispatchProperty: function(object, value) {
  Object.defineProperty(object, $.dispatchPropertyName, {value: value, enumerable: false, writable: true, configurable: true});
},

makeDispatchRecord: function(interceptor, proto, extension, indexability) {
  return {i: interceptor, p: proto, e: extension, x: indexability};
},

getNativeInterceptor: function(object) {
  var record, proto, objectProto;
  record = $.getDispatchProperty(object);
  if (record != null) {
    proto = record.p;
    if (false === proto)
      return record.i;
    if (true === proto)
      return object;
    objectProto = Object.getPrototypeOf(object);
    if (proto === objectProto)
      return record.i;
    if (record.e === objectProto)
      return proto(object, record);
  }
  record = $.lookupDispatchRecord(object);
  if (record == null)
    return C.C_UnknownJavaScriptObject;
  $.setDispatchProperty(Object.getPrototypeOf(object), record);
  return $.getNativeInterceptor(object);
},

initializeDispatchProperty: function(setGetDispatchPropertyFn, rootProperty, jsObjectInterceptor) {
  var objectProto, i, property;
  if (typeof rootProperty !== "string")
    return $.initializeDispatchProperty$bailout(1, setGetDispatchPropertyFn, rootProperty, jsObjectInterceptor);
  objectProto = Object.prototype;
  for (i = 0; true; ++i) {
    if (i > 0)
      property = rootProperty + "_" + i;
    else
      property = rootProperty;
    if (typeof objectProto[property] === "undefined") {
      $.dispatchPropertyName = property;
      setGetDispatchPropertyFn(new Function("a", "return a." + property));
      $.setDispatchProperty(objectProto, $.makeDispatchRecord(jsObjectInterceptor, objectProto, null, null));
      return;
    }
  }
},

initializeDispatchProperty$bailout: function(state0, setGetDispatchPropertyFn, rootProperty, jsObjectInterceptor) {
  var objectProto, i, property;
  objectProto = Object.prototype;
  for (i = 0; true; ++i) {
    property = i > 0 ? rootProperty + "_" + i : rootProperty;
    if (typeof objectProto[property] === "undefined") {
      $.dispatchPropertyName = property;
      setGetDispatchPropertyFn(new Function("a", "return a." + property));
      $.setDispatchProperty(objectProto, $.makeDispatchRecord(jsObjectInterceptor, objectProto, null, null));
      return;
    }
  }
},

Interceptor: {"": "Object;",
  $eq: function(receiver, other) {
    return receiver === other;
  },
  get$hashCode: function(receiver) {
    return $.Primitives_objectHashCode(receiver);
  },
  toString$0: function(receiver) {
    return $.Primitives_objectToString(receiver);
  }
},

JSBool: {"": "bool/Interceptor;",
  toString$0: function(receiver) {
    return String(receiver);
  },
  get$hashCode: function(receiver) {
    return receiver ? 519018 : 218159;
  },
  $isbool: true
},

JSNull: {"": "Interceptor;",
  $eq: function(receiver, other) {
    return null == other;
  },
  toString$0: function(receiver) {
    return "null";
  },
  get$hashCode: function(receiver) {
    return 0;
  }
},

JavaScriptObject: {"": "Interceptor;",
  get$hashCode: function(_) {
    return 0;
  }
},

PlainJavaScriptObject: {"": "JavaScriptObject;"},

UnknownJavaScriptObject: {"": "JavaScriptObject;"},

JSArray: {"": "List/Interceptor;",
  add$1: function(receiver, value) {
    if (!!receiver.fixed$length)
      $.throwExpression(new $.UnsupportedError("add"));
    receiver.push(value);
  },
  forEach$1: function(receiver, f) {
    return $.IterableMixinWorkaround_forEach(receiver, f);
  },
  skip$1: function(receiver, n) {
    return $.SubListIterable$(receiver, n, null);
  },
  elementAt$1: function(receiver, index) {
    if (index >>> 0 !== index || index >= receiver.length)
      throw $.ioore(index);
    return receiver[index];
  },
  get$isEmpty: function(receiver) {
    return receiver.length === 0;
  },
  toString$0: function(receiver) {
    return $.IterableMixinWorkaround_toStringIterable(receiver, "[", "]");
  },
  toList$1$growable: function(receiver, growable) {
    return $.List_List$from(receiver, growable);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$iterator: function(receiver) {
    return new $.ListIterator(receiver, receiver.length, 0, null);
  },
  get$hashCode: function(receiver) {
    return $.Primitives_objectHashCode(receiver);
  },
  get$length: function(receiver) {
    return receiver.length;
  },
  set$length: function(receiver, newLength) {
    if (typeof newLength !== "number" || Math.floor(newLength) !== newLength)
      throw $.wrapException(new $.ArgumentError(newLength));
    if (newLength < 0)
      throw $.wrapException(new $.RangeError("value " + $.S(newLength)));
    if (!!receiver.fixed$length)
      $.throwExpression(new $.UnsupportedError("set length"));
    receiver.length = newLength;
  },
  $index: function(receiver, index) {
    if (typeof index !== "number" || Math.floor(index) !== index)
      throw $.wrapException(new $.ArgumentError(index));
    if (index >= receiver.length || index < 0)
      throw $.wrapException(new $.RangeError("value " + $.S(index)));
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    if (!!receiver.immutable$list)
      $.throwExpression(new $.UnsupportedError("indexed set"));
    if (typeof index !== "number" || Math.floor(index) !== index)
      throw $.wrapException(new $.ArgumentError(index));
    if (index >= receiver.length || index < 0)
      throw $.wrapException(new $.RangeError("value " + $.S(index)));
    receiver[index] = value;
  },
  $isList: true,
  $asList: null,
  $isList: true
},

JSMutableArray: {"": "JSArray;", $isJSMutableArray: true,
  $asJSArray: function() {
    return [null];
  },
  $asList: function() {
    return [null];
  }
},

JSFixedArray: {"": "JSMutableArray;"},

JSExtendableArray: {"": "JSMutableArray;", $isJSExtendableArray: true},

JSNumber: {"": "num/Interceptor;",
  compareTo$1: function(receiver, b) {
    var bIsNegative;
    if (typeof b !== "number")
      throw $.wrapException(new $.ArgumentError(b));
    if (receiver < b)
      return -1;
    else if (receiver > b)
      return 1;
    else if (receiver === b) {
      if (receiver === 0) {
        bIsNegative = this.get$isNegative(b);
        if (this.get$isNegative(receiver) === bIsNegative)
          return 0;
        if (this.get$isNegative(receiver))
          return -1;
        return 1;
      }
      return 0;
    } else if (isNaN(receiver)) {
      if (this.get$isNaN(b))
        return 0;
      return 1;
    } else
      return -1;
  },
  get$isNegative: function(receiver) {
    return receiver === 0 ? 1 / receiver < 0 : receiver < 0;
  },
  get$isNaN: function(receiver) {
    return isNaN(receiver);
  },
  remainder$1: function(receiver, b) {
    return receiver % b;
  },
  toInt$0: function(receiver) {
    var truncated;
    if (isNaN(receiver))
      throw $.wrapException(new $.UnsupportedError("NaN"));
    if (receiver == Infinity || receiver == -Infinity)
      throw $.wrapException(new $.UnsupportedError("Infinity"));
    truncated = receiver < 0 ? Math.ceil(receiver) : Math.floor(receiver);
    return truncated == -0.0 ? 0 : truncated;
  },
  floor$0: function(receiver) {
    return this.toInt$0(Math.floor(receiver));
  },
  roundToDouble$0: function(receiver) {
    if (receiver < 0)
      return -Math.round(-receiver);
    else
      return Math.round(receiver);
  },
  toString$0: function(receiver) {
    if (receiver === 0 && 1 / receiver < 0)
      return "-0.0";
    else
      return "" + receiver;
  },
  get$hashCode: function(receiver) {
    return receiver & 0x1FFFFFFF;
  },
  $negate: function(receiver) {
    return -receiver;
  },
  $add: function(receiver, other) {
    if (typeof other !== "number")
      throw $.wrapException(new $.ArgumentError(other));
    return receiver + other;
  },
  $sub: function(receiver, other) {
    if (typeof other !== "number")
      throw $.wrapException(new $.ArgumentError(other));
    return receiver - other;
  },
  $div: function(receiver, other) {
    return receiver / other;
  },
  $mul: function(receiver, other) {
    if (typeof other !== "number")
      throw $.wrapException(new $.ArgumentError(other));
    return receiver * other;
  },
  $tdiv: function(receiver, other) {
    return this.toInt$0(receiver / other);
  },
  $shr: function(receiver, other) {
    if (other < 0)
      throw $.wrapException(new $.ArgumentError(other));
    if (receiver > 0) {
      if (other > 31)
        return 0;
      return receiver >>> other;
    }
    if (other > 31)
      other = 31;
    return receiver >> other >>> 0;
  },
  $and: function(receiver, other) {
    if (typeof other !== "number")
      throw $.wrapException(new $.ArgumentError(other));
    return (receiver & other) >>> 0;
  },
  $lt: function(receiver, other) {
    if (typeof other !== "number")
      throw $.wrapException(new $.ArgumentError(other));
    return receiver < other;
  },
  $gt: function(receiver, other) {
    if (typeof other !== "number")
      throw $.wrapException(new $.ArgumentError(other));
    return receiver > other;
  },
  $le: function(receiver, other) {
    if (typeof other !== "number")
      throw $.wrapException(new $.ArgumentError(other));
    return receiver <= other;
  },
  $ge: function(receiver, other) {
    if (typeof other !== "number")
      throw $.wrapException(new $.ArgumentError(other));
    return receiver >= other;
  },
  $isnum: true
},

JSInt: {"": "int/JSNumber;", $isdouble: true, $isnum: true, $isint: true},

JSDouble: {"": "double/JSNumber;", $isdouble: true, $isnum: true},

JSString: {"": "String/Interceptor;",
  codeUnitAt$1: function(receiver, index) {
    if (typeof index !== "number")
      throw $.wrapException(new $.ArgumentError(index));
    if (index < 0)
      throw $.wrapException(new $.RangeError("value " + $.S(index)));
    if (index >= receiver.length)
      throw $.wrapException(new $.RangeError("value " + $.S(index)));
    return receiver.charCodeAt(index);
  },
  $add: function(receiver, other) {
    if (typeof other !== "string")
      throw $.wrapException(new $.ArgumentError(other));
    return receiver + other;
  },
  substring$2: function(receiver, startIndex, endIndex) {
    endIndex = receiver.length;
    if (typeof endIndex !== "number")
      $.throwExpression(new $.ArgumentError(endIndex));
    if (startIndex < 0)
      throw $.wrapException(new $.RangeError("value " + startIndex));
    if (endIndex == null)
      throw $.iae(endIndex);
    if (startIndex > endIndex)
      throw $.wrapException(new $.RangeError("value " + startIndex));
    if (endIndex > receiver.length)
      throw $.wrapException(new $.RangeError("value " + endIndex));
    return receiver.substring(startIndex, endIndex);
  },
  substring$1: function($receiver, startIndex) {
    return this.substring$2($receiver, startIndex, null);
  },
  trim$0: function(receiver) {
    var endIndex, startIndex, codeUnit, endIndex0, endIndex1;
    for (endIndex = receiver.length, startIndex = 0; startIndex < endIndex;) {
      if (startIndex >= endIndex)
        $.throwExpression(new $.RangeError("value " + startIndex));
      codeUnit = receiver.charCodeAt(startIndex);
      if (codeUnit === 32 || codeUnit === 13 || $.JSString__isWhitespace(codeUnit))
        ++startIndex;
      else
        break;
    }
    if (startIndex === endIndex)
      return "";
    for (endIndex0 = endIndex; true; endIndex0 = endIndex1) {
      endIndex1 = endIndex0 - 1;
      if (endIndex1 < 0)
        $.throwExpression(new $.RangeError("value " + endIndex1));
      if (endIndex1 >= endIndex)
        $.throwExpression(new $.RangeError("value " + endIndex1));
      codeUnit = receiver.charCodeAt(endIndex1);
      if (codeUnit === 32 || codeUnit === 13 || $.JSString__isWhitespace(codeUnit))
        ;
      else
        break;
    }
    if (startIndex === 0 && endIndex0 === endIndex)
      return receiver;
    return receiver.substring(startIndex, endIndex0);
  },
  get$isEmpty: function(receiver) {
    return receiver.length === 0;
  },
  compareTo$1: function(receiver, other) {
    var t1;
    if (typeof other !== "string")
      throw $.wrapException(new $.ArgumentError(other));
    if (receiver === other)
      t1 = 0;
    else
      t1 = receiver < other ? -1 : 1;
    return t1;
  },
  toString$0: function(receiver) {
    return receiver;
  },
  get$hashCode: function(receiver) {
    var t1, hash, i;
    for (t1 = receiver.length, hash = 0, i = 0; i < t1; ++i) {
      hash = 536870911 & hash + receiver.charCodeAt(i);
      hash = 536870911 & hash + ((524287 & hash) << 10 >>> 0);
      hash ^= hash >> 6;
    }
    hash = 536870911 & hash + ((67108863 & hash) << 3 >>> 0);
    hash ^= hash >> 11;
    return 536870911 & hash + ((16383 & hash) << 15 >>> 0);
  },
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    if (typeof index !== "number" || Math.floor(index) !== index)
      throw $.wrapException(new $.ArgumentError(index));
    if (index >= receiver.length || index < 0)
      throw $.wrapException(new $.RangeError("value " + $.S(index)));
    return receiver[index];
  },
  $isString: true,
  static: {
JSString__isWhitespace: function(codeUnit) {
  if (codeUnit < 256)
    switch (codeUnit) {
      case 9:
      case 10:
      case 11:
      case 12:
      case 13:
      case 32:
      case 133:
      case 160:
        return true;
      default:
        return false;
    }
  switch (codeUnit) {
    case 5760:
    case 6158:
    case 8192:
    case 8193:
    case 8194:
    case 8195:
    case 8196:
    case 8197:
    case 8198:
    case 8199:
    case 8200:
    case 8201:
    case 8202:
    case 8232:
    case 8233:
    case 8239:
    case 8287:
    case 12288:
    case 65279:
      return true;
    default:
      return false;
  }
}}

}}],
["_isolate_helper", "dart:_isolate_helper", , {
_callInIsolate: function(isolate, $function) {
  var result = isolate.eval$1($function);
  $globalState.topEventLoop.run$0();
  return result;
},

startRootIsolate: function(entry) {
  var rootContext;
  $globalState = $._Manager$(entry);
  if ($globalState.isWorker === true)
    return;
  rootContext = $._IsolateContext$();
  $globalState.rootContext = rootContext;
  $globalState.currentContext = rootContext;
  rootContext.eval$1(entry);
  $globalState.topEventLoop.run$0();
},

IsolateNatives_computeThisScript: function() {
  var currentScript, stack, matches;
  currentScript = $.$currentScript;
  if (currentScript != null)
    return String(currentScript.src);
  stack = new Error().stack;
  if (stack == null)
    stack = (function() {try { throw new Error() } catch(e) { return e.stack }})();
  matches = stack.match(new RegExp("^ *at [^(]*\\((.*):[0-9]*:[0-9]*\\)$", "m"));
  if (matches != null)
    return matches[1];
  matches = stack.match(new RegExp("^[^@]*@(.*):[0-9]*$", "m"));
  if (matches != null)
    return matches[1];
  throw $.wrapException(new $.UnsupportedError("Cannot extract URI from \"" + stack + "\""));
},

IsolateNatives__processWorkerMessage: function(sender, e) {
  var msg, t1, functionName, entryPoint, replyTo, context, t2;
  msg = $._deserializeMessage(e.data);
  t1 = $.getInterceptor$asx(msg);
  switch (t1.$index(msg, "command")) {
    case "start":
      $globalState.currentManagerId = t1.$index(msg, "id");
      functionName = t1.$index(msg, "functionName");
      entryPoint = functionName == null ? $globalState.entry : $[functionName];
      replyTo = $._deserializeMessage(t1.$index(msg, "replyTo"));
      context = $._IsolateContext$();
      t1 = $globalState.topEventLoop;
      t1.enqueue$3;
      t1.events._add$1(new $._IsolateEvent(context, new $.IsolateNatives__processWorkerMessage_closure(entryPoint, replyTo), "worker-start"));
      $globalState.currentContext = context;
      $globalState.topEventLoop.run$0();
      break;
    case "spawn-worker":
      $.IsolateNatives__spawnWorker(t1.$index(msg, "functionName"), t1.$index(msg, "uri"), t1.$index(msg, "replyPort"));
      break;
    case "message":
      if (t1.$index(msg, "port") != null)
        t1.$index(msg, "port").send$2(t1.$index(msg, "msg"), t1.$index(msg, "replyTo"));
      $globalState.topEventLoop.run$0();
      break;
    case "close":
      t1 = $globalState.managers;
      t2 = $.get$IsolateNatives_workerIds();
      t1.remove$1(t1, t2.$index(t2, sender));
      sender.terminate();
      $globalState.topEventLoop.run$0();
      break;
    case "log":
      $.IsolateNatives__log(t1.$index(msg, "msg"));
      break;
    case "print":
      if ($globalState.isWorker === true) {
        t1 = $globalState.mainManager;
        t2 = $._serializeMessage($.makeLiteralMap(["command", "print", "msg", msg]));
        t1.postMessage$1;
        self.postMessage(t2);
      } else
        $.Primitives_printString($.toString$0(t1.$index(msg, "msg")));
      break;
    case "error":
      throw $.wrapException(t1.$index(msg, "msg"));
    default:
  }
},

IsolateNatives__log: function(msg) {
  var trace, t1, t2, exception;
  if ($globalState.isWorker === true) {
    t1 = $globalState.mainManager;
    t2 = $._serializeMessage($.makeLiteralMap(["command", "log", "msg", msg]));
    t1.postMessage$1;
    self.postMessage(t2);
  } else
    try {
      $.get$globalThis().console.log(msg);
    } catch (exception) {
      $.unwrapException(exception);
      trace = new $._StackTrace(exception, null);
      throw $.wrapException(new $._ExceptionImplementation(trace));
    }

},

IsolateNatives__startIsolate: function(topLevel, replyTo) {
  var t1;
  $.Primitives_initializeStatics($globalState.currentContext.id);
  $.lazyPort = $.ReceivePortImpl$();
  t1 = $._Isolate_port();
  t1.toSendPort$0;
  replyTo.send$2("spawned", new $._NativeJsSendPort(t1, $globalState.currentContext.id));
  topLevel.call$0();
},

IsolateNatives__spawnWorker: function(functionName, uri, replyPort) {
  var worker, t1, workerId;
  if (uri == null)
    uri = $.get$IsolateNatives_thisScript();
  worker = new Worker(uri);
  worker.onmessage = function(e) { $.IsolateNatives__processWorkerMessage$closure.call$2(worker, e); };
  t1 = $globalState;
  workerId = t1.nextManagerId;
  t1.nextManagerId = workerId + 1;
  t1 = $.get$IsolateNatives_workerIds();
  t1.$indexSet(t1, worker, workerId);
  t1 = $globalState.managers;
  t1.$indexSet(t1, workerId, worker);
  worker.postMessage($._serializeMessage($.makeLiteralMap(["command", "start", "id", workerId, "replyTo", $._serializeMessage(replyPort), "functionName", functionName])));
},

_waitForPendingPorts: function(message, callback) {
  var finder = $._PendingSendPortFinder$();
  finder.traverse$1(message);
  $._FutureImpl__FutureImpl$wait(finder.ports).then$1(new $._waitForPendingPorts_closure(callback));
},

_serializeMessage: function(message) {
  var t1;
  if ($globalState.supportsWorkers === true) {
    t1 = new $._JsSerializer(0, new $._MessageTraverserVisitedMap());
    t1._visited = new $._JsVisitedMap(null);
    return t1.traverse$1(message);
  } else {
    t1 = new $._JsCopier(new $._MessageTraverserVisitedMap());
    t1._visited = new $._JsVisitedMap(null);
    return t1.traverse$1(message);
  }
},

_deserializeMessage: function(message) {
  if ($globalState.supportsWorkers === true)
    return new $._JsDeserializer(null).deserialize$1(message);
  else
    return message;
},

_MessageTraverser_isPrimitive: function(x) {
  return x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean";
},

_Deserializer_isPrimitive: function(x) {
  return x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean";
},

CloseToken: {"": "Object;", $isCloseToken: true},

JsIsolateSink: {"": "EventSink;_isClosed,_port<",
  add$1: function(_, message) {
    this._port.send$1(message);
  },
  $eq: function(_, other) {
    if (other == null)
      return false;
    return typeof other === "object" && other !== null && !!$.getInterceptor(other).$isIsolateSink && $.$eq(this._port, other.get$_port());
  },
  get$hashCode: function(_) {
    return $.$add$ns($.get$hashCode$(this._port), 499);
  },
  $isJsIsolateSink: true,
  $asIsolateSink: null,
  $isIsolateSink: true
},

_Manager: {"": "Object;nextIsolateId,currentManagerId,nextManagerId,currentContext,rootContext,topEventLoop,fromCommandLine,isWorker,supportsWorkers,isolates,mainManager,managers,entry",
  _nativeDetectEnvironment$0: function() {
    var t1, t2;
    t1 = $.get$globalWindow() == null;
    t2 = $.get$globalWorker();
    this.isWorker = t1 && $.get$globalPostMessageDefined() === true;
    if (this.isWorker !== true)
      if (t2 != null) {
        $.get$IsolateNatives_thisScript();
        t2 = true;
      } else
        t2 = false;
    else
      t2 = true;
    this.supportsWorkers = t2;
    this.fromCommandLine = t1 && this.isWorker !== true;
  },
  _nativeInitWorkerMessageHandler$0: function() {
    var $function = function (e) { $.IsolateNatives__processWorkerMessage$closure.call$2(this.mainManager, e); };
    $.get$globalThis().onmessage = $function;
    $.get$globalThis().dartPrint = function (object) {};
  },
  _Manager$1: function(entry) {
    this._nativeDetectEnvironment$0();
    this.topEventLoop = new $._EventLoop($.ListQueue$(null), 0);
    this.isolates = new $.HashMap(0, null, null, null, null);
    this.managers = new $.HashMap(0, null, null, null, null);
    if (this.isWorker === true) {
      this.mainManager = new $._MainManagerStub();
      this._nativeInitWorkerMessageHandler$0();
    }
  },
  static: {
_Manager$: function(entry) {
  var t1 = new $._Manager(0, 0, 1, null, null, null, null, null, null, null, null, null, entry);
  t1._Manager$1(entry);
  return t1;
}}

},

_IsolateContext: {"": "Object;id>,ports,isolateStatics<",
  eval$1: function(code) {
    var old, result, t1;
    old = $globalState.currentContext;
    $globalState.currentContext = this;
    $ = this.isolateStatics;
    result = null;
    try {
      result = code.call$0();
    } finally {
      $globalState.currentContext = old;
      if (old != null) {
        t1 = old;
        t1._setGlobals$0;
        $ = t1.get$isolateStatics();
      }
    }
    return result;
  },
  lookup$1: function(portId) {
    var t1 = this.ports;
    return t1.$index(t1, portId);
  },
  register$2: function(_, portId, port) {
    var t1;
    if (this.ports.containsKey$1(portId))
      throw $.wrapException(new $._ExceptionImplementation("Registry: ports must be registered only once."));
    t1 = this.ports;
    t1.$indexSet(t1, portId, port);
    t1 = $globalState.isolates;
    t1.$indexSet(t1, this.id, this);
  },
  unregister$1: function(portId) {
    var t1 = this.ports;
    t1.remove$1(t1, portId);
    if (this.ports._liblib1$_length === 0) {
      t1 = $globalState.isolates;
      t1.remove$1(t1, this.id);
    }
  },
  _IsolateContext$0: function() {
    var t1, t2;
    t1 = $globalState;
    t2 = t1.nextIsolateId;
    t1.nextIsolateId = t2 + 1;
    this.id = t2;
    this.ports = new $.HashMap(0, null, null, null, null);
    this.isolateStatics = new Isolate();
  },
  static: {
_IsolateContext$: function() {
  var t1 = new $._IsolateContext(null, null, null);
  t1._IsolateContext$0();
  return t1;
}}

},

_EventLoop: {"": "Object;events,activeTimerCount",
  dequeue$0: function() {
    var t1 = this.events;
    if (t1._head === t1._tail)
      return;
    return t1.removeFirst$0();
  },
  checkOpenReceivePortsFromCommandLine$0: function() {
    if ($globalState.rootContext != null && $globalState.isolates.containsKey$1($globalState.rootContext.id) && $globalState.fromCommandLine === true && $globalState.rootContext.ports._liblib1$_length === 0)
      throw $.wrapException(new $._ExceptionImplementation("Program exited with open ReceivePorts."));
  },
  runIteration$0: function() {
    var $event, t1, t2;
    $event = this.dequeue$0();
    if ($event == null) {
      this.checkOpenReceivePortsFromCommandLine$0();
      t1 = $globalState;
      if (t1.isWorker === true) {
        t2 = t1.isolates;
        t2.get$isEmpty;
        t2 = t2._liblib1$_length === 0 && t1.topEventLoop.activeTimerCount === 0;
      } else
        t2 = false;
      if (t2) {
        t1 = t1.mainManager;
        t2 = $._serializeMessage($.makeLiteralMap(["command", "close"]));
        t1.postMessage$1;
        self.postMessage(t2);
      }
      return false;
    }
    $event.process$0();
    return true;
  },
  _runHelper$0: function() {
    if ($.get$globalWindow() != null)
      new $._EventLoop__runHelper_next(this).call$0();
    else
      for (; this.runIteration$0();)
        ;
  },
  run$0: function() {
    var e, trace, exception, t1, t2;
    if ($globalState.isWorker !== true)
      this._runHelper$0();
    else
      try {
        this._runHelper$0();
      } catch (exception) {
        t1 = $.unwrapException(exception);
        e = t1;
        trace = new $._StackTrace(exception, null);
        t1 = $globalState.mainManager;
        t2 = $._serializeMessage($.makeLiteralMap(["command", "error", "msg", $.S(e) + "\n" + $.S(trace)]));
        t1.postMessage$1;
        self.postMessage(t2);
      }

  }
},

_EventLoop__runHelper_next: {"": "Closure;this_0",
  call$0: function() {
    var t1, t2;
    if (!this.this_0.runIteration$0())
      return;
    t1 = new $._ZoneTimer($.get$_Zone__current(), this, null);
    t2 = t1._zone;
    t2._openCallbacks = t2._openCallbacks + 1;
    t1._timer = $._createTimer(C.Duration_0, t1.get$_run());
  }
},

_IsolateEvent: {"": "Object;isolate,fn,message",
  process$0: function() {
    this.isolate.eval$1(this.fn);
  }
},

_MainManagerStub: {"": "Object;"},

IsolateNatives__processWorkerMessage_closure: {"": "Closure;entryPoint_0,replyTo_1",
  call$0: function() {
    $.IsolateNatives__startIsolate(this.entryPoint_0, this.replyTo_1);
  }
},

_BaseSendPort: {"": "Object;_isolateId<",
  _checkReplyTo$1: function(replyTo) {
    if (replyTo != null && (typeof replyTo !== "object" || replyTo === null || !$.getInterceptor(replyTo).$is_NativeJsSendPort) && (typeof replyTo !== "object" || replyTo === null || !$.getInterceptor(replyTo).$is_WorkerSendPort) && true)
      throw $.wrapException(new $._ExceptionImplementation("SendPort.send: Illegal replyTo port type"));
  },
  call$1: function(message) {
    var completer, port;
    completer = new $._AsyncCompleter(new $._FutureImpl(0, $.get$_Zone__current(), null), false);
    completer._Completer$0();
    port = $.ReceivePortImpl$();
    this.send$2(message, new $._NativeJsSendPort(port, $globalState.currentContext.id));
    port._liblib5$_callback = new $._BaseSendPort_call_closure(completer, port);
    return completer.future;
  },
  $isSendPort: true
},

_BaseSendPort_call_closure: {"": "Closure;completer_0,port_1",
  call$2: function(value, ignoreReplyTo) {
    var t1 = this.port_1;
    t1._liblib5$_callback = null;
    $globalState.currentContext.unregister$1(t1._id);
    t1 = this.completer_0;
    if (typeof value === "object" && value !== null && !!$.getInterceptor(value).$isException)
      t1.completeError$1(value);
    else
      t1.complete$1(t1, value);
  }
},

_NativeJsSendPort: {"": "_BaseSendPort;_receivePort<,_isolateId",
  send$2: function(message, replyTo) {
    $._waitForPendingPorts([message, replyTo], new $._NativeJsSendPort_send_closure(this, message, replyTo));
  },
  send$1: function(message) {
    return this.send$2(message, null);
  },
  $eq: function(_, other) {
    if (other == null)
      return false;
    return typeof other === "object" && other !== null && !!$.getInterceptor(other).$is_NativeJsSendPort && $.$eq(this._receivePort, other._receivePort);
  },
  get$hashCode: function(_) {
    return this._receivePort.get$_id();
  },
  $is_NativeJsSendPort: true,
  $isSendPort: true
},

_NativeJsSendPort_send_closure: {"": "Closure;this_1,message_2,replyTo_3",
  call$0: function() {
    var t1, t2, t3, t4, isolate, shouldSerialize, msg;
    t1 = {};
    t2 = this.this_1;
    t3 = this.replyTo_3;
    t2._checkReplyTo$1(t3);
    t4 = $globalState.isolates;
    isolate = t4.$index(t4, t2.get$_isolateId());
    if (isolate == null)
      return;
    if (t2.get$_receivePort().get$_liblib5$_callback() == null)
      return;
    shouldSerialize = $globalState.currentContext != null && $globalState.currentContext.id !== t2.get$_isolateId();
    msg = this.message_2;
    t1.msg_0 = msg;
    t1.reply_1 = t3;
    if (shouldSerialize) {
      t1.msg_0 = $._serializeMessage(t1.msg_0);
      t1.reply_1 = $._serializeMessage(t1.reply_1);
    }
    t3 = $globalState.topEventLoop;
    t4 = "receive " + $.S(msg);
    t3.enqueue$3;
    t3.events._add$1(new $._IsolateEvent(isolate, new $._NativeJsSendPort_send__closure(t1, t2, shouldSerialize), t4));
  }
},

_NativeJsSendPort_send__closure: {"": "Closure;box_0,this_4,shouldSerialize_5",
  call$0: function() {
    var t1, t2;
    t1 = this.this_4;
    if (t1.get$_receivePort().get$_liblib5$_callback() != null) {
      if (this.shouldSerialize_5) {
        t2 = this.box_0;
        t2.msg_0 = $._deserializeMessage(t2.msg_0);
        t2.reply_1 = $._deserializeMessage(t2.reply_1);
      }
      t2 = this.box_0;
      t1.get$_receivePort()._liblib5$_callback$2(t2.msg_0, t2.reply_1);
    }
  }
},

_WorkerSendPort: {"": "_BaseSendPort;_workerId<,_receivePortId,_isolateId",
  send$2: function(message, replyTo) {
    $._waitForPendingPorts([message, replyTo], new $._WorkerSendPort_send_closure(this, message, replyTo));
  },
  send$1: function(message) {
    return this.send$2(message, null);
  },
  $eq: function(_, other) {
    var t1;
    if (other == null)
      return false;
    if (typeof other === "object" && other !== null && !!$.getInterceptor(other).$is_WorkerSendPort)
      t1 = $.$eq(this._workerId, other._workerId) && $.$eq(this._isolateId, other._isolateId) && $.$eq(this._receivePortId, other._receivePortId);
    else
      t1 = false;
    return t1;
  },
  get$hashCode: function(_) {
    var t1, t2, t3;
    t1 = this._workerId;
    if (typeof t1 !== "number")
      throw t1.$shl();
    t2 = this._isolateId;
    if (typeof t2 !== "number")
      throw t2.$shl();
    t3 = this._receivePortId;
    if (typeof t3 !== "number")
      throw $.iae(t3);
    return (t1 << 16 ^ t2 << 8 ^ t3) >>> 0;
  },
  $is_WorkerSendPort: true,
  $isSendPort: true
},

_WorkerSendPort_send_closure: {"": "Closure;this_0,message_1,replyTo_2",
  call$0: function() {
    var t1, t2, workerMessage, manager;
    t1 = this.this_0;
    t2 = this.replyTo_2;
    t1._checkReplyTo$1(t2);
    workerMessage = $._serializeMessage($.makeLiteralMap(["command", "message", "port", t1, "msg", this.message_1, "replyTo", t2]));
    if ($globalState.isWorker === true) {
      $globalState.mainManager.postMessage$1;
      self.postMessage(workerMessage);
    } else {
      t2 = $globalState.managers;
      manager = t2.$index(t2, t1.get$_workerId());
      if (manager != null)
        manager.postMessage(workerMessage);
    }
  }
},

ReceivePortImpl: {"": "Object;_id<,_liblib5$_callback<",
  _liblib5$_callback$2: function(arg0, arg1) {
    return this._liblib5$_callback.call$2(arg0, arg1);
  },
  ReceivePortImpl$0: function() {
    var t1 = $globalState.currentContext;
    t1.register$2(t1, this._id, this);
  },
  static: {
"": "ReceivePortImpl__nextFreeId",
ReceivePortImpl$: function() {
  var t1 = $.ReceivePortImpl__nextFreeId;
  $.ReceivePortImpl__nextFreeId = $.$add$ns(t1, 1);
  t1 = new $.ReceivePortImpl(t1, null);
  t1.ReceivePortImpl$0();
  return t1;
}}

},

_waitForPendingPorts_closure: {"": "Closure;callback_0",
  call$1: function(_) {
    return this.callback_0.call$0();
  }
},

_PendingSendPortFinder: {"": "_MessageTraverser;ports,_visited",
  visitPrimitive$1: function(x) {
  },
  visitList$1: function(list) {
    var t1 = this._visited;
    if (t1.$index(t1, list) != null)
      return;
    t1.$indexSet(t1, list, true);
    $.forEach$1$ax(list, new $._PendingSendPortFinder_visitList_closure(this));
  },
  visitMap$1: function(map) {
    var t1 = this._visited;
    if (t1.$index(t1, map) != null)
      return;
    t1.$indexSet(t1, map, true);
    $.forEach$1$ax(map.get$values(map), new $._PendingSendPortFinder_visitMap_closure(this));
  },
  visitSendPort$1: function(port) {
  },
  visitIsolateSink$1: function(sink) {
    this.visitSendPort$1(sink._port);
  },
  visitCloseToken$1: function(token) {
  },
  _PendingSendPortFinder$0: function() {
    this._visited = new $._JsVisitedMap(null);
  },
  static: {
_PendingSendPortFinder$: function() {
  var t1 = new $._PendingSendPortFinder([], new $._MessageTraverserVisitedMap());
  t1._PendingSendPortFinder$0();
  return t1;
}}

},

_PendingSendPortFinder_visitList_closure: {"": "Closure;this_0",
  call$1: function(e) {
    return this.this_0._dispatch$1(e);
  }
},

_PendingSendPortFinder_visitMap_closure: {"": "Closure;this_0",
  call$1: function(e) {
    return this.this_0._dispatch$1(e);
  }
},

_JsSerializer: {"": "_Serializer;_nextFreeRefId,_visited",
  visitSendPort$1: function(x) {
    if (typeof x === "object" && x !== null && !!$.getInterceptor(x).$is_NativeJsSendPort)
      return ["sendport", $globalState.currentManagerId, x._isolateId, x._receivePort.get$_id()];
    if (typeof x === "object" && x !== null && !!$.getInterceptor(x).$is_WorkerSendPort)
      return ["sendport", x._workerId, x._isolateId, x._receivePortId];
    throw $.wrapException("Illegal underlying port " + $.S(x));
  },
  visitIsolateSink$1: function(sink) {
    var isClosed = sink._isClosed;
    return ["isolateSink", this.visitSendPort$1(sink._port), isClosed];
  },
  visitCloseToken$1: function(token) {
    return ["closeToken"];
  }
},

_JsCopier: {"": "_Copier;_visited",
  visitSendPort$1: function(x) {
    if (typeof x === "object" && x !== null && !!$.getInterceptor(x).$is_NativeJsSendPort)
      return new $._NativeJsSendPort(x._receivePort, x._isolateId);
    if (typeof x === "object" && x !== null && !!$.getInterceptor(x).$is_WorkerSendPort)
      return new $._WorkerSendPort(x._workerId, x._receivePortId, x._isolateId);
    throw $.wrapException("Illegal underlying port " + $.S(x));
  },
  visitIsolateSink$1: function(sink) {
    var result = new $.JsIsolateSink(false, this.visitSendPort$1(sink._port));
    result._isClosed = sink._isClosed;
    return result;
  },
  visitCloseToken$1: function(token) {
    return token;
  }
},

_JsDeserializer: {"": "_Deserializer;_deserialized",
  deserializeSendPort$1: function(list) {
    var t1, managerId, isolateId, receivePortId, isolate, receivePort;
    t1 = $.getInterceptor$asx(list);
    managerId = t1.$index(list, 1);
    isolateId = t1.$index(list, 2);
    receivePortId = t1.$index(list, 3);
    if ($.$eq(managerId, $globalState.currentManagerId)) {
      t1 = $globalState.isolates;
      isolate = t1.$index(t1, isolateId);
      if (isolate == null)
        return;
      receivePort = isolate.lookup$1(receivePortId);
      if (receivePort == null)
        return;
      return new $._NativeJsSendPort(receivePort, isolateId);
    } else
      return new $._WorkerSendPort(managerId, receivePortId, isolateId);
  },
  deserializeIsolateSink$1: function(list) {
    var t1, port, result;
    t1 = $.getInterceptor$asx(list);
    port = this.deserializeSendPort$1(t1.$index(list, 1));
    result = new $.JsIsolateSink(false, port);
    result._isClosed = t1.$index(list, 2);
    return result;
  },
  deserializeCloseToken$1: function(list) {
    return C.C_CloseToken;
  }
},

_JsVisitedMap: {"": "Object;tagged",
  $index: function(_, object) {
    return object.__MessageTraverser__attached_info__;
  },
  $indexSet: function(_, object, info) {
    this.tagged.push(object);
    object.__MessageTraverser__attached_info__ = info;
  },
  reset$0: function(_) {
    this.tagged = $.List_List(null);
  },
  cleanup$0: function() {
    var $length, i, t1;
    for ($length = this.tagged.length, i = 0; i < $length; ++i) {
      t1 = this.tagged;
      if (i >= t1.length)
        throw $.ioore(i);
      t1[i].__MessageTraverser__attached_info__ = null;
    }
    this.tagged = null;
  }
},

_MessageTraverserVisitedMap: {"": "Object;",
  $index: function(_, object) {
    return;
  },
  $indexSet: function(_, object, info) {
  },
  reset$0: function(_) {
  },
  cleanup$0: function() {
  }
},

_MessageTraverser: {"": "Object;",
  traverse$1: function(x) {
    var result, t1;
    if ($._MessageTraverser_isPrimitive(x))
      return this.visitPrimitive$1(x);
    t1 = this._visited;
    t1.reset$0(t1);
    result = null;
    try {
      result = this._dispatch$1(x);
    } finally {
      this._visited.cleanup$0();
    }
    return result;
  },
  _dispatch$1: function(x) {
    if (x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean")
      return this.visitPrimitive$1(x);
    if (typeof x === "object" && x !== null && (x.constructor === Array || !!$.getInterceptor(x).$isList))
      return this.visitList$1(x);
    if (typeof x === "object" && x !== null && !!$.getInterceptor(x).$isMap)
      return this.visitMap$1(x);
    if (typeof x === "object" && x !== null && !!$.getInterceptor(x).$isSendPort)
      return this.visitSendPort$1(x);
    if (typeof x === "object" && x !== null && !!$.getInterceptor(x).$isJsIsolateSink)
      return this.visitIsolateSink$1(x);
    if (typeof x === "object" && x !== null && !!$.getInterceptor(x).$isCloseToken)
      return this.visitCloseToken$1(x);
    return this.visitObject$1(x);
  },
  visitObject$1: function(x) {
    throw $.wrapException("Message serialization: Illegal value " + $.S(x) + " passed");
  }
},

_Copier: {"": "_MessageTraverser;",
  visitPrimitive$1: function(x) {
    return x;
  },
  visitList$1: function(list) {
    var t1, copy, len, t2, i;
    t1 = this._visited;
    copy = t1.$index(t1, list);
    if (copy != null)
      return copy;
    t1 = $.getInterceptor$asx(list);
    len = t1.get$length(list);
    copy = $.List_List(len);
    t2 = this._visited;
    t2.$indexSet(t2, list, copy);
    for (i = 0; i < len; ++i) {
      t2 = this._dispatch$1(t1.$index(list, i));
      if (i >= len)
        throw $.ioore(i);
      copy[i] = t2;
    }
    return copy;
  },
  visitMap$1: function(map) {
    var t1, t2;
    t1 = {};
    t2 = this._visited;
    t1.copy_0 = t2.$index(t2, map);
    t2 = t1.copy_0;
    if (t2 != null)
      return t2;
    t1.copy_0 = new $.HashMap(0, null, null, null, null);
    t2 = this._visited;
    t2.$indexSet(t2, map, t1.copy_0);
    map.forEach$1(map, new $._Copier_visitMap_closure(t1, this));
    return t1.copy_0;
  }
},

_Copier_visitMap_closure: {"": "Closure;box_0,this_1",
  call$2: function(key, val) {
    var t1 = this.this_1;
    $.$indexSet$ax(this.box_0.copy_0, t1._dispatch$1(key), t1._dispatch$1(val));
  }
},

_Serializer: {"": "_MessageTraverser;",
  visitPrimitive$1: function(x) {
    return x;
  },
  visitList$1: function(list) {
    var t1, copyId, id;
    t1 = this._visited;
    copyId = t1.$index(t1, list);
    if (copyId != null)
      return ["ref", copyId];
    id = this._nextFreeRefId;
    this._nextFreeRefId = id + 1;
    t1 = this._visited;
    t1.$indexSet(t1, list, id);
    return ["list", id, this._serializeList$1(list)];
  },
  visitMap$1: function(map) {
    var t1, copyId, id;
    t1 = this._visited;
    copyId = t1.$index(t1, map);
    if (copyId != null)
      return ["ref", copyId];
    id = this._nextFreeRefId;
    this._nextFreeRefId = id + 1;
    t1 = this._visited;
    t1.$indexSet(t1, map, id);
    return ["map", id, this._serializeList$1($.toList$0$ax(map.get$keys())), this._serializeList$1($.toList$0$ax(map.get$values(map)))];
  },
  _serializeList$1: function(list) {
    var t1, len, result, i, t2;
    t1 = $.getInterceptor$asx(list);
    len = t1.get$length(list);
    result = $.List_List(len);
    for (i = 0; i < len; ++i) {
      t2 = this._dispatch$1(t1.$index(list, i));
      if (i >= len)
        throw $.ioore(i);
      result[i] = t2;
    }
    return result;
  }
},

_Deserializer: {"": "Object;",
  deserialize$1: function(x) {
    if ($._Deserializer_isPrimitive(x))
      return x;
    this._deserialized = new $.HashMap(0, null, null, null, null);
    return this._deserializeHelper$1(x);
  },
  _deserializeHelper$1: function(x) {
    var t1, id;
    if (x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean")
      return x;
    t1 = $.getInterceptor$asx(x);
    switch (t1.$index(x, 0)) {
      case "ref":
        id = t1.$index(x, 1);
        t1 = this._deserialized;
        return t1.$index(t1, id);
      case "list":
        return this._deserializeList$1(x);
      case "map":
        return this._deserializeMap$1(x);
      case "sendport":
        return this.deserializeSendPort$1(x);
      case "isolateSink":
        return this.deserializeIsolateSink$1(x);
      case "closeToken":
        return this.deserializeCloseToken$1(x);
      default:
        return this.deserializeObject$1(x);
    }
  },
  _deserializeList$1: function(x) {
    var t1, id, dartList, len, i;
    t1 = $.getInterceptor$asx(x);
    id = t1.$index(x, 1);
    dartList = t1.$index(x, 2);
    if (typeof dartList !== "object" || dartList === null || (dartList.constructor !== Array || !!dartList.immutable$list) && !$.isJsIndexable(dartList, dartList[$.dispatchPropertyName]))
      return this._deserializeList$1$bailout(1, dartList, id);
    t1 = this._deserialized;
    t1.$indexSet(t1, id, dartList);
    len = dartList.length;
    for (i = 0; i < len; ++i) {
      if (i >= dartList.length)
        throw $.ioore(i);
      t1 = this._deserializeHelper$1(dartList[i]);
      if (i >= dartList.length)
        throw $.ioore(i);
      dartList[i] = t1;
    }
    return dartList;
  },
  _deserializeList$1$bailout: function(state0, dartList, id) {
    var t1, len, i;
    t1 = this._deserialized;
    t1.$indexSet(t1, id, dartList);
    t1 = $.getInterceptor$asx(dartList);
    len = t1.get$length(dartList);
    if (typeof len !== "number")
      throw $.iae(len);
    i = 0;
    for (; i < len; ++i)
      t1.$indexSet(dartList, i, this._deserializeHelper$1(t1.$index(dartList, i)));
    return dartList;
  },
  _deserializeMap$1: function(x) {
    var result, t1, id, t2, keys, values, len, i;
    result = new $.HashMap(0, null, null, null, null);
    t1 = $.getInterceptor$asx(x);
    id = t1.$index(x, 1);
    t2 = this._deserialized;
    t2.$indexSet(t2, id, result);
    keys = t1.$index(x, 2);
    values = t1.$index(x, 3);
    t1 = $.getInterceptor$asx(keys);
    len = t1.get$length(keys);
    if (typeof len !== "number")
      throw $.iae(len);
    if (len !== (len | 0))
      return this._deserializeMap$1$bailout(1, values, t1, len, result, keys);
    t2 = $.getInterceptor$asx(values);
    i = 0;
    for (; i < len; ++i)
      result.$indexSet(result, this._deserializeHelper$1(t1.$index(keys, i)), this._deserializeHelper$1(t2.$index(values, i)));
    return result;
  },
  _deserializeMap$1$bailout: function(state0, values, t1, len, result, keys) {
    switch (state0) {
      case 0:
        result = new $.HashMap(0, null, null, null, null);
        t1 = $.getInterceptor$asx(x);
        id = t1.$index(x, 1);
        t2 = this._deserialized;
        t2.$indexSet(t2, id, result);
        keys = t1.$index(x, 2);
        values = t1.$index(x, 3);
        t1 = $.getInterceptor$asx(keys);
        len = t1.get$length(keys);
        if (typeof len !== "number")
          throw $.iae(len);
      case 1:
        var id, t2, i;
        state0 = 0;
        t2 = $.getInterceptor$asx(values);
        i = 0;
        for (; i < len; ++i)
          result.$indexSet(result, this._deserializeHelper$1(t1.$index(keys, i)), this._deserializeHelper$1(t2.$index(values, i)));
        return result;
    }
  },
  deserializeObject$1: function(x) {
    throw $.wrapException("Unexpected serialized object");
  }
},

TimerImpl: {"": "Object;_once,_inEventLoop,_handle?",
  TimerImpl$2: function(milliseconds, callback) {
    var t1, t2;
    if (milliseconds === 0)
      t1 = $.get$globalThis().setTimeout == null || $globalState.isWorker === true;
    else
      t1 = false;
    if (t1) {
      this._handle = 1;
      t1 = $globalState.topEventLoop;
      t2 = $globalState.currentContext;
      t1.enqueue$3;
      t1.events._add$1(new $._IsolateEvent(t2, new $.TimerImpl_internalCallback(this, callback), "timer"));
      this._inEventLoop = true;
    } else if ($.get$globalThis().setTimeout != null) {
      t1 = $globalState.topEventLoop;
      t1.activeTimerCount = t1.activeTimerCount + 1;
      this._handle = $.get$globalThis().setTimeout($.convertDartClosureToJS(new $.TimerImpl_internalCallback0(this, callback), 0), milliseconds);
    } else
      throw $.wrapException(new $.UnsupportedError("Timer greater than 0."));
  },
  static: {
TimerImpl$: function(milliseconds, callback) {
  var t1 = new $.TimerImpl(true, false, null);
  t1.TimerImpl$2(milliseconds, callback);
  return t1;
}}

},

TimerImpl_internalCallback: {"": "Closure;this_0,callback_1",
  call$0: function() {
    this.this_0.set$_handle(null);
    this.callback_1.call$0();
  }
},

TimerImpl_internalCallback0: {"": "Closure;this_2,callback_3",
  call$0: function() {
    this.this_2.set$_handle(null);
    var t1 = $globalState.topEventLoop;
    t1.activeTimerCount = t1.activeTimerCount - 1;
    this.callback_3.call$0();
  }
}}],
["_js_helper", "dart:_js_helper", , {
isJsIndexable: function(object, record) {
  var result;
  if (record != null) {
    result = record.x;
    if (result != null)
      return result;
  }
  return typeof object === "object" && object !== null && !!$.getInterceptor(object).$isJavaScriptIndexingBehavior;
},

S: function(value) {
  var res;
  if (typeof value === "string")
    return value;
  if (typeof value === "number") {
    if (value !== 0)
      return "" + value;
  } else if (true === value)
    return "true";
  else if (false === value)
    return "false";
  else if (value == null)
    return "null";
  res = $.toString$0(value);
  if (typeof res !== "string")
    throw $.wrapException(new $.ArgumentError(value));
  return res;
},

Primitives_initializeStatics: function(id) {
  $.Primitives_mirrorFunctionCacheName = $.$add$ns($.Primitives_mirrorFunctionCacheName, "_" + $.S(id));
  $.Primitives_mirrorInvokeCacheName = $.$add$ns($.Primitives_mirrorInvokeCacheName, "_" + $.S(id));
},

Primitives_objectHashCode: function(object) {
  var hash = object.$identityHash;
  if (hash == null) {
    hash = Math.random() * 0x3fffffff | 0;
    object.$identityHash = hash;
  }
  return hash;
},

Primitives_printString: function(string) {
  if (typeof dartPrint == "function") {
    dartPrint(string);
    return;
  }
  if (typeof console == "object" && typeof console.log == "function") {
    console.log(string);
    return;
  }
  if (typeof window == "object")
    return;
  if (typeof print == "function") {
    print(string);
    return;
  }
  throw "Unable to print message: " + String(string);
},

Primitives_objectTypeName: function(object) {
  var $name, decompiled, t1;
  $name = $.constructorNameFallback($.getInterceptor(object));
  if ($.$eq($name, "Object")) {
    decompiled = String(object.constructor).match(/^\s*function\s*(\S*)\s*\(/)[1];
    if (typeof decompiled === "string")
      $name = decompiled;
  }
  t1 = $.getInterceptor$s($name);
  if (t1.codeUnitAt$1($name, 0) === 36)
    $name = t1.substring$1($name, 1);
  t1 = $.getRuntimeTypeInfo(object);
  return $.S($name) + $.joinArguments(t1, 0);
},

Primitives_objectToString: function(object) {
  return "Instance of '" + $.Primitives_objectTypeName(object) + "'";
},

Primitives_newFixedList: function($length) {
  var result = new Array($length);
  result.fixed$length = true;
  return result;
},

Primitives__fromCharCodeApply: function(array) {
  var end, t1, result, i, subarray, t2;
  end = array.length;
  for (t1 = end <= 500, result = "", i = 0; i < end; i += 500) {
    if (t1)
      subarray = array;
    else {
      t2 = i + 500;
      t2 = t2 < end ? t2 : end;
      subarray = array.slice(i, t2);
    }
    result += String.fromCharCode.apply(null, subarray);
  }
  return result;
},

Primitives_stringFromCodePoints: function(codePoints) {
  var a, t1, i;
  a = [];
  for (t1 = new $.ListIterator(codePoints, codePoints.length, 0, null); t1.moveNext$0();) {
    i = t1._liblib$_current;
    if (typeof i !== "number" || Math.floor(i) !== i)
      throw $.wrapException(new $.ArgumentError(i));
    if (i <= 65535)
      a.push(i);
    else if (i <= 1114111) {
      a.push(55296 + (C.JSNumber_methods.$shr(i - 65536, 10) & 1023));
      a.push(56320 + (i & 1023));
    } else
      throw $.wrapException(new $.ArgumentError(i));
  }
  return $.Primitives__fromCharCodeApply(a);
},

Primitives_stringFromCharCodes: function(charCodes) {
  var t1, i;
  for (t1 = new $.ListIterator(charCodes, charCodes.length, 0, null); t1.moveNext$0();) {
    i = t1._liblib$_current;
    if (typeof i !== "number" || Math.floor(i) !== i)
      throw $.wrapException(new $.ArgumentError(i));
    if (i < 0)
      throw $.wrapException(new $.ArgumentError(i));
    if (i > 65535)
      return $.Primitives_stringFromCodePoints(charCodes);
  }
  return $.Primitives__fromCharCodeApply(charCodes);
},

Primitives_getProperty: function(object, key) {
  if (object == null || typeof object === "boolean" || typeof object === "number" || typeof object === "string")
    throw $.wrapException(new $.ArgumentError(object));
  return object[key];
},

Primitives_setProperty: function(object, key, value) {
  if (object == null || typeof object === "boolean" || typeof object === "number" || typeof object === "string")
    throw $.wrapException(new $.ArgumentError(object));
  object[key] = value;
},

iae: function(argument) {
  throw $.wrapException(new $.ArgumentError(argument));
},

ioore: function(index) {
  if (typeof index !== "number" || Math.floor(index) !== index)
    $.iae(index);
  throw $.wrapException(new $.RangeError("value " + $.S(index)));
},

wrapException: function(ex) {
  var wrapper;
  if (ex == null)
    ex = new $.NullThrownError();
  wrapper = new Error();
  wrapper.dartException = ex;
  if ("defineProperty" in Object) {
    Object.defineProperty(wrapper, "message", { get: $.toStringWrapper$closure.call$0 });
    wrapper.name = "";
  } else
    wrapper.toString = $.toStringWrapper$closure.call$0;
  return wrapper;
},

toStringWrapper: function() {
  return $.toString$0(this.dartException);
},

throwExpression: function(ex) {
  throw $.wrapException(ex);
},

unwrapException: function(ex) {
  var t1, message, number, ieErrorCode, t2, t3, t4, nullLiteralCall, t5, t6, t7, t8, t9, match;
  t1 = new $.unwrapException_saveStackTrace(ex);
  if (ex == null)
    return;
  if (typeof ex !== "object")
    return ex;
  if ("dartException" in ex)
    return t1.call$1(ex.dartException);
  else if (!("message" in ex))
    return ex;
  message = ex.message;
  if ("number" in ex && typeof ex.number == "number") {
    number = ex.number;
    ieErrorCode = number & 65535;
    if ((C.JSInt_methods.$shr(number, 16) & 8191) === 10)
      switch (ieErrorCode) {
        case 438:
          return t1.call$1($.JsNoSuchMethodError$($.S(message) + " (Error " + ieErrorCode + ")", null));
        case 445:
        case 5007:
          t2 = $.S(message) + " (Error " + ieErrorCode + ")";
          t3 = null;
          return t1.call$1(new $.NullError(t2, t3));
        default:
      }
  }
  if (ex instanceof TypeError) {
    t2 = $.get$TypeErrorDecoder_noSuchMethodPattern();
    t3 = $.get$TypeErrorDecoder_notClosurePattern();
    t4 = $.get$TypeErrorDecoder_nullCallPattern();
    nullLiteralCall = $.get$TypeErrorDecoder_nullLiteralCallPattern();
    t5 = $.get$TypeErrorDecoder_undefinedCallPattern();
    t6 = $.get$TypeErrorDecoder_undefinedLiteralCallPattern();
    t7 = $.get$TypeErrorDecoder_nullPropertyPattern();
    $.get$TypeErrorDecoder_nullLiteralPropertyPattern();
    t8 = $.get$TypeErrorDecoder_undefinedPropertyPattern();
    t9 = $.get$TypeErrorDecoder_undefinedLiteralPropertyPattern();
    match = t2.matchTypeError$1(message);
    if (match != null)
      return t1.call$1($.JsNoSuchMethodError$(message, match));
    else {
      match = t3.matchTypeError$1(message);
      if (match != null) {
        match.method = "call";
        return t1.call$1($.JsNoSuchMethodError$(message, match));
      } else {
        match = t4.matchTypeError$1(message);
        if (match == null) {
          match = nullLiteralCall.matchTypeError$1(message);
          if (match == null) {
            match = t5.matchTypeError$1(message);
            if (match == null) {
              match = t6.matchTypeError$1(message);
              if (match == null) {
                match = t7.matchTypeError$1(message);
                if (match == null) {
                  match = nullLiteralCall.matchTypeError$1(message);
                  if (match == null) {
                    match = t8.matchTypeError$1(message);
                    if (match == null) {
                      match = t9.matchTypeError$1(message);
                      t2 = match != null;
                    } else
                      t2 = true;
                  } else
                    t2 = true;
                } else
                  t2 = true;
              } else
                t2 = true;
            } else
              t2 = true;
          } else
            t2 = true;
        } else
          t2 = true;
        if (t2) {
          t2 = match == null ? null : match.method;
          return t1.call$1(new $.NullError(message, t2));
        }
      }
    }
    t2 = typeof message === "string" ? message : "";
    return t1.call$1(new $.UnknownJsTypeError(t2));
  }
  if (ex instanceof RangeError) {
    if (typeof message === "string" && message.indexOf("call stack") !== -1)
      return new $.StackOverflowError();
    return t1.call$1(new $.ArgumentError(null));
  }
  if (typeof InternalError == "function" && ex instanceof InternalError)
    if (typeof message === "string" && message === "too much recursion")
      return new $.StackOverflowError();
  return ex;
},

makeLiteralMap: function(keyValuePairs) {
  var iterator, result, key;
  iterator = $.get$iterator$ax(keyValuePairs);
  result = new $.LinkedHashMap(0, null, null, null, null, null, 0);
  for (; iterator.moveNext$0() === true;) {
    key = iterator.get$current();
    iterator.moveNext$0();
    result.$indexSet(result, key, iterator.get$current());
  }
  return result;
},

invokeClosure: function(closure, isolate, numberOfArguments, arg1, arg2) {
  var t1 = $.getInterceptor(numberOfArguments);
  if (t1.$eq(numberOfArguments, 0))
    return $._callInIsolate(isolate, new $.invokeClosure_closure(closure));
  else if (t1.$eq(numberOfArguments, 1))
    return $._callInIsolate(isolate, new $.invokeClosure_closure0(closure, arg1));
  else if (t1.$eq(numberOfArguments, 2))
    return $._callInIsolate(isolate, new $.invokeClosure_closure1(closure, arg1, arg2));
  else
    throw $.wrapException(new $._ExceptionImplementation("Unsupported number of arguments for wrapped closure"));
},

convertDartClosureToJS: function(closure, arity) {
  var $function = closure.$identity;
  if (!!$function)
    return $function;
  $function = (function ($2, $3) { return function($0, $1) { return $3(closure, $2, arity, $0, $1) }})($globalState.currentContext, $.invokeClosure$closure.call$5);
  closure.$identity = $function;
  return $function;
},

throwCyclicInit: function(staticName) {
  throw $.wrapException(new $.CyclicInitializationError("Cyclic initialization for static " + $.S(staticName)));
},

getRuntimeTypeInfo: function(target) {
  if (target == null)
    return;
  return target.$builtinTypeInfo;
},

runtimeTypeToString: function(type) {
  if (type == null)
    return "dynamic";
  else if (typeof type === "object" && type !== null && type.constructor === Array)
    return type[0].builtin$cls + $.joinArguments(type, 1);
  else if (typeof type == "function")
    return type.builtin$cls;
  else
    return;
},

joinArguments: function(types, startIndex) {
  var buffer, index, firstArgument, allDynamic, argument, str;
  if (types == null)
    return "";
  buffer = $.StringBuffer$("");
  for (index = startIndex, firstArgument = true, allDynamic = true; index < types.length; ++index) {
    if (firstArgument)
      firstArgument = false;
    else
      buffer._contents = buffer._contents + ", ";
    argument = types[index];
    if (argument != null)
      allDynamic = false;
    str = $.runtimeTypeToString(argument);
    str = typeof str === "string" ? str : str;
    buffer._contents = buffer._contents + str;
  }
  return allDynamic ? "" : "<" + $.S(buffer) + ">";
},

typeNameInChrome: function(obj) {
  return obj.constructor.name;
},

typeNameInSafari: function(obj) {
  return $.constructorNameFallback(obj);
},

typeNameInOpera: function(obj) {
  return $.constructorNameFallback(obj);
},

typeNameInFirefox: function(obj) {
  var $name = $.constructorNameFallback(obj);
  if ($name === "BeforeUnloadEvent")
    return "Event";
  if ($name === "DataTransfer")
    return "Clipboard";
  if ($name === "GeoGeolocation")
    return "Geolocation";
  if ($name === "WorkerMessageEvent")
    return "MessageEvent";
  if ($name === "XMLDocument")
    return "Document";
  return $name;
},

typeNameInIE: function(obj) {
  var $name = $.constructorNameFallback(obj);
  if ($name === "Document") {
    if (!!obj.xmlVersion)
      return "Document";
    return "HTMLDocument";
  }
  if ($name === "BeforeUnloadEvent")
    return "Event";
  if ($name === "DataTransfer")
    return "Clipboard";
  if ($name === "HTMLDDElement")
    return "HTMLElement";
  if ($name === "HTMLDTElement")
    return "HTMLElement";
  if ($name === "HTMLPhraseElement")
    return "HTMLElement";
  if ($name === "Position")
    return "Geoposition";
  if ($name === "Object")
    if (window.DataView && obj instanceof window.DataView)
      return "DataView";
  return $name;
},

constructorNameFallback: function(object) {
  var $constructor, $name, t1, string;
  if (object == null)
    return "Null";
  $constructor = object.constructor;
  if (typeof $constructor === "function") {
    $name = $constructor.builtin$cls;
    if ($name != null)
      return $name;
    $name = $constructor.name;
    if (typeof $name === "string")
      t1 = $name !== "" && $name !== "Object" && $name !== "Function.prototype";
    else
      t1 = false;
    if (t1)
      return $name;
  }
  string = Object.prototype.toString.call(object);
  return string.substring(8, string.length - 1);
},

alternateTag: function(object, tag) {
  if (!!/^HTML[A-Z].*Element$/.test(tag)) {
    if (Object.prototype.toString.call(object) === "[object Object]")
      return;
    return "HTMLElement";
  }
  return;
},

getFunctionForTypeNameOf: function() {
  var getTagFunction = $.getBaseFunctionForTypeNameOf();
  if (typeof dartExperimentalFixupGetTag == "function")
    return $.applyExperimentalFixup(dartExperimentalFixupGetTag, getTagFunction);
  return getTagFunction;
},

getBaseFunctionForTypeNameOf: function() {
  if (typeof navigator !== "object")
    return $.typeNameInChrome$closure;
  var userAgent = navigator.userAgent;
  if (userAgent.indexOf("Chrome") !== -1 || userAgent.indexOf("DumpRenderTree") !== -1)
    return $.typeNameInChrome$closure;
  else if (userAgent.indexOf("Firefox") !== -1)
    return $.typeNameInFirefox$closure;
  else if (userAgent.indexOf("MSIE") !== -1)
    return $.typeNameInIE$closure;
  else if (userAgent.indexOf("Opera") !== -1)
    return $.typeNameInOpera$closure;
  else if (userAgent.indexOf("AppleWebKit") !== -1)
    return $.typeNameInSafari$closure;
  else
    return $.constructorNameFallback$closure;
},

applyExperimentalFixup: function(fixupJSFunction, originalGetTagDartFunction) {
  return new $.applyExperimentalFixup_newGetTagDartFunction(fixupJSFunction((function(invoke, closure){return function(arg){ return invoke(closure, arg); };})($.callDartFunctionWith1Arg$closure.call$2, originalGetTagDartFunction)));
},

callDartFunctionWith1Arg: function(fn, arg) {
  return fn.call$1(arg);
},

toStringForNativeObject: function(obj) {
  return "Instance of " + $.get$getTypeNameOf().call$1(obj);
},

hashCodeForNativeObject: function(object) {
  return $.Primitives_objectHashCode(object);
},

defineProperty: function(obj, property, value) {
  Object.defineProperty(obj, property, {value: value, enumerable: false, writable: true, configurable: true});
},

defineNativeMethods: function(tags, interceptorClass) {
  $.defineNativeMethodsCommon(tags, interceptorClass, true);
},

defineNativeMethodsNonleaf: function(tags, interceptorClass) {
  $.defineNativeMethodsCommon(tags, interceptorClass, false);
},

defineNativeMethodsExtended: function(tags, interceptorClass, subclassInterceptorClasses) {
  var classes, t1, i;
  if ($.interceptorToTag == null)
    $.interceptorToTag = [];
  classes = subclassInterceptorClasses;
  for (t1 = classes.length, i = 0; i < t1; ++i) {
    $.interceptorToTag.push(classes[i]);
    $.interceptorToTag.push(tags);
  }
  $.defineNativeMethodsCommon(tags, interceptorClass, false);
},

defineNativeMethodsCommon: function(tags, interceptorClass, isLeaf) {
  var methods, tagsList, i, tag;
  methods = interceptorClass.prototype;
  if ($.interceptorsByTag == null)
    $.interceptorsByTag = {};
  if ($.leafTags == null)
    $.leafTags = {};
  tagsList = tags.split("|");
  for (i = 0; i < tagsList.length; ++i) {
    tag = tagsList[i];
    $.interceptorsByTag[tag] = methods;
    $.leafTags[tag] = isLeaf;
  }
},

defineNativeMethodsFinish: function() {
},

lookupInterceptor: function(hasOwnPropertyFunction, tag) {
  var map = $.interceptorsByTag;
  if (map == null)
    return;
  return hasOwnPropertyFunction.call(map, tag) ? map[tag] : null;
},

lookupDispatchRecord: function(obj) {
  var hasOwnPropertyFunction, tag, interceptor, secondTag, t1;
  hasOwnPropertyFunction = Object.prototype.hasOwnProperty;
  tag = $.get$getTypeNameOf().call$1(obj);
  interceptor = $.lookupInterceptor(hasOwnPropertyFunction, tag);
  if (interceptor == null) {
    secondTag = $.alternateTag(obj, tag);
    if (secondTag != null)
      interceptor = $.lookupInterceptor(hasOwnPropertyFunction, secondTag);
  }
  if (interceptor == null)
    return;
  t1 = $.leafTags;
  if (t1 != null && t1[tag] === true)
    return $.makeLeafDispatchRecord(interceptor);
  else
    return $.makeDispatchRecord(interceptor, Object.getPrototypeOf(obj), null, null);
},

makeLeafDispatchRecord: function(interceptor) {
  return $.makeDispatchRecord(interceptor, false, null, !!interceptor.$isJavaScriptIndexingBehavior);
},

TypeErrorDecoder: {"": "Object;_pattern,_arguments,_argumentsExpr,_expr,_method,_receiver",
  matchTypeError$1: function(message) {
    var match, result, t1;
    match = new RegExp(this._pattern).exec(message);
    if (match == null)
      return;
    result = {};
    t1 = this._arguments;
    if (t1 !== -1)
      result.arguments = match[t1 + 1];
    t1 = this._argumentsExpr;
    if (t1 !== -1)
      result.argumentsExpr = match[t1 + 1];
    t1 = this._expr;
    if (t1 !== -1)
      result.expr = match[t1 + 1];
    t1 = this._method;
    if (t1 !== -1)
      result.method = match[t1 + 1];
    t1 = this._receiver;
    if (t1 !== -1)
      result.receiver = match[t1 + 1];
    return result;
  },
  static: {
"": "TypeErrorDecoder_noSuchMethodPattern,TypeErrorDecoder_notClosurePattern,TypeErrorDecoder_nullCallPattern,TypeErrorDecoder_nullLiteralCallPattern,TypeErrorDecoder_undefinedCallPattern,TypeErrorDecoder_undefinedLiteralCallPattern,TypeErrorDecoder_nullPropertyPattern,TypeErrorDecoder_nullLiteralPropertyPattern,TypeErrorDecoder_undefinedPropertyPattern,TypeErrorDecoder_undefinedLiteralPropertyPattern",
TypeErrorDecoder_extractPattern: function(message) {
  var match, $arguments, argumentsExpr, expr, method, receiver;
  message = message.replace(String({}), '$receiver$').replace(new RegExp("[[\\]{}()*+?.\\\\^$|]", 'g'), '\\$&');
  match = message.match(/\\\$[a-zA-Z]+\\\$/g);
  if (match == null)
    match = [];
  $arguments = match.indexOf("\\$arguments\\$");
  argumentsExpr = match.indexOf("\\$argumentsExpr\\$");
  expr = match.indexOf("\\$expr\\$");
  method = match.indexOf("\\$method\\$");
  receiver = match.indexOf("\\$receiver\\$");
  return new $.TypeErrorDecoder(message.replace('\\$arguments\\$', '((?:x|[^x])*)').replace('\\$argumentsExpr\\$', '((?:x|[^x])*)').replace('\\$expr\\$', '((?:x|[^x])*)').replace('\\$method\\$', '((?:x|[^x])*)').replace('\\$receiver\\$', '((?:x|[^x])*)'), $arguments, argumentsExpr, expr, method, receiver);
},

TypeErrorDecoder_provokeCallErrorOn: function(expression) {
  return function($expr$) {
  var $argumentsExpr$ = '$arguments$'
  try {
    $expr$.$method$($argumentsExpr$);
  } catch (e) {
    return e.message;
  }
}(expression);
},

TypeErrorDecoder_provokeCallErrorOnNull: function() {
  return function() {
  var $argumentsExpr$ = '$arguments$'
  try {
    null.$method$($argumentsExpr$);
  } catch (e) {
    return e.message;
  }
}();
},

TypeErrorDecoder_provokeCallErrorOnUndefined: function() {
  return function() {
  var $argumentsExpr$ = '$arguments$'
  try {
    (void 0).$method$($argumentsExpr$);
  } catch (e) {
    return e.message;
  }
}();
},

TypeErrorDecoder_provokePropertyErrorOn: function(expression) {
  return function($expr$) {
  try {
    $expr$.$method$;
  } catch (e) {
    return e.message;
  }
}(expression);
},

TypeErrorDecoder_provokePropertyErrorOnNull: function() {
  return function() {
  try {
    null.$method$;
  } catch (e) {
    return e.message;
  }
}();
},

TypeErrorDecoder_provokePropertyErrorOnUndefined: function() {
  return function() {
  try {
    (void 0).$method$;
  } catch (e) {
    return e.message;
  }
}();
}}

},

NullError: {"": "Error;_message,_method",
  toString$0: function(_) {
    var t1 = this._method;
    if (t1 == null)
      return "NullError: " + $.S(this._message);
    return "NullError: Cannot call \"" + $.S(t1) + "\" on null";
  },
  $isError: true
},

JsNoSuchMethodError: {"": "Error;_message,_method,_receiver",
  toString$0: function(_) {
    var t1, t2;
    t1 = this._method;
    if (t1 == null)
      return "NoSuchMethodError: " + $.S(this._message);
    t2 = this._receiver;
    if (t2 == null)
      return "NoSuchMethodError: Cannot call \"" + t1 + "\" (" + $.S(this._message) + ")";
    return "NoSuchMethodError: Cannot call \"" + t1 + "\" on \"" + t2 + "\" (" + $.S(this._message) + ")";
  },
  $isError: true,
  static: {
JsNoSuchMethodError$: function(_message, match) {
  var t1, t2;
  t1 = match == null;
  t2 = t1 ? null : match.method;
  t1 = t1 ? null : match.receiver;
  return new $.JsNoSuchMethodError(_message, t2, t1);
}}

},

UnknownJsTypeError: {"": "Error;_message",
  toString$0: function(_) {
    var t1 = this._message;
    return C.JSString_methods.get$isEmpty(t1) ? "Error" : "Error: " + t1;
  }
},

unwrapException_saveStackTrace: {"": "Closure;ex_0",
  call$1: function(error) {
    if (typeof error === "object" && error !== null && !!$.getInterceptor(error).$isError)
      if (error.$thrownJsError == null)
        error.$thrownJsError = this.ex_0;
    return error;
  }
},

_StackTrace: {"": "Object;_exception,_trace",
  toString$0: function(_) {
    var t1, trace;
    t1 = this._trace;
    if (t1 != null)
      return t1;
    t1 = this._exception;
    trace = typeof t1 === "object" ? t1.stack : null;
    t1 = trace == null ? "" : trace;
    this._trace = t1;
    return t1;
  }
},

invokeClosure_closure: {"": "Closure;closure_0",
  call$0: function() {
    return this.closure_0.call$0();
  }
},

invokeClosure_closure0: {"": "Closure;closure_1,arg1_2",
  call$0: function() {
    return this.closure_1.call$1(this.arg1_2);
  }
},

invokeClosure_closure1: {"": "Closure;closure_3,arg1_4,arg2_5",
  call$0: function() {
    return this.closure_3.call$2(this.arg1_4, this.arg2_5);
  }
},

Closure: {"": "Object;",
  toString$0: function(_) {
    return "Closure";
  }
},

BoundClosure: {"": "Closure;_self,_target,_receiver",
  $eq: function(_, other) {
    if (other == null)
      return false;
    if (this === other)
      return true;
    if (typeof other !== "object" || other === null || !$.getInterceptor(other).$isBoundClosure)
      return false;
    return this._self === other._self && this._target === other._target && this._receiver === other._receiver;
  },
  get$hashCode: function(_) {
    return $.get$hashCode$(this._self) + $.get$hashCode$(this._target) + $.get$hashCode$(this._receiver) & 0x3ffffff;
  },
  $isBoundClosure: true
},

applyExperimentalFixup_newGetTagDartFunction: {"": "Closure;newGetTagJSFunction_0",
  call$1: function(object) {
    return this.newGetTagJSFunction_0(object);
  }
}}],
["box2d", "package:box2d/box2d.dart", , {
MathBox_distanceSquared: function(v1, v2) {
  var t1, t2, t3, t4, t5, dx, dy;
  t1 = v1.storage;
  t2 = t1.length;
  if (0 >= t2)
    throw $.ioore(0);
  t3 = t1[0];
  t4 = v2.storage;
  t5 = t4.length;
  if (0 >= t5)
    throw $.ioore(0);
  dx = t3 - t4[0];
  if (1 >= t2)
    throw $.ioore(1);
  t1 = t1[1];
  if (1 >= t5)
    throw $.ioore(1);
  dy = t1 - t4[1];
  return dx * dx + dy * dy;
},

Vector2_crossVectorAndNumToOut: function(a, s, out) {
  var t1, t2, t3, t4;
  if (typeof s !== "number")
    return $.Vector2_crossVectorAndNumToOut$bailout(1, a, s, out);
  t1 = a.storage;
  t2 = t1.length;
  if (0 >= t2)
    throw $.ioore(0);
  t3 = t1[0];
  if (1 >= t2)
    throw $.ioore(1);
  t1 = t1[1];
  t2 = out.storage;
  t4 = t2.length;
  if (0 >= t4)
    throw $.ioore(0);
  t2[0] = s * t1;
  if (1 >= t4)
    throw $.ioore(1);
  t2[1] = -s * t3;
},

Vector2_crossVectorAndNumToOut$bailout: function(state0, a, s, out) {
  var t1, t2, t3, tempy;
  t1 = $.getInterceptor$n(s);
  t2 = t1.$negate(s);
  t3 = a.storage;
  if (0 >= t3.length)
    throw $.ioore(0);
  tempy = $.$mul$n(t2, t3[0]);
  if (1 >= t3.length)
    throw $.ioore(1);
  t3 = t1.$mul(s, t3[1]);
  t1 = out.storage;
  t2 = t1.length;
  if (0 >= t2)
    throw $.ioore(0);
  t1[0] = t3;
  if (1 >= t2)
    throw $.ioore(1);
  t1[1] = tempy;
},

ContactFilter: {"": "Object;",
  shouldCollide$2: function(fixtureA, fixtureB) {
    var filterA, filterB, t1;
    filterA = fixtureA.get$filter();
    filterB = fixtureB.get$filter();
    t1 = filterA.groupIndex;
    if (t1 !== 0 && t1 === filterB.groupIndex)
      return t1 > 0;
    return (filterA.maskBits & filterB.categoryBits) >>> 0 !== 0 && (filterA.categoryBits & filterB.maskBits) >>> 0 !== 0;
  }
},

ContactImpulse: {"": "Object;normalImpulses,tangentImpulses", static: {
ContactImpulse$: function() {
  return new $.ContactImpulse($.List_List(2), $.List_List(2));
}}
},

DebugDraw: {"": "Object;flags@"},

AxisAlignedBox: {"": "Object;lowerBound<,upperBound<",
  setFromCombination$2: function(boxOne, boxTwo) {
    var t1, t2, t3;
    t1 = this.lowerBound;
    t2 = boxOne.lowerBound;
    t2.get$x;
    t2 = t2.storage;
    if (0 >= t2.length)
      throw $.ioore(0);
    t2 = t2[0];
    t3 = boxTwo.lowerBound;
    t3.get$x;
    t3 = t3.storage;
    if (0 >= t3.length)
      throw $.ioore(0);
    t3 = $.min(t2, t3[0]);
    t1.set$x;
    t1 = t1.storage;
    if (0 >= t1.length)
      throw $.ioore(0);
    t1[0] = t3;
    t3 = this.lowerBound;
    t1 = boxOne.lowerBound;
    t1.get$y;
    t1 = t1.storage;
    if (1 >= t1.length)
      throw $.ioore(1);
    t1 = t1[1];
    t2 = boxTwo.lowerBound;
    t2.get$y;
    t2 = t2.storage;
    if (1 >= t2.length)
      throw $.ioore(1);
    t2 = $.min(t1, t2[1]);
    t3.set$y;
    t3 = t3.storage;
    if (1 >= t3.length)
      throw $.ioore(1);
    t3[1] = t2;
    t2 = this.upperBound;
    t3 = boxOne.upperBound;
    t3.get$x;
    t3 = t3.storage;
    if (0 >= t3.length)
      throw $.ioore(0);
    t3 = t3[0];
    t1 = boxTwo.upperBound;
    t1.get$x;
    t1 = t1.storage;
    if (0 >= t1.length)
      throw $.ioore(0);
    t1 = $.max(t3, t1[0]);
    t2.set$x;
    t2 = t2.storage;
    if (0 >= t2.length)
      throw $.ioore(0);
    t2[0] = t1;
    t1 = this.upperBound;
    t2 = boxOne.upperBound;
    t2.get$y;
    t2 = t2.storage;
    if (1 >= t2.length)
      throw $.ioore(1);
    t2 = t2[1];
    t3 = boxTwo.upperBound;
    t3.get$y;
    t3 = t3.storage;
    if (1 >= t3.length)
      throw $.ioore(1);
    t3 = $.max(t2, t3[1]);
    t1.set$y;
    t1 = t1.storage;
    if (1 >= t1.length)
      throw $.ioore(1);
    t1[1] = t3;
  },
  get$center: function() {
    var c, t1, t2, t3;
    c = new $.Vector2(new Float32Array(2));
    t1 = c.storage;
    t2 = this.lowerBound.storage;
    if (1 >= t2.length)
      throw $.ioore(1);
    t3 = t2[1];
    if (1 >= t1.length)
      throw $.ioore(1);
    t1[1] = t3;
    t1[0] = t2[0];
    c.add$1(c, this.upperBound);
    if (1 >= t1.length)
      throw $.ioore(1);
    t1[1] = t1[1] * 0.5;
    t1[0] = t1[0] * 0.5;
    return c;
  },
  contains$1: function(_, aabb) {
    var t1, t2, t3, t4, t5, t6, t7;
    t1 = this.lowerBound;
    t1.get$x;
    t2 = t1.storage;
    t3 = t2.length;
    if (0 >= t3)
      throw $.ioore(0);
    t4 = t2[0];
    t5 = aabb.lowerBound;
    t5.get$x;
    t6 = t5.storage;
    t7 = t6.length;
    if (0 >= t7)
      throw $.ioore(0);
    if (t4 > t6[0]) {
      t1.get$y;
      if (1 >= t3)
        throw $.ioore(1);
      t1 = t2[1];
      t5.get$y;
      if (1 >= t7)
        throw $.ioore(1);
      if (t1 > t6[1]) {
        t1 = this.upperBound;
        t1.get$y;
        t2 = t1.storage;
        if (1 >= t2.length)
          throw $.ioore(1);
        t3 = t2[1];
        t4 = aabb.upperBound;
        t4.get$y;
        t5 = t4.storage;
        if (1 >= t5.length)
          throw $.ioore(1);
        if (t3 < t5[1]) {
          t1.get$x;
          t1 = t2[0];
          t4.get$x;
          t5 = t1 < t5[0];
          t1 = t5;
        } else
          t1 = false;
      } else
        t1 = false;
    } else
      t1 = false;
    return t1;
  },
  setFrom$1: function(other) {
    var t1, t2, t3;
    t1 = this.lowerBound;
    t2 = other.get$lowerBound();
    t1.setFrom$1;
    t1 = t1.storage;
    t2 = t2.storage;
    if (1 >= t2.length)
      throw $.ioore(1);
    t3 = t2[1];
    if (1 >= t1.length)
      throw $.ioore(1);
    t1[1] = t3;
    t1[0] = t2[0];
    t2 = this.upperBound;
    t1 = other.get$upperBound();
    t2.setFrom$1;
    t2 = t2.storage;
    t1 = t1.storage;
    if (1 >= t1.length)
      throw $.ioore(1);
    t3 = t1[1];
    if (1 >= t2.length)
      throw $.ioore(1);
    t2[1] = t3;
    t2[0] = t1[0];
  },
  toString$0: function(_) {
    return $.S(this.lowerBound) + ", " + $.S(this.upperBound);
  },
  AxisAlignedBox$2: function(lowerBound, upperBound) {
    if (this.lowerBound == null)
      this.lowerBound = new $.Vector2(new Float32Array(2));
    if (this.upperBound == null)
      this.upperBound = new $.Vector2(new Float32Array(2));
  },
  static: {
AxisAlignedBox$: function(lowerBound, upperBound) {
  var t1 = new $.AxisAlignedBox(lowerBound, upperBound);
  t1.AxisAlignedBox$2(lowerBound, upperBound);
  return t1;
},

AxisAlignedBox_testOverlap: function(a, b) {
  var t1, t2, t3, t4, t5, t6, t7;
  t1 = b.lowerBound;
  t1.get$x;
  t2 = t1.storage;
  t3 = t2.length;
  if (0 >= t3)
    throw $.ioore(0);
  t4 = t2[0];
  t5 = a.get$upperBound();
  t5.get$x;
  t6 = t5.storage;
  t7 = t6.length;
  if (0 >= t7)
    throw $.ioore(0);
  if (!(t4 > t6[0])) {
    t1.get$y;
    if (1 >= t3)
      throw $.ioore(1);
    t1 = t2[1];
    t5.get$y;
    if (1 >= t7)
      throw $.ioore(1);
    t6 = t1 > t6[1];
    t1 = t6;
  } else
    t1 = true;
  if (!t1) {
    t1 = a.get$lowerBound();
    t1.get$x;
    t2 = t1.storage;
    t3 = t2.length;
    if (0 >= t3)
      throw $.ioore(0);
    t4 = t2[0];
    t5 = b.upperBound;
    t5.get$x;
    t6 = t5.storage;
    t7 = t6.length;
    if (0 >= t7)
      throw $.ioore(0);
    if (!(t4 > t6[0])) {
      t1.get$y;
      if (1 >= t3)
        throw $.ioore(1);
      t1 = t2[1];
      t5.get$y;
      if (1 >= t7)
        throw $.ioore(1);
      t6 = t1 > t6[1];
      t1 = t6;
    } else
      t1 = true;
  } else
    t1 = true;
  return !t1;
}}

},

BroadPhase: {"": "Object;_tree,proxyCount,moveBuffer,_pairBuffer,_pairCapacity,_pairCount,queryProxy",
  createProxy$2: function(box, userData) {
    var node = this._tree.createProxy$2(box, userData);
    this.proxyCount = this.proxyCount + 1;
    this.moveBuffer.push(node);
    return node;
  },
  updatePairs$1: function(callback) {
    var t1, i, t2, t3, pairBuffer, primaryPair, pair;
    this._pairCount = 0;
    for (t1 = this._tree, i = 0; t2 = this.moveBuffer, i < t2.length; ++i) {
      this.queryProxy = t2[i];
      t2 = this.queryProxy;
      if (t2 == null)
        continue;
      t1._query$4(this, t2.get$box(), t1._root, 1);
    }
    this.moveBuffer = $.List_List(null);
    t2 = this._pairBuffer;
    t3 = this._pairCount;
    t2.getRange$2;
    $.IterableMixinWorkaround__rangeCheck(t2, 0, t3);
    pairBuffer = $.List_List$from($.SubListIterable$(t2, 0, t3), true);
    $.IterableMixinWorkaround_sortList(pairBuffer, new $.BroadPhase_updatePairs_closure());
    t2 = this._pairBuffer;
    t3 = this._pairCount;
    t2.setRange$4;
    if (typeof t2 !== "object" || t2 === null || !!t2.immutable$list)
      $.throwExpression(new $.UnsupportedError("set range"));
    $.IterableMixinWorkaround_setRangeList(t2, 0, t3, pairBuffer, 0);
    for (i = 0; i < this._pairCount;) {
      t2 = this._pairBuffer;
      if (i < 0 || i >= t2.length)
        throw $.ioore(i);
      primaryPair = t2[i];
      callback.call$2(primaryPair.get$proxyA().get$userData(), primaryPair.get$proxyB().get$userData());
      ++i;
      for (; i < this._pairCount;) {
        t2 = this._pairBuffer;
        if (i >= t2.length)
          throw $.ioore(i);
        pair = t2[i];
        if (!$.$eq(pair.get$proxyA(), primaryPair.get$proxyA()) || !$.$eq(pair.get$proxyB(), primaryPair.get$proxyB()))
          break;
        ++i;
      }
    }
    t1.rebalance$1(4);
  },
  treeCallback$1: function(proxy) {
    var t1, t2, t3, oldBuffer, i, i0, t4, t5;
    t1 = $.getInterceptor(proxy);
    if (t1.$eq(proxy, this.queryProxy))
      return true;
    t2 = this._pairCount;
    t3 = this._pairCapacity;
    if (t2 === t3) {
      oldBuffer = this._pairBuffer;
      if (t3 == null)
        throw t3.$mul();
      this._pairCapacity = t3 * 2;
      this._pairBuffer = $.List_List(this._pairCapacity);
      for (i = oldBuffer.length, t2 = this._pairBuffer, i0 = 0; i0 < i; ++i0) {
        t3 = oldBuffer[i0];
        if (i0 >= t2.length)
          throw $.ioore(i0);
        t2[i0] = t3;
      }
      t3 = this._pairCapacity;
      if (t3 == null)
        throw $.iae(t3);
      for (; i < t3; ++i) {
        if (i >= t2.length)
          throw $.ioore(i);
        t2[i] = new $.Pair(null, null);
      }
    }
    t1 = t1.get$key(proxy);
    t2 = this.queryProxy;
    t3 = $.get$key$x(t2);
    if (typeof t1 !== "number")
      throw t1.$lt();
    if (typeof t3 !== "number")
      throw $.iae(t3);
    t4 = this._pairBuffer;
    t5 = this._pairCount;
    if (t1 < t3) {
      if (t5 < 0 || t5 >= t4.length)
        throw $.ioore(t5);
      t4[t5].set$proxyA(proxy);
      t1 = this._pairBuffer;
      t2 = this._pairCount;
      if (t2 < 0 || t2 >= t1.length)
        throw $.ioore(t2);
      t1[t2].set$proxyB(this.queryProxy);
    } else {
      if (t5 < 0 || t5 >= t4.length)
        throw $.ioore(t5);
      t4[t5].set$proxyA(t2);
      t1 = this._pairBuffer;
      t2 = this._pairCount;
      if (t2 < 0 || t2 >= t1.length)
        throw $.ioore(t2);
      t1[t2].set$proxyB(proxy);
    }
    this._pairCount = this._pairCount + 1;
    return true;
  },
  BroadPhase$0: function() {
    var t1, t2, i;
    this.moveBuffer = $.List_List(null);
    this._pairBuffer = $.List_List(this._pairCapacity);
    t1 = this._pairCapacity;
    if (t1 == null)
      throw $.iae(t1);
    t2 = this._pairBuffer;
    i = 0;
    for (; i < t1; ++i) {
      if (i >= t2.length)
        throw $.ioore(i);
      t2[i] = new $.Pair(null, null);
    }
  },
  static: {
"": "BroadPhase_NULL_PROXY,BroadPhase_PAIR_CAPACITY",
BroadPhase$: function() {
  var t1 = new $.BroadPhase($.DynamicTree$(), 0, null, null, 16, 0, null);
  t1.BroadPhase$0();
  return t1;
}}

},

BroadPhase_updatePairs_closure: {"": "Closure;",
  call$2: function(a, b) {
    return $.compareTo$1$ns(a, b);
  }
},

DynamicTree: {"": "Object;_root,_nodeCount,_lastLeaf,_insertionCount,_path,_nodeStack,_drawVectors,_nodeCounter,_tempVector,_tempBox,center<,deltaOne,deltaTwo",
  createProxy$2: function(box, userData) {
    var proxy, t1, t2, t3, t4, t5, iterationCount, height, tryCount;
    proxy = this._allocateNode$0();
    t1 = proxy.get$box().lowerBound;
    t2 = box.lowerBound;
    t2.get$x;
    t3 = t2.storage;
    t4 = t3.length;
    if (0 >= t4)
      throw $.ioore(0);
    t5 = t3[0];
    t1.set$x;
    t1 = t1.storage;
    if (0 >= t1.length)
      throw $.ioore(0);
    t1[0] = t5 - 0.1;
    t5 = proxy.get$box().lowerBound;
    t2.get$y;
    if (1 >= t4)
      throw $.ioore(1);
    t3 = t3[1];
    t5.set$y;
    t5 = t5.storage;
    if (1 >= t5.length)
      throw $.ioore(1);
    t5[1] = t3 - 0.1;
    t3 = proxy.get$box().upperBound;
    t5 = box.upperBound;
    t5.get$x;
    t4 = t5.storage;
    t2 = t4.length;
    if (0 >= t2)
      throw $.ioore(0);
    t1 = t4[0];
    t3.set$x;
    t3 = t3.storage;
    if (0 >= t3.length)
      throw $.ioore(0);
    t3[0] = t1 + 0.1;
    t1 = proxy.get$box().upperBound;
    t5.get$y;
    if (1 >= t2)
      throw $.ioore(1);
    t4 = t4[1];
    t1.set$y;
    t1 = t1.storage;
    if (1 >= t1.length)
      throw $.ioore(1);
    t1[1] = t4 + 0.1;
    proxy.set$userData(userData);
    this._insertLeaf$1(proxy);
    iterationCount = C.JSInt_methods.$shr(this._nodeCount, 4);
    height = this._computeHeight$1(this._root);
    tryCount = 0;
    while (true) {
      if (!(height > 64 && tryCount < 10))
        break;
      this.rebalance$1(iterationCount);
      height = this._computeHeight$1(this._root);
      ++tryCount;
    }
    return proxy;
  },
  moveProxy$3: function(argProxy, argBox, displacement) {
    var t1, t2, t3, t4, t5, t6;
    t1 = argProxy.get$box();
    if (t1.contains$1(t1, argBox))
      return false;
    this._removeLeaf$1(argProxy);
    t1 = argBox.lowerBound;
    t1.get$x;
    t2 = t1.storage;
    t3 = t2.length;
    if (0 >= t3)
      throw $.ioore(0);
    t4 = t2[0];
    t1.set$x;
    t2[0] = t4 - 0.1;
    t1.get$y;
    if (1 >= t3)
      throw $.ioore(1);
    t3 = t2[1];
    t1.set$y;
    t2[1] = t3 - 0.1;
    t3 = argBox.upperBound;
    t3.get$x;
    t2 = t3.storage;
    t1 = t2.length;
    if (0 >= t1)
      throw $.ioore(0);
    t4 = t2[0];
    t3.set$x;
    t2[0] = t4 + 0.1;
    t3.get$y;
    if (1 >= t1)
      throw $.ioore(1);
    t1 = t2[1];
    t3.set$y;
    t2[1] = t1 + 0.1;
    t1 = this._tempVector;
    t1.setFrom$1(displacement);
    t1.scale$1(t1, 2);
    t1 = t1.storage;
    t2 = t1.length;
    if (0 >= t2)
      throw $.ioore(0);
    t3 = t1[0];
    if (t3 < 0) {
      t4 = argBox.lowerBound;
      t4.get$x;
      t5 = t4.storage;
      if (0 >= t5.length)
        throw $.ioore(0);
      t6 = t5[0];
      t4.set$x;
      t5[0] = t6 + t3;
    } else {
      t4 = argBox.upperBound;
      t4.get$x;
      t5 = t4.storage;
      if (0 >= t5.length)
        throw $.ioore(0);
      t6 = t5[0];
      t4.set$x;
      t5[0] = t6 + t3;
    }
    if (1 >= t2)
      throw $.ioore(1);
    t1 = t1[1];
    if (t1 < 0) {
      t2 = argBox.lowerBound;
      t2.get$y;
      t3 = t2.storage;
      if (1 >= t3.length)
        throw $.ioore(1);
      t4 = t3[1];
      t2.set$y;
      t3[1] = t4 + t1;
    } else {
      t2 = argBox.upperBound;
      t2.get$y;
      t3 = t2.storage;
      if (1 >= t3.length)
        throw $.ioore(1);
      t4 = t3[1];
      t2.set$y;
      t3[1] = t4 + t1;
    }
    t1 = argProxy.get$box();
    t1.lowerBound.setFrom$1(argBox.lowerBound);
    t1.upperBound.setFrom$1(argBox.upperBound);
    this._insertLeaf$1(argProxy);
    return true;
  },
  _allocateNode$0: function() {
    var t1, i, t2, node;
    t1 = this._nodeStack;
    if (t1._head === t1._tail)
      for (i = 0; i < 6; ++i) {
        t2 = new $.AxisAlignedBox(null, null);
        if (t2.lowerBound == null)
          t2.lowerBound = new $.Vector2(new Float32Array(2));
        if (t2.upperBound == null)
          t2.upperBound = new $.Vector2(new Float32Array(2));
        t1.addFirst$1(new $.DynamicTreeNode(t2, null, null, null, null, null, null));
      }
    node = t1.removeFirst$0();
    t1 = $.getInterceptor$x(node);
    t1.set$parent(node, null);
    node.set$childOne(null);
    node.set$childTwo(null);
    node.set$userData(null);
    t1.set$key(node, this._nodeCounter);
    this._nodeCounter = this._nodeCounter + 1;
    this._nodeCount = this._nodeCount + 1;
    return node;
  },
  _query$4: function(callback, argBox, node, count) {
    if (typeof count !== "number")
      return this._query$4$bailout(1, callback, argBox, node, count);
    if (node == null)
      return true;
    if ($.AxisAlignedBox_testOverlap(argBox, node.get$box()))
      if (node.get$isLeaf()) {
        if (callback.treeCallback$1(node) !== true)
          return false;
      } else {
        if (count < 64) {
          ++count;
          if (!this._query$4(callback, argBox, node.get$childOne(), count))
            return false;
        }
        if (count < 64)
          if (!this._query$4(callback, argBox, node.get$childTwo(), count + 1))
            return false;
      }
    return true;
  },
  _query$4$bailout: function(state0, callback, argBox, node, count) {
    var t1;
    if (node == null)
      return true;
    if ($.AxisAlignedBox_testOverlap(argBox, node.get$box()))
      if (node.get$isLeaf()) {
        if (callback.treeCallback$1(node) !== true)
          return false;
      } else {
        t1 = $.getInterceptor$n(count);
        if (t1.$lt(count, 64)) {
          count = t1.$add(count, 1);
          if (!this._query$4(callback, argBox, node.get$childOne(), count))
            return false;
        }
        t1 = $.getInterceptor$n(count);
        if (t1.$lt(count, 64)) {
          count = t1.$add(count, 1);
          if (!this._query$4(callback, argBox, node.get$childTwo(), count))
            return false;
        }
      }
    return true;
  },
  _insertLeaf$1: function(node) {
    var t1, t2, c, t3, t4, t5, sibling, childOne, childTwo, t6, t7, t8, t9, node1, node2, node10;
    this._insertionCount = this._insertionCount + 1;
    if (this._root == null) {
      this._root = node;
      $.set$parent$x(node, null);
      return;
    }
    t1 = this.center;
    t2 = node.get$box();
    c = new $.Vector2(new Float32Array(2));
    t3 = c.storage;
    t4 = t2.lowerBound.storage;
    if (1 >= t4.length)
      throw $.ioore(1);
    t5 = t4[1];
    if (1 >= t3.length)
      throw $.ioore(1);
    t3[1] = t5;
    t3[0] = t4[0];
    c.add$1(c, t2.upperBound);
    if (1 >= t3.length)
      throw $.ioore(1);
    t3[1] = t3[1] * 0.5;
    t3[0] = t3[0] * 0.5;
    t2 = t1.storage;
    t4 = t3[1];
    if (1 >= t2.length)
      throw $.ioore(1);
    t2[1] = t4;
    t2[0] = t3[0];
    sibling = this._root;
    if (!sibling.get$isLeaf()) {
      t2 = this.deltaOne;
      t3 = t2.storage;
      t4 = this.deltaTwo;
      t5 = t4.storage;
      do {
        childOne = sibling.get$childOne();
        childTwo = sibling.get$childTwo();
        t6 = childOne.get$box();
        c = new $.Vector2(new Float32Array(2));
        t7 = c.storage;
        t8 = t6.lowerBound.storage;
        if (1 >= t8.length)
          throw $.ioore(1);
        t9 = t8[1];
        if (1 >= t7.length)
          throw $.ioore(1);
        t7[1] = t9;
        t7[0] = t8[0];
        c.add$1(c, t6.upperBound);
        if (1 >= t7.length)
          throw $.ioore(1);
        t7[1] = t7[1] * 0.5;
        t7[0] = t7[0] * 0.5;
        t6 = t7[1];
        if (1 >= t3.length)
          throw $.ioore(1);
        t3[1] = t6;
        t3[0] = t7[0];
        t7 = childTwo.get$box();
        c = new $.Vector2(new Float32Array(2));
        t6 = c.storage;
        t8 = t7.lowerBound.storage;
        if (1 >= t8.length)
          throw $.ioore(1);
        t9 = t8[1];
        if (1 >= t6.length)
          throw $.ioore(1);
        t6[1] = t9;
        t6[0] = t8[0];
        c.add$1(c, t7.upperBound);
        if (1 >= t6.length)
          throw $.ioore(1);
        t6[1] = t6[1] * 0.5;
        t6[0] = t6[0] * 0.5;
        t7 = t6[1];
        if (1 >= t5.length)
          throw $.ioore(1);
        t5[1] = t7;
        t5[0] = t6[0];
        t6 = t2.sub$1(t1).storage;
        if (1 >= t6.length)
          throw $.ioore(1);
        t7 = Math.abs(t6[1]);
        if (1 >= t6.length)
          throw $.ioore(1);
        t6[1] = t7;
        t7 = Math.abs(t6[0]);
        if (0 >= t6.length)
          throw $.ioore(0);
        t6[0] = t7;
        t7 = t4.sub$1(t1).storage;
        if (1 >= t7.length)
          throw $.ioore(1);
        t6 = Math.abs(t7[1]);
        if (1 >= t7.length)
          throw $.ioore(1);
        t7[1] = t6;
        t6 = Math.abs(t7[0]);
        if (0 >= t7.length)
          throw $.ioore(0);
        t7[0] = t6;
        t6 = t3.length;
        if (0 >= t6)
          throw $.ioore(0);
        t7 = t3[0];
        if (1 >= t6)
          throw $.ioore(1);
        t6 = t3[1];
        t8 = t5.length;
        if (0 >= t8)
          throw $.ioore(0);
        t9 = t5[0];
        if (1 >= t8)
          throw $.ioore(1);
        sibling = t7 + t6 < t9 + t5[1] ? childOne : childTwo;
      } while (!sibling.get$isLeaf());
    }
    t1 = $.getInterceptor$x(sibling);
    node1 = t1.get$parent(sibling);
    node2 = this._allocateNode$0();
    $.set$parent$x(node2, node1);
    node2.set$userData(null);
    node2.get$box().setFromCombination$2(node.get$box(), sibling.get$box());
    if (node1 != null) {
      if ($.$eq(t1.get$parent(sibling).get$childOne(), sibling))
        node1.set$childOne(node2);
      else
        node1.set$childTwo(node2);
      node2.set$childOne(sibling);
      node2.set$childTwo(node);
      t1.set$parent(sibling, node2);
      $.set$parent$x(node, node2);
      do {
        t1 = node1.get$box();
        if (t1.contains$1(t1, node2.get$box()))
          break;
        node1.get$box().setFromCombination$2(node1.get$childOne().get$box(), node1.get$childTwo().get$box());
        node10 = $.get$parent$x(node1);
        if (node10 != null) {
          node2 = node1;
          node1 = node10;
          continue;
        } else
          break;
      } while (true);
    } else {
      node2.set$childOne(sibling);
      node2.set$childTwo(node);
      t1.set$parent(sibling, node2);
      $.set$parent$x(node, node2);
      this._root = node2;
    }
  },
  _removeLeaf$1: function(argNode) {
    var t1, node2, node1, sibling, t2, t3, t4, t5;
    t1 = $.getInterceptor(argNode);
    if (t1.$eq(argNode, this._root)) {
      this._root = null;
      if ($.$eq(this._lastLeaf, argNode))
        this._lastLeaf = null;
      return;
    }
    node2 = t1.get$parent(argNode);
    node1 = $.get$parent$x(node2);
    sibling = $.$eq(node2.get$childOne(), argNode) ? node2.get$childTwo() : node2.get$childOne();
    if (node1 != null) {
      if ($.$eq(node1.get$childOne(), node2))
        node1.set$childOne(sibling);
      else
        node1.set$childTwo(sibling);
      $.set$parent$x(sibling, node1);
      this._nodeStack.addFirst$1(node2);
      this._nodeCount = this._nodeCount - 1;
      for (t1 = this._tempBox; node1 != null;) {
        t2 = node1.get$box();
        t3 = t1.lowerBound;
        t4 = t2.lowerBound;
        t3.setFrom$1;
        t3 = t3.storage;
        t4 = t4.storage;
        if (1 >= t4.length)
          throw $.ioore(1);
        t5 = t4[1];
        if (1 >= t3.length)
          throw $.ioore(1);
        t3[1] = t5;
        t3[0] = t4[0];
        t4 = t1.upperBound;
        t2 = t2.upperBound;
        t4.setFrom$1;
        t4 = t4.storage;
        t2 = t2.storage;
        if (1 >= t2.length)
          throw $.ioore(1);
        t3 = t2[1];
        if (1 >= t4.length)
          throw $.ioore(1);
        t4[1] = t3;
        t4[0] = t2[0];
        node1.get$box().setFromCombination$2(node1.get$childOne().get$box(), node1.get$childTwo().get$box());
        if (t1.contains$1(t1, node1.get$box()))
          break;
        node1 = $.get$parent$x(node1);
      }
    } else {
      this._root = sibling;
      $.set$parent$x(sibling, null);
      this._nodeStack.addFirst$1(node2);
      this._nodeCount = this._nodeCount - 1;
    }
    if ($.$eq(this._lastLeaf, argNode))
      this._lastLeaf = this._root;
  },
  _computeHeight$1: function(node) {
    var t1;
    if (node == null)
      return 0;
    t1 = $.max(this._computeHeight$1(node.get$childOne()), this._computeHeight$1(node.get$childTwo()));
    if (typeof t1 !== "number")
      throw $.iae(t1);
    return 1 + t1;
  },
  rebalance$1: function(iterations) {
    var i, current, bit, t1, t2;
    if (this._root == null)
      return;
    for (i = 0; i < iterations; ++i) {
      current = this._root;
      for (bit = 0; t1 = current.get$isLeaf(), t2 = this._path, !t1;) {
        current = (C.JSInt_methods.$shr(t2, bit) & 1) === 0 ? current.get$childOne() : current.get$childTwo();
        bit = bit + 1 & 31;
      }
      this._path = t2 + 1;
      this._removeLeaf$1(current);
      this._insertLeaf$1(current);
    }
  },
  DynamicTree$0: function() {
    var t1, i;
    for (t1 = this._drawVectors, i = 0; i < 4; ++i)
      t1[i] = new $.Vector2(new Float32Array(2));
  },
  static: {
"": "DynamicTree_MAX_STACK_SIZE,DynamicTree__DEFAULT_NODE_ADDITION",
DynamicTree$: function() {
  var t1, t2, t3;
  t1 = $.List_List(4);
  t2 = new Float32Array(2);
  t3 = $.AxisAlignedBox$(null, null);
  t3 = new $.DynamicTree(null, 0, null, 0, 0, $.ListQueue$(null), t1, 0, new $.Vector2(t2), t3, new $.Vector2(new Float32Array(2)), new $.Vector2(new Float32Array(2)), new $.Vector2(new Float32Array(2)));
  t3.DynamicTree$0();
  return t3;
}}

},

DynamicTreeNode: {"": "Object;box<,parent*,next@,childOne@,childTwo@,userData@,key*",
  get$isLeaf: function() {
    return this.childOne == null;
  },
  toString$0: function(_) {
    var t1 = this.box;
    return $.S(t1.lowerBound) + ", " + $.S(t1.upperBound);
  }
},

Pair: {"": "Object;proxyA@,proxyB@",
  compareTo$1: function(_, pair2) {
    var t1, t2;
    t1 = $.get$key$x(this.proxyA);
    t2 = $.get$key$x(pair2.get$proxyA());
    if (typeof t1 !== "number")
      throw t1.$lt();
    if (typeof t2 !== "number")
      throw $.iae(t2);
    if (t1 < t2)
      return -1;
    if (t1 === t2) {
      t1 = $.get$key$x(this.proxyB);
      t2 = $.get$key$x(pair2.get$proxyB());
      if (typeof t1 !== "number")
        throw t1.$lt();
      if (typeof t2 !== "number")
        throw $.iae(t2);
      if (t1 < t2)
        t1 = -1;
      else
        t1 = t1 === t2 ? 0 : 1;
      return t1;
    }
    return 1;
  }
},

Collision: {"": "Object;_pool,cache,input,output,results1,results2,incidentEdge<,localTangent,localNormal<,planePoint,tangent,normal<,normal1,v11,v12,clipPoints1,clipPoints2",
  testOverlap$4: function(shapeA, shapeB, transformA, transformB) {
    var t1, t2, t3;
    t1 = this.input;
    t1.proxyA.setFromShape$1(shapeA);
    t1.proxyB.setFromShape$1(shapeB);
    t2 = t1.transformA;
    t2.position.setFrom$1(transformA.position);
    t2.rotation.setFrom$1(transformA.rotation);
    t2 = t1.transformB;
    t2.position.setFrom$1(transformB.position);
    t2.rotation.setFrom$1(transformB.rotation);
    t1.useRadii = true;
    t2 = this.cache;
    t2.count = 0;
    t3 = this.output;
    this._pool.distance.distance$3(t3, t2, t1);
    t3 = t3.distance;
    if (t3 == null)
      throw t3.$lt();
    return t3 < 0.000001192;
  },
  collideCircles$5: function(manifold, circle1, xfA, circle2, xfB) {
    var t1, v, t2, t3, t4, t5, t6, t7, t8, t9, t10, v1, t11, t12, t13, t14, t15, t16, t17, t18, dx, dy, radius;
    manifold.set$pointCount(0);
    t1 = $.getInterceptor$x(circle1);
    v = t1.get$position(circle1);
    t2 = xfA.position.storage;
    if (1 >= t2.length)
      throw $.ioore(1);
    t3 = t2[1];
    t4 = xfA.rotation.storage;
    t5 = t4.length;
    if (1 >= t5)
      throw $.ioore(1);
    t6 = t4[1];
    t7 = v.storage;
    t8 = t7.length;
    if (0 >= t8)
      throw $.ioore(0);
    t9 = t7[0];
    if (3 >= t5)
      throw $.ioore(3);
    t5 = t4[3];
    if (1 >= t8)
      throw $.ioore(1);
    t7 = t7[1];
    t2 = t2[0];
    t8 = t4[0];
    t4 = t4[2];
    t10 = $.getInterceptor$x(circle2);
    v1 = t10.get$position(circle2);
    t11 = xfB.position.storage;
    if (1 >= t11.length)
      throw $.ioore(1);
    t12 = t11[1];
    t13 = xfB.rotation.storage;
    t14 = t13.length;
    if (1 >= t14)
      throw $.ioore(1);
    t15 = t13[1];
    t16 = v1.storage;
    t17 = t16.length;
    if (0 >= t17)
      throw $.ioore(0);
    t18 = t16[0];
    if (3 >= t14)
      throw $.ioore(3);
    t14 = t13[3];
    if (1 >= t17)
      throw $.ioore(1);
    t16 = t16[1];
    dx = t11[0] + t13[0] * t18 + t13[2] * t16 - (t2 + t8 * t9 + t4 * t7);
    dy = t12 + t15 * t18 + t14 * t16 - (t3 + t6 * t9 + t5 * t7);
    radius = $.$add$ns(circle1.get$radius(), circle2.get$radius());
    t2 = $.$mul$n(radius, radius);
    if (typeof t2 !== "number")
      throw $.iae(t2);
    if (dx * dx + dy * dy > t2)
      return;
    t2 = $.getInterceptor$x(manifold);
    t2.set$type(manifold, 0);
    manifold.get$localPoint().setFrom$1(t1.get$position(circle1));
    manifold.get$localNormal().setZero$0();
    manifold.set$pointCount(1);
    $.$index$asx(t2.get$points(manifold), 0).get$localPoint().setFrom$1(t10.get$position(circle2));
    $.get$id$x($.$index$asx(t2.get$points(manifold), 0)).zero$0();
  },
  collidePolygonAndCircle$5: function(manifold, polygon, xfA, circle, xfB) {
    var t1, v, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, v1x, v1y, bx, by, b1x, cLocaly, cLocalx, radius, vertexCount, vertices, normals, normalIndex, separation, i, vertex, norm, s, vertIndex2, v1, v2, mpoint, temp2X, temp2Y, temp4X, temp4Y, dx, dy, fcx, fcy;
    manifold.set$pointCount(0);
    t1 = $.getInterceptor$x(circle);
    v = t1.get$position(circle);
    t2 = xfB.position.storage;
    if (1 >= t2.length)
      throw $.ioore(1);
    t3 = t2[1];
    t4 = xfB.rotation.storage;
    t5 = t4.length;
    if (1 >= t5)
      throw $.ioore(1);
    t6 = t4[1];
    t7 = v.storage;
    t8 = t7.length;
    if (0 >= t8)
      throw $.ioore(0);
    t9 = t7[0];
    if (3 >= t5)
      throw $.ioore(3);
    t5 = t4[3];
    if (1 >= t8)
      throw $.ioore(1);
    t7 = t7[1];
    t2 = t2[0];
    t8 = t4[0];
    t4 = t4[2];
    t10 = xfA.position.storage;
    t11 = t10.length;
    if (0 >= t11)
      throw $.ioore(0);
    v1x = t2 + t8 * t9 + t4 * t7 - t10[0];
    if (1 >= t11)
      throw $.ioore(1);
    v1y = t3 + t6 * t9 + t5 * t7 - t10[1];
    t10 = xfA.rotation.storage;
    t7 = t10.length;
    if (0 >= t7)
      throw $.ioore(0);
    bx = t10[0];
    if (1 >= t7)
      throw $.ioore(1);
    by = t10[1];
    if (2 >= t7)
      throw $.ioore(2);
    b1x = t10[2];
    if (3 >= t7)
      throw $.ioore(3);
    cLocaly = v1x * b1x + v1y * t10[3];
    cLocalx = v1x * bx + v1y * by;
    radius = $.$add$ns(polygon.get$radius(), circle.get$radius());
    if (typeof radius !== "number")
      return this.collidePolygonAndCircle$5$bailout(1, manifold, polygon, cLocalx, circle, t1, radius, cLocaly);
    vertexCount = polygon.get$vertexCount();
    vertices = polygon.get$vertices();
    normals = polygon.get$normals();
    for (t2 = vertices.length, t3 = normals.length, normalIndex = 0, separation = 1e-12, i = 0; i < vertexCount; ++i) {
      if (i >= t2)
        throw $.ioore(i);
      vertex = vertices[i];
      t4 = $.getInterceptor$x(vertex);
      t5 = t4.get$x(vertex);
      if (typeof t5 !== "number")
        throw $.iae(t5);
      t4 = t4.get$y(vertex);
      if (typeof t4 !== "number")
        throw $.iae(t4);
      if (i >= t3)
        throw $.ioore(i);
      norm = normals[i];
      t6 = $.getInterceptor$x(norm);
      s = $.$add$ns($.$mul$n(t6.get$x(norm), cLocalx - t5), $.$mul$n(t6.get$y(norm), cLocaly - t4));
      t4 = $.getInterceptor$n(s);
      if (t4.$gt(s, radius))
        return;
      if (t4.$gt(s, separation)) {
        separation = s;
        normalIndex = i;
      }
    }
    vertIndex2 = normalIndex + 1;
    vertIndex2 = vertIndex2 < vertexCount ? vertIndex2 : 0;
    if (normalIndex < 0 || normalIndex >= t2)
      throw $.ioore(normalIndex);
    v1 = vertices[normalIndex];
    if (vertIndex2 < 0 || vertIndex2 >= t2)
      throw $.ioore(vertIndex2);
    v2 = vertices[vertIndex2];
    if ($.$lt$n(separation, 1.192e-7)) {
      manifold.set$pointCount(1);
      t2 = $.getInterceptor$x(manifold);
      t2.set$type(manifold, 1);
      if (normalIndex >= t3)
        throw $.ioore(normalIndex);
      norm = normals[normalIndex];
      t3 = manifold.get$localNormal();
      t4 = $.getInterceptor$x(norm);
      t5 = t4.get$x(norm);
      t3 = t3.storage;
      if (0 >= t3.length)
        throw $.ioore(0);
      t3[0] = t5;
      t5 = manifold.get$localNormal();
      t4 = t4.get$y(norm);
      t5 = t5.storage;
      if (1 >= t5.length)
        throw $.ioore(1);
      t5[1] = t4;
      t4 = manifold.get$localPoint();
      t5 = $.getInterceptor$x(v1);
      t3 = $.getInterceptor$x(v2);
      t6 = $.$mul$n($.$add$ns(t5.get$x(v1), t3.get$x(v2)), 0.5);
      t4 = t4.storage;
      if (0 >= t4.length)
        throw $.ioore(0);
      t4[0] = t6;
      t6 = manifold.get$localPoint();
      t3 = $.$mul$n($.$add$ns(t5.get$y(v1), t3.get$y(v2)), 0.5);
      t6 = t6.storage;
      if (1 >= t6.length)
        throw $.ioore(1);
      t6[1] = t3;
      mpoint = $.$index$asx(t2.get$points(manifold), 0);
      t2 = mpoint.get$localPoint();
      t3 = t1.get$position(circle).storage;
      if (0 >= t3.length)
        throw $.ioore(0);
      t3 = t3[0];
      t2 = t2.storage;
      if (0 >= t2.length)
        throw $.ioore(0);
      t2[0] = t3;
      t3 = mpoint.get$localPoint();
      t1 = t1.get$position(circle).storage;
      if (1 >= t1.length)
        throw $.ioore(1);
      t1 = t1[1];
      t3 = t3.storage;
      if (1 >= t3.length)
        throw $.ioore(1);
      t3[1] = t1;
      $.get$id$x(mpoint).zero$0();
      return;
    }
    t2 = $.getInterceptor$x(v1);
    t4 = t2.get$x(v1);
    if (typeof t4 !== "number")
      throw $.iae(t4);
    t5 = t2.get$y(v1);
    if (typeof t5 !== "number")
      throw $.iae(t5);
    t6 = $.getInterceptor$x(v2);
    temp2X = $.$sub$n(t6.get$x(v2), t2.get$x(v1));
    temp2Y = $.$sub$n(t6.get$y(v2), t2.get$y(v1));
    if (typeof temp2X !== "number")
      throw $.iae(temp2X);
    if (typeof temp2Y !== "number")
      throw $.iae(temp2Y);
    t7 = t6.get$x(v2);
    if (typeof t7 !== "number")
      throw $.iae(t7);
    t8 = t6.get$y(v2);
    if (typeof t8 !== "number")
      throw $.iae(t8);
    temp4X = $.$sub$n(t2.get$x(v1), t6.get$x(v2));
    temp4Y = $.$sub$n(t2.get$y(v1), t6.get$y(v2));
    if (typeof temp4X !== "number")
      throw $.iae(temp4X);
    if (typeof temp4Y !== "number")
      throw $.iae(temp4Y);
    if ((cLocalx - t4) * temp2X + (cLocaly - t5) * temp2Y <= 0) {
      t3 = t2.get$x(v1);
      if (typeof t3 !== "number")
        throw $.iae(t3);
      dx = cLocalx - t3;
      t3 = t2.get$y(v1);
      if (typeof t3 !== "number")
        throw $.iae(t3);
      dy = cLocaly - t3;
      if (dx * dx + dy * dy > radius * radius)
        return;
      manifold.set$pointCount(1);
      t3 = $.getInterceptor$x(manifold);
      t3.set$type(manifold, 1);
      t4 = manifold.get$localNormal();
      t5 = t2.get$x(v1);
      if (typeof t5 !== "number")
        throw $.iae(t5);
      t4 = t4.storage;
      if (0 >= t4.length)
        throw $.ioore(0);
      t4[0] = cLocalx - t5;
      t5 = manifold.get$localNormal();
      t2 = t2.get$y(v1);
      if (typeof t2 !== "number")
        throw $.iae(t2);
      t5 = t5.storage;
      if (1 >= t5.length)
        throw $.ioore(1);
      t5[1] = cLocaly - t2;
      manifold.get$localNormal().normalize$0();
      manifold.get$localPoint().setFrom$1(v1);
      $.$index$asx(t3.get$points(manifold), 0).get$localPoint().setFrom$1(t1.get$position(circle));
      $.get$id$x($.$index$asx(t3.get$points(manifold), 0)).zero$0();
    } else if ((cLocalx - t7) * temp4X + (cLocaly - t8) * temp4Y <= 0) {
      t2 = t6.get$x(v2);
      if (typeof t2 !== "number")
        throw $.iae(t2);
      dx = cLocalx - t2;
      t2 = t6.get$y(v2);
      if (typeof t2 !== "number")
        throw $.iae(t2);
      dy = cLocaly - t2;
      if (dx * dx + dy * dy > radius * radius)
        return;
      manifold.set$pointCount(1);
      t2 = $.getInterceptor$x(manifold);
      t2.set$type(manifold, 1);
      t3 = manifold.get$localNormal();
      t4 = t6.get$x(v2);
      if (typeof t4 !== "number")
        throw $.iae(t4);
      t3 = t3.storage;
      if (0 >= t3.length)
        throw $.ioore(0);
      t3[0] = cLocalx - t4;
      t4 = manifold.get$localNormal();
      t6 = t6.get$y(v2);
      if (typeof t6 !== "number")
        throw $.iae(t6);
      t4 = t4.storage;
      if (1 >= t4.length)
        throw $.ioore(1);
      t4[1] = cLocaly - t6;
      manifold.get$localNormal().normalize$0();
      manifold.get$localPoint().setFrom$1(v2);
      $.$index$asx(t2.get$points(manifold), 0).get$localPoint().setFrom$1(t1.get$position(circle));
      $.get$id$x($.$index$asx(t2.get$points(manifold), 0)).zero$0();
    } else {
      fcx = $.$mul$n($.$add$ns(t2.get$x(v1), t6.get$x(v2)), 0.5);
      fcy = $.$mul$n($.$add$ns(t2.get$y(v1), t6.get$y(v2)), 0.5);
      if (typeof fcx !== "number")
        throw $.iae(fcx);
      if (typeof fcy !== "number")
        throw $.iae(fcy);
      if (normalIndex >= t3)
        throw $.ioore(normalIndex);
      norm = normals[normalIndex];
      t2 = $.getInterceptor$x(norm);
      t3 = t2.get$x(norm);
      if (typeof t3 !== "number")
        throw $.iae(t3);
      t2 = t2.get$y(norm);
      if (typeof t2 !== "number")
        throw $.iae(t2);
      if ((cLocalx - fcx) * t3 + (cLocaly - fcy) * t2 > radius)
        return;
      manifold.set$pointCount(1);
      t2 = $.getInterceptor$x(manifold);
      t2.set$type(manifold, 1);
      manifold.get$localNormal().setFrom$1(normals[normalIndex]);
      t3 = manifold.get$localPoint().storage;
      if (0 >= t3.length)
        throw $.ioore(0);
      t3[0] = fcx;
      t3 = manifold.get$localPoint().storage;
      if (1 >= t3.length)
        throw $.ioore(1);
      t3[1] = fcy;
      $.$index$asx(t2.get$points(manifold), 0).get$localPoint().setFrom$1(t1.get$position(circle));
      $.get$id$x($.$index$asx(t2.get$points(manifold), 0)).zero$0();
    }
  },
  collidePolygonAndCircle$5$bailout: function(state0, manifold, polygon, cLocalx, circle, t1, radius, cLocaly) {
    var vertexCount, vertices, normals, t2, t3, normalIndex, separation, i, vertex, t4, t5, norm, t6, s, vertIndex2, v1, v2, mpoint, temp2X, temp2Y, t7, t8, temp4X, temp4Y, dx, dy, fcx, fcy;
    vertexCount = polygon.get$vertexCount();
    vertices = polygon.get$vertices();
    normals = polygon.get$normals();
    for (t2 = vertices.length, t3 = normals.length, normalIndex = 0, separation = 1e-12, i = 0; i < vertexCount; ++i) {
      if (i >= t2)
        throw $.ioore(i);
      vertex = vertices[i];
      t4 = $.getInterceptor$x(vertex);
      t5 = t4.get$x(vertex);
      if (typeof t5 !== "number")
        throw $.iae(t5);
      t4 = t4.get$y(vertex);
      if (typeof t4 !== "number")
        throw $.iae(t4);
      if (i >= t3)
        throw $.ioore(i);
      norm = normals[i];
      t6 = $.getInterceptor$x(norm);
      s = $.$add$ns($.$mul$n(t6.get$x(norm), cLocalx - t5), $.$mul$n(t6.get$y(norm), cLocaly - t4));
      t4 = $.getInterceptor$n(s);
      if (t4.$gt(s, radius))
        return;
      if (t4.$gt(s, separation)) {
        separation = s;
        normalIndex = i;
      }
    }
    vertIndex2 = normalIndex + 1;
    vertIndex2 = vertIndex2 < vertexCount ? vertIndex2 : 0;
    if (normalIndex < 0 || normalIndex >= t2)
      throw $.ioore(normalIndex);
    v1 = vertices[normalIndex];
    if (vertIndex2 < 0 || vertIndex2 >= t2)
      throw $.ioore(vertIndex2);
    v2 = vertices[vertIndex2];
    if ($.$lt$n(separation, 1.192e-7)) {
      manifold.set$pointCount(1);
      t2 = $.getInterceptor$x(manifold);
      t2.set$type(manifold, 1);
      if (normalIndex >= t3)
        throw $.ioore(normalIndex);
      norm = normals[normalIndex];
      t3 = manifold.get$localNormal();
      t4 = $.getInterceptor$x(norm);
      t5 = t4.get$x(norm);
      t3 = t3.storage;
      if (0 >= t3.length)
        throw $.ioore(0);
      t3[0] = t5;
      t5 = manifold.get$localNormal();
      t4 = t4.get$y(norm);
      t5 = t5.storage;
      if (1 >= t5.length)
        throw $.ioore(1);
      t5[1] = t4;
      t4 = manifold.get$localPoint();
      t5 = $.getInterceptor$x(v1);
      t3 = $.getInterceptor$x(v2);
      t6 = $.$mul$n($.$add$ns(t5.get$x(v1), t3.get$x(v2)), 0.5);
      t4 = t4.storage;
      if (0 >= t4.length)
        throw $.ioore(0);
      t4[0] = t6;
      t6 = manifold.get$localPoint();
      t3 = $.$mul$n($.$add$ns(t5.get$y(v1), t3.get$y(v2)), 0.5);
      t6 = t6.storage;
      if (1 >= t6.length)
        throw $.ioore(1);
      t6[1] = t3;
      mpoint = $.$index$asx(t2.get$points(manifold), 0);
      t2 = mpoint.get$localPoint();
      t3 = t1.get$position(circle).storage;
      if (0 >= t3.length)
        throw $.ioore(0);
      t3 = t3[0];
      t2 = t2.storage;
      if (0 >= t2.length)
        throw $.ioore(0);
      t2[0] = t3;
      t3 = mpoint.get$localPoint();
      t1 = t1.get$position(circle).storage;
      if (1 >= t1.length)
        throw $.ioore(1);
      t1 = t1[1];
      t3 = t3.storage;
      if (1 >= t3.length)
        throw $.ioore(1);
      t3[1] = t1;
      $.get$id$x(mpoint).zero$0();
      return;
    }
    t2 = $.getInterceptor$x(v1);
    t4 = t2.get$x(v1);
    if (typeof t4 !== "number")
      throw $.iae(t4);
    t5 = t2.get$y(v1);
    if (typeof t5 !== "number")
      throw $.iae(t5);
    t6 = $.getInterceptor$x(v2);
    temp2X = $.$sub$n(t6.get$x(v2), t2.get$x(v1));
    temp2Y = $.$sub$n(t6.get$y(v2), t2.get$y(v1));
    if (typeof temp2X !== "number")
      throw $.iae(temp2X);
    if (typeof temp2Y !== "number")
      throw $.iae(temp2Y);
    t7 = t6.get$x(v2);
    if (typeof t7 !== "number")
      throw $.iae(t7);
    t8 = t6.get$y(v2);
    if (typeof t8 !== "number")
      throw $.iae(t8);
    temp4X = $.$sub$n(t2.get$x(v1), t6.get$x(v2));
    temp4Y = $.$sub$n(t2.get$y(v1), t6.get$y(v2));
    if (typeof temp4X !== "number")
      throw $.iae(temp4X);
    if (typeof temp4Y !== "number")
      throw $.iae(temp4Y);
    if ((cLocalx - t4) * temp2X + (cLocaly - t5) * temp2Y <= 0) {
      t3 = t2.get$x(v1);
      if (typeof t3 !== "number")
        throw $.iae(t3);
      dx = cLocalx - t3;
      t3 = t2.get$y(v1);
      if (typeof t3 !== "number")
        throw $.iae(t3);
      dy = cLocaly - t3;
      t3 = $.$mul$n(radius, radius);
      if (typeof t3 !== "number")
        throw $.iae(t3);
      if (dx * dx + dy * dy > t3)
        return;
      manifold.set$pointCount(1);
      t3 = $.getInterceptor$x(manifold);
      t3.set$type(manifold, 1);
      t4 = manifold.get$localNormal();
      t5 = t2.get$x(v1);
      if (typeof t5 !== "number")
        throw $.iae(t5);
      t4 = t4.storage;
      if (0 >= t4.length)
        throw $.ioore(0);
      t4[0] = cLocalx - t5;
      t5 = manifold.get$localNormal();
      t2 = t2.get$y(v1);
      if (typeof t2 !== "number")
        throw $.iae(t2);
      t5 = t5.storage;
      if (1 >= t5.length)
        throw $.ioore(1);
      t5[1] = cLocaly - t2;
      manifold.get$localNormal().normalize$0();
      manifold.get$localPoint().setFrom$1(v1);
      $.$index$asx(t3.get$points(manifold), 0).get$localPoint().setFrom$1(t1.get$position(circle));
      $.get$id$x($.$index$asx(t3.get$points(manifold), 0)).zero$0();
    } else if ((cLocalx - t7) * temp4X + (cLocaly - t8) * temp4Y <= 0) {
      t2 = t6.get$x(v2);
      if (typeof t2 !== "number")
        throw $.iae(t2);
      dx = cLocalx - t2;
      t2 = t6.get$y(v2);
      if (typeof t2 !== "number")
        throw $.iae(t2);
      dy = cLocaly - t2;
      t2 = $.$mul$n(radius, radius);
      if (typeof t2 !== "number")
        throw $.iae(t2);
      if (dx * dx + dy * dy > t2)
        return;
      manifold.set$pointCount(1);
      t2 = $.getInterceptor$x(manifold);
      t2.set$type(manifold, 1);
      t3 = manifold.get$localNormal();
      t4 = t6.get$x(v2);
      if (typeof t4 !== "number")
        throw $.iae(t4);
      t3 = t3.storage;
      if (0 >= t3.length)
        throw $.ioore(0);
      t3[0] = cLocalx - t4;
      t4 = manifold.get$localNormal();
      t6 = t6.get$y(v2);
      if (typeof t6 !== "number")
        throw $.iae(t6);
      t4 = t4.storage;
      if (1 >= t4.length)
        throw $.ioore(1);
      t4[1] = cLocaly - t6;
      manifold.get$localNormal().normalize$0();
      manifold.get$localPoint().setFrom$1(v2);
      $.$index$asx(t2.get$points(manifold), 0).get$localPoint().setFrom$1(t1.get$position(circle));
      $.get$id$x($.$index$asx(t2.get$points(manifold), 0)).zero$0();
    } else {
      fcx = $.$mul$n($.$add$ns(t2.get$x(v1), t6.get$x(v2)), 0.5);
      fcy = $.$mul$n($.$add$ns(t2.get$y(v1), t6.get$y(v2)), 0.5);
      if (typeof fcx !== "number")
        throw $.iae(fcx);
      if (typeof fcy !== "number")
        throw $.iae(fcy);
      if (normalIndex >= t3)
        throw $.ioore(normalIndex);
      norm = normals[normalIndex];
      t2 = $.getInterceptor$x(norm);
      t3 = t2.get$x(norm);
      if (typeof t3 !== "number")
        throw $.iae(t3);
      t2 = t2.get$y(norm);
      if (typeof t2 !== "number")
        throw $.iae(t2);
      if (typeof radius !== "number")
        throw $.iae(radius);
      if ((cLocalx - fcx) * t3 + (cLocaly - fcy) * t2 > radius)
        return;
      manifold.set$pointCount(1);
      t2 = $.getInterceptor$x(manifold);
      t2.set$type(manifold, 1);
      manifold.get$localNormal().setFrom$1(normals[normalIndex]);
      t3 = manifold.get$localPoint().storage;
      if (0 >= t3.length)
        throw $.ioore(0);
      t3[0] = fcx;
      t3 = manifold.get$localPoint().storage;
      if (1 >= t3.length)
        throw $.ioore(1);
      t3[1] = fcy;
      $.$index$asx(t2.get$points(manifold), 0).get$localPoint().setFrom$1(t1.get$position(circle));
      $.get$id$x($.$index$asx(t2.get$points(manifold), 0)).zero$0();
    }
  },
  edgeSeparation$5: function(poly1, xf1, edge1, poly2, xf2) {
    var vertices1, normals1, count2, vertices2, v, t1, t2, t3, t4, t5, t6, normal1Worldy, normal1Worldx, normal1x, normal1y, index, minDot, i, a, dot, v3, t7, t8, t9, t10, t11, t12, v4, t13, t14, t15, t16, t17, t18, t19, t20;
    if (edge1 !== (edge1 | 0))
      return this.edgeSeparation$5$bailout(1, poly1, xf1, edge1, poly2, xf2);
    poly1.get$vertexCount();
    vertices1 = poly1.get$vertices();
    normals1 = poly1.get$normals();
    count2 = poly2.get$vertexCount();
    vertices2 = poly2.get$vertices();
    if (edge1 < 0 || edge1 >= normals1.length)
      throw $.ioore(edge1);
    v = normals1[edge1];
    t1 = xf1.rotation.storage;
    if (1 >= t1.length)
      throw $.ioore(1);
    t2 = t1[1];
    t3 = $.getInterceptor$x(v);
    t4 = t3.get$x(v);
    if (typeof t4 !== "number")
      throw $.iae(t4);
    if (3 >= t1.length)
      throw $.ioore(3);
    t5 = t1[3];
    t6 = t3.get$y(v);
    if (typeof t6 !== "number")
      throw $.iae(t6);
    normal1Worldy = t2 * t4 + t5 * t6;
    if (0 >= t1.length)
      throw $.ioore(0);
    t6 = t1[0];
    t5 = t3.get$x(v);
    if (typeof t5 !== "number")
      throw $.iae(t5);
    if (2 >= t1.length)
      throw $.ioore(2);
    t4 = t1[2];
    t3 = t3.get$y(v);
    if (typeof t3 !== "number")
      throw $.iae(t3);
    normal1Worldx = t6 * t5 + t4 * t3;
    t3 = xf2.rotation.storage;
    t4 = t3.length;
    if (0 >= t4)
      throw $.ioore(0);
    t5 = t3[0];
    if (1 >= t4)
      throw $.ioore(1);
    normal1x = normal1Worldx * t5 + normal1Worldy * t3[1];
    if (2 >= t4)
      throw $.ioore(2);
    t5 = t3[2];
    if (3 >= t4)
      throw $.ioore(3);
    normal1y = normal1Worldx * t5 + normal1Worldy * t3[3];
    for (t2 = vertices2.length, index = 0, minDot = 99999999999999, i = 0; i < count2; ++i) {
      if (i >= t2)
        throw $.ioore(i);
      a = vertices2[i];
      t4 = $.getInterceptor$x(a);
      t5 = t4.get$x(a);
      if (typeof t5 !== "number")
        return this.edgeSeparation$5$bailout(2, 0, xf1, edge1, 0, xf2, index, minDot, i, t2, vertices1, t4, t5, count2, vertices2, t1, normal1Worldy, normal1Worldx, normal1x, normal1y, t3, a);
      t5 *= normal1x;
      t4 = t4.get$y(a);
      if (typeof t4 !== "number")
        return this.edgeSeparation$5$bailout(3, 0, xf1, edge1, 0, xf2, index, minDot, i, t2, vertices1, t4, t5, count2, vertices2, t1, normal1Worldy, normal1Worldx, normal1x, normal1y, t3);
      dot = t5 + t4 * normal1y;
      if (typeof dot !== "number")
        return this.edgeSeparation$5$bailout(4, 0, xf1, edge1, 0, xf2, index, minDot, i, t2, vertices1, 0, 0, count2, vertices2, t1, normal1Worldy, normal1Worldx, normal1x, normal1y, t3, 0, dot);
      if (dot < minDot) {
        minDot = dot;
        index = i;
      }
    }
    if (edge1 >= vertices1.length)
      throw $.ioore(edge1);
    v3 = vertices1[edge1];
    t4 = xf1.position.storage;
    if (1 >= t4.length)
      throw $.ioore(1);
    t5 = t4[1];
    if (1 >= t1.length)
      throw $.ioore(1);
    t6 = t1[1];
    t7 = $.getInterceptor$x(v3);
    t8 = t7.get$x(v3);
    if (typeof t8 !== "number")
      throw $.iae(t8);
    if (3 >= t1.length)
      throw $.ioore(3);
    t9 = t1[3];
    t10 = t7.get$y(v3);
    if (typeof t10 !== "number")
      throw $.iae(t10);
    if (0 >= t4.length)
      throw $.ioore(0);
    t4 = t4[0];
    if (0 >= t1.length)
      throw $.ioore(0);
    t11 = t1[0];
    t12 = t7.get$x(v3);
    if (typeof t12 !== "number")
      throw $.iae(t12);
    if (2 >= t1.length)
      throw $.ioore(2);
    t1 = t1[2];
    t7 = t7.get$y(v3);
    if (typeof t7 !== "number")
      throw $.iae(t7);
    if (index < 0 || index >= t2)
      throw $.ioore(index);
    v4 = vertices2[index];
    t2 = xf2.position.storage;
    if (1 >= t2.length)
      throw $.ioore(1);
    t13 = t2[1];
    if (1 >= t3.length)
      throw $.ioore(1);
    t14 = t3[1];
    t15 = $.getInterceptor$x(v4);
    t16 = t15.get$x(v4);
    if (typeof t16 !== "number")
      throw $.iae(t16);
    if (3 >= t3.length)
      throw $.ioore(3);
    t17 = t3[3];
    t18 = t15.get$y(v4);
    if (typeof t18 !== "number")
      throw $.iae(t18);
    if (0 >= t2.length)
      throw $.ioore(0);
    t2 = t2[0];
    if (0 >= t3.length)
      throw $.ioore(0);
    t19 = t3[0];
    t20 = t15.get$x(v4);
    if (typeof t20 !== "number")
      throw $.iae(t20);
    if (2 >= t3.length)
      throw $.ioore(2);
    t3 = t3[2];
    t15 = t15.get$y(v4);
    if (typeof t15 !== "number")
      throw $.iae(t15);
    return (t2 + t19 * t20 + t3 * t15 - (t4 + t11 * t12 + t1 * t7)) * normal1Worldx + (t13 + t14 * t16 + t17 * t18 - (t5 + t6 * t8 + t9 * t10)) * normal1Worldy;
  },
  edgeSeparation$5$bailout: function(state0, poly1, xf1, edge1, poly2, xf2, index, minDot, i, t2, vertices1, t4, t5, count2, vertices2, t1, normal1Worldy, normal1Worldx, normal1x, normal1y, t3, a, dot) {
    switch (state0) {
      case 0:
      case 1:
        state0 = 0;
        poly1.get$vertexCount();
        vertices1 = poly1.get$vertices();
        normals1 = poly1.get$normals();
        count2 = poly2.get$vertexCount();
        vertices2 = poly2.get$vertices();
        if (edge1 >>> 0 !== edge1 || edge1 >= normals1.length)
          throw $.ioore(edge1);
        v = normals1[edge1];
        t1 = xf1.rotation.storage;
        if (1 >= t1.length)
          throw $.ioore(1);
        t2 = t1[1];
        t3 = $.getInterceptor$x(v);
        t4 = t3.get$x(v);
        if (typeof t4 !== "number")
          throw $.iae(t4);
        if (3 >= t1.length)
          throw $.ioore(3);
        t5 = t1[3];
        t6 = t3.get$y(v);
        if (typeof t6 !== "number")
          throw $.iae(t6);
        normal1Worldy = t2 * t4 + t5 * t6;
        if (0 >= t1.length)
          throw $.ioore(0);
        t6 = t1[0];
        t5 = t3.get$x(v);
        if (typeof t5 !== "number")
          throw $.iae(t5);
        if (2 >= t1.length)
          throw $.ioore(2);
        t4 = t1[2];
        t3 = t3.get$y(v);
        if (typeof t3 !== "number")
          throw $.iae(t3);
        normal1Worldx = t6 * t5 + t4 * t3;
        t3 = xf2.rotation.storage;
        t4 = t3.length;
        if (0 >= t4)
          throw $.ioore(0);
        t5 = t3[0];
        if (1 >= t4)
          throw $.ioore(1);
        normal1x = normal1Worldx * t5 + normal1Worldy * t3[1];
        if (2 >= t4)
          throw $.ioore(2);
        t5 = t3[2];
        if (3 >= t4)
          throw $.ioore(3);
        normal1y = normal1Worldx * t5 + normal1Worldy * t3[3];
        t2 = vertices2.length;
        index = 0;
        minDot = 99999999999999;
        i = 0;
      default:
        var normals1, v, t6, v3, t7, t8, t9, t10, t11, t12, v4, t13, t14, t15, t16, t17, t18, t19, t20;
        L0:
          while (true)
            switch (state0) {
              case 0:
                if (!(i < count2))
                  break L0;
                if (i >= t2)
                  throw $.ioore(i);
                a = vertices2[i];
                t4 = $.getInterceptor$x(a);
                t5 = t4.get$x(a);
              case 2:
                state0 = 0;
                t5 = $.$mul$n(t5, normal1x);
                t4 = t4.get$y(a);
              case 3:
                state0 = 0;
                dot = $.$add$ns(t5, $.$mul$n(t4, normal1y));
              case 4:
                state0 = 0;
                if ($.$lt$n(dot, minDot)) {
                  minDot = dot;
                  index = i;
                }
                ++i;
            }
        if (edge1 >= vertices1.length)
          throw $.ioore(edge1);
        v3 = vertices1[edge1];
        t4 = xf1.position.storage;
        if (1 >= t4.length)
          throw $.ioore(1);
        t5 = t4[1];
        if (1 >= t1.length)
          throw $.ioore(1);
        t6 = t1[1];
        t7 = $.getInterceptor$x(v3);
        t8 = t7.get$x(v3);
        if (typeof t8 !== "number")
          throw $.iae(t8);
        if (3 >= t1.length)
          throw $.ioore(3);
        t9 = t1[3];
        t10 = t7.get$y(v3);
        if (typeof t10 !== "number")
          throw $.iae(t10);
        if (0 >= t4.length)
          throw $.ioore(0);
        t4 = t4[0];
        if (0 >= t1.length)
          throw $.ioore(0);
        t11 = t1[0];
        t12 = t7.get$x(v3);
        if (typeof t12 !== "number")
          throw $.iae(t12);
        if (2 >= t1.length)
          throw $.ioore(2);
        t1 = t1[2];
        t7 = t7.get$y(v3);
        if (typeof t7 !== "number")
          throw $.iae(t7);
        if (index < 0 || index >= t2)
          throw $.ioore(index);
        v4 = vertices2[index];
        t2 = xf2.position.storage;
        if (1 >= t2.length)
          throw $.ioore(1);
        t13 = t2[1];
        if (1 >= t3.length)
          throw $.ioore(1);
        t14 = t3[1];
        t15 = $.getInterceptor$x(v4);
        t16 = t15.get$x(v4);
        if (typeof t16 !== "number")
          throw $.iae(t16);
        if (3 >= t3.length)
          throw $.ioore(3);
        t17 = t3[3];
        t18 = t15.get$y(v4);
        if (typeof t18 !== "number")
          throw $.iae(t18);
        if (0 >= t2.length)
          throw $.ioore(0);
        t2 = t2[0];
        if (0 >= t3.length)
          throw $.ioore(0);
        t19 = t3[0];
        t20 = t15.get$x(v4);
        if (typeof t20 !== "number")
          throw $.iae(t20);
        if (2 >= t3.length)
          throw $.ioore(2);
        t3 = t3[2];
        t15 = t15.get$y(v4);
        if (typeof t15 !== "number")
          throw $.iae(t15);
        return (t2 + t19 * t20 + t3 * t15 - (t4 + t11 * t12 + t1 * t7)) * normal1Worldx + (t13 + t14 * t16 + t17 * t18 - (t5 + t6 * t8 + t9 * t10)) * normal1Worldy;
    }
  },
  findMaxSeparation$5: function(results, poly1, xf1, poly2, xf2) {
    var count1, normals1, v, t1, t2, t3, t4, t5, t6, t7, t8, v1, t9, t10, t11, t12, t13, t14, t15, t16, dx, dy, dLocal1x, dLocal1y, edge, maxDot, i, norm, dot, s, prevEdge, sPrev, nextEdge, sNext, bestSeparation, bestEdge, increment, edge0;
    count1 = poly1.get$vertexCount();
    normals1 = poly1.get$normals();
    v = poly2.get$centroid();
    t1 = xf2.position.storage;
    if (1 >= t1.length)
      throw $.ioore(1);
    t2 = t1[1];
    t3 = xf2.rotation.storage;
    t4 = t3.length;
    if (1 >= t4)
      throw $.ioore(1);
    t5 = t3[1];
    t6 = v.storage;
    t7 = t6.length;
    if (0 >= t7)
      throw $.ioore(0);
    t8 = t6[0];
    if (3 >= t4)
      throw $.ioore(3);
    t4 = t3[3];
    if (1 >= t7)
      throw $.ioore(1);
    t6 = t6[1];
    t1 = t1[0];
    t7 = t3[0];
    t3 = t3[2];
    v1 = poly1.get$centroid();
    t9 = xf1.position.storage;
    if (1 >= t9.length)
      throw $.ioore(1);
    t10 = t9[1];
    t11 = xf1.rotation.storage;
    t12 = t11.length;
    if (1 >= t12)
      throw $.ioore(1);
    t13 = t11[1];
    t14 = v1.storage;
    t15 = t14.length;
    if (0 >= t15)
      throw $.ioore(0);
    t16 = t14[0];
    if (3 >= t12)
      throw $.ioore(3);
    t12 = t11[3];
    if (1 >= t15)
      throw $.ioore(1);
    t14 = t14[1];
    t9 = t9[0];
    t15 = t11[0];
    t11 = t11[2];
    dx = t1 + t7 * t8 + t3 * t6 - (t9 + t15 * t16 + t11 * t14);
    dy = t2 + t5 * t8 + t4 * t6 - (t10 + t13 * t16 + t12 * t14);
    dLocal1x = dx * t15 + dy * t13;
    dLocal1y = dx * t11 + dy * t12;
    for (t1 = normals1.length, edge = 0, maxDot = 1e-12, i = 0; i < count1; ++i) {
      if (i >= t1)
        throw $.ioore(i);
      norm = normals1[i];
      t2 = $.getInterceptor$x(norm);
      dot = $.$add$ns($.$mul$n(t2.get$x(norm), dLocal1x), $.$mul$n(t2.get$y(norm), dLocal1y));
      if ($.$gt$n(dot, maxDot)) {
        maxDot = dot;
        edge = i;
      }
    }
    s = this.edgeSeparation$5(poly1, xf1, edge, poly2, xf2);
    prevEdge = edge - 1;
    prevEdge = prevEdge >= 0 ? prevEdge : count1 - 1;
    sPrev = this.edgeSeparation$5(poly1, xf1, prevEdge, poly2, xf2);
    nextEdge = edge + 1;
    nextEdge = nextEdge < count1 ? nextEdge : 0;
    sNext = this.edgeSeparation$5(poly1, xf1, nextEdge, poly2, xf2);
    if (sPrev > s && sPrev > sNext) {
      bestSeparation = sPrev;
      bestEdge = prevEdge;
      increment = -1;
    } else {
      if (sNext > s)
        ;
      else {
        results.edgeIndex = edge;
        results.separation = s;
        return;
      }
      bestSeparation = sNext;
      bestEdge = nextEdge;
      increment = 1;
    }
    for (t1 = increment === -1, edge = count1 - 1; true; bestSeparation = s, bestEdge = edge0) {
      if (t1) {
        edge0 = bestEdge - 1;
        edge0 = edge0 >= 0 ? edge0 : edge;
      } else {
        edge0 = bestEdge + 1;
        edge0 = edge0 < count1 ? edge0 : 0;
      }
      s = this.edgeSeparation$5(poly1, xf1, edge0, poly2, xf2);
      if (s > bestSeparation)
        ;
      else
        break;
    }
    results.edgeIndex = bestEdge;
    results.separation = bestSeparation;
  },
  findIncidentEdge$6: function(c, poly1, xf1, edge1, poly2, xf2) {
    var normals1, count2, vertices2, normals2, t1, t2, index, minDot, i, dot, i2;
    poly1.get$vertexCount();
    normals1 = poly1.get$normals();
    count2 = poly2.get$vertexCount();
    vertices2 = poly2.get$vertices();
    normals2 = poly2.get$normals();
    if (edge1 >>> 0 !== edge1 || edge1 >= normals1.length)
      throw $.ioore(edge1);
    t1 = this.normal1;
    xf1.rotation.transformed$2(normals1[edge1], t1);
    xf2.rotation.transposed$0().transformed$2(t1, t1);
    for (t2 = normals2.length, index = 0, minDot = 99999999999999, i = 0; i < count2; ++i) {
      if (i >= t2)
        throw $.ioore(i);
      dot = t1.dot$1(normals2[i]);
      if (dot < minDot) {
        minDot = dot;
        index = i;
      }
    }
    i2 = index + 1;
    i2 = i2 < count2 ? i2 : 0;
    t1 = vertices2.length;
    if (index < 0 || index >= t1)
      throw $.ioore(index);
    $.Transform_mulToOut(xf2, vertices2[index], c[0].get$v());
    $.get$id$x(c[0]).get$features().referenceEdge = edge1;
    $.get$id$x(c[0]).get$features().incidentEdge = index;
    $.get$id$x(c[0]).get$features().incidentVertex = 0;
    if (i2 < 0 || i2 >= t1)
      throw $.ioore(i2);
    $.Transform_mulToOut(xf2, vertices2[i2], c[1].get$v());
    $.get$id$x(c[1]).get$features().referenceEdge = edge1;
    $.get$id$x(c[1]).get$features().incidentEdge = i2;
    $.get$id$x(c[1]).get$features().incidentVertex = 1;
  },
  collidePolygons$5: function(manifold, polyA, xfA, polyB, xfB) {
    var totalRadius, t1, t2, t3, t4, t5, edge1, xf2, xf1, poly2, poly1, flip, count1, vertices1, t6, t7, frontOffset, t8, np, pointCount, i, cp;
    manifold.set$pointCount(0);
    totalRadius = $.$add$ns(polyA.get$radius(), polyB.get$radius());
    t1 = this.results1;
    this.findMaxSeparation$5(t1, polyA, xfA, polyB, xfB);
    t2 = t1.separation;
    if (t2 == null)
      throw t2.$gt();
    if (typeof totalRadius !== "number")
      throw $.iae(totalRadius);
    if (t2 > totalRadius)
      return;
    t2 = this.results2;
    this.findMaxSeparation$5(t2, polyB, xfB, polyA, xfA);
    t3 = t2.separation;
    if (t3 == null)
      throw t3.$gt();
    if (t3 > totalRadius)
      return;
    t4 = t1.separation;
    if (t4 == null)
      throw $.iae(t4);
    t5 = $.getInterceptor$x(manifold);
    if (t3 > 0.98 * t4 + 0.001) {
      edge1 = t2.edgeIndex;
      t5.set$type(manifold, 2);
      xf2 = xfA;
      xf1 = xfB;
      poly2 = polyA;
      poly1 = polyB;
      flip = 1;
    } else {
      edge1 = t1.edgeIndex;
      t5.set$type(manifold, 1);
      xf2 = xfB;
      xf1 = xfA;
      poly2 = polyB;
      poly1 = polyA;
      flip = 0;
    }
    t1 = this.incidentEdge;
    this.findIncidentEdge$6(t1, poly1, xf1, edge1, poly2, xf2);
    count1 = poly1.get$vertexCount();
    vertices1 = poly1.get$vertices();
    t2 = this.v11;
    t3 = vertices1.length;
    if (edge1 >>> 0 !== edge1 || edge1 >= t3)
      throw $.ioore(edge1);
    t2.setFrom$1(vertices1[edge1]);
    t4 = this.v12;
    t5 = edge1 + 1;
    if (t5 < count1) {
      if (t5 >= t3)
        throw $.ioore(t5);
      t3 = vertices1[t5];
    } else {
      if (0 >= t3)
        throw $.ioore(0);
      t3 = vertices1[0];
    }
    t4.setFrom$1(t3);
    t3 = this.localTangent;
    t3.setFrom$1(t4).sub$1(t2);
    t3.normalize$0();
    t5 = this.localNormal;
    $.Vector2_crossVectorAndNumToOut(t3, 1, t5);
    t6 = this.planePoint;
    t7 = t6.setFrom$1(t2);
    t7 = t7.add$1(t7, t4);
    t7.scale$1(t7, 0.5);
    t7 = this.tangent;
    xf1.rotation.transformed$2(t3, t7);
    t3 = this.normal;
    $.Vector2_crossVectorAndNumToOut(t7, 1, t3);
    $.Transform_mulToOut(xf1, t2, t2);
    $.Transform_mulToOut(xf1, t4, t4);
    frontOffset = t3.dot$1(t2);
    t2 = t7.dot$1(t2);
    t4 = t7.dot$1(t4);
    t7.negate$0();
    t8 = this.clipPoints1;
    np = $.Collision_clipSegmentToLine(t8, t1, t7, -t2 + totalRadius);
    t7.negate$0();
    if (np < 2)
      return;
    t1 = this.clipPoints2;
    if ($.Collision_clipSegmentToLine(t1, t8, t7, t4 + totalRadius) < 2)
      return;
    manifold.get$localNormal().setFrom$1(t5);
    manifold.get$localPoint().setFrom$1(t6);
    for (t2 = $.getInterceptor$x(manifold), pointCount = 0, i = 0; i < 2; ++i) {
      t4 = t1[i].v;
      if (t3.dot$1(t4) - frontOffset <= totalRadius) {
        cp = $.$index$asx(t2.get$points(manifold), pointCount);
        $.Transform_mulTransToOut(xf2, t4, cp.get$localPoint());
        t4 = $.getInterceptor$x(cp);
        t4.get$id(cp).setFrom$1(t1[i].id);
        t4.get$id(cp).get$features().flip = flip;
        ++pointCount;
      }
    }
    manifold.set$pointCount(pointCount);
  },
  Collision$_construct$1: function(pool) {
    var t1 = this.incidentEdge;
    t1[0] = $.ClipVertex$();
    t1[1] = $.ClipVertex$();
    t1 = this.clipPoints1;
    t1[0] = $.ClipVertex$();
    t1[1] = $.ClipVertex$();
    t1 = this.clipPoints2;
    t1[0] = $.ClipVertex$();
    t1[1] = $.ClipVertex$();
  },
  static: {
"": "Collision_NULL_FEATURE",
Collision$_construct: function(pool) {
  var t1 = $.DistanceInput$();
  t1 = new $.Collision(pool, $.SimplexCache$(), t1, $.DistanceOutput$(), new $.EdgeResults(0, 0), new $.EdgeResults(0, 0), $.List_List(2), new $.Vector2(new Float32Array(2)), new $.Vector2(new Float32Array(2)), new $.Vector2(new Float32Array(2)), new $.Vector2(new Float32Array(2)), new $.Vector2(new Float32Array(2)), new $.Vector2(new Float32Array(2)), new $.Vector2(new Float32Array(2)), new $.Vector2(new Float32Array(2)), $.List_List(2), $.List_List(2));
  t1.Collision$_construct$1(pool);
  return t1;
},

Collision_clipSegmentToLine: function(vOut, vIn, norm, offset) {
  var t1, t2, distance0, distance1, numOut, numOut0, vin;
  t1 = vIn.length;
  if (0 >= t1)
    throw $.ioore(0);
  t2 = vIn[0];
  distance0 = norm.dot$1(t2.get$v()) - offset;
  if (1 >= t1)
    throw $.ioore(1);
  distance1 = norm.dot$1(vIn[1].get$v()) - offset;
  if (distance0 <= 0) {
    if (0 >= vOut.length)
      throw $.ioore(0);
    vOut[0].setFrom$1(t2);
    numOut = 1;
  } else
    numOut = 0;
  if (distance1 <= 0) {
    numOut0 = numOut + 1;
    if (numOut >= vOut.length)
      throw $.ioore(numOut);
    vOut[numOut].setFrom$1(vIn[1]);
    numOut = numOut0;
  }
  if (distance0 * distance1 < 0) {
    if (numOut >= vOut.length)
      throw $.ioore(numOut);
    t1 = vOut[numOut].get$v().setFrom$1(vIn[1].get$v()).sub$1(vIn[0].get$v());
    t1 = t1.scale$1(t1, distance0 / (distance0 - distance1));
    t1.add$1(t1, vIn[0].get$v());
    vin = distance0 > 0 ? vIn[0] : vIn[1];
    $.get$id$x(vOut[numOut]).setFrom$1($.get$id$x(vin));
    ++numOut;
  }
  return numOut;
}}

},

ClipVertex: {"": "Object;v<,id>",
  setFrom$1: function(cv) {
    var t1, t2, t3;
    t1 = this.v;
    t1 = t1.storage;
    t2 = cv.get$v().storage;
    if (1 >= t2.length)
      throw $.ioore(1);
    t3 = t2[1];
    if (1 >= t1.length)
      throw $.ioore(1);
    t1[1] = t3;
    t1[0] = t2[0];
    t2 = this.id;
    t2 = t2.features;
    t1 = $.get$id$x(cv).get$features();
    t2.referenceEdge = t1.referenceEdge;
    t2.incidentEdge = t1.incidentEdge;
    t2.incidentVertex = t1.incidentVertex;
    t2.flip = t1.flip;
  },
  static: {
ClipVertex$: function() {
  return new $.ClipVertex(new $.Vector2(new Float32Array(2)), new $.ContactID($.Features$()));
}}

},

EdgeResults: {"": "Object;separation,edgeIndex"},

ContactID: {"": "Object;features<",
  $eq: function(_, other) {
    var t1;
    if (other == null)
      return false;
    t1 = other.get$features();
    return t1.$eq(t1, this.features);
  },
  setFrom$1: function(other) {
    var t1, t2;
    t1 = this.features;
    t2 = other.get$features();
    t1.referenceEdge = t2.referenceEdge;
    t1.incidentEdge = t2.incidentEdge;
    t1.incidentVertex = t2.incidentVertex;
    t1.flip = t2.flip;
  },
  isEqual$1: function(other) {
    var t1 = other.get$features();
    return t1.$eq(t1, this.features);
  },
  zero$0: function() {
    this.features.zero$0();
  }
},

Distance: {"": "Object;calls,iters,maxIters,simplex,saveA,saveB,closestPoint,searchDirection,temp,normal<",
  distance$3: function(output, cache, input) {
    var proxyA, proxyB, transformA, transformB, t1, vertices, t2, t3, t4, out, t5, t6, t7, t8, t9, iter, t10, saveCount, i, vertex, t11, out0, t12, t13, t14, duplicate, rA, rB;
    this.calls = this.calls + 1;
    proxyA = input.get$proxyA();
    proxyB = input.get$proxyB();
    transformA = input.get$transformA();
    transformB = input.get$transformB();
    t1 = this.simplex;
    t1.readCache$5(cache, proxyA, transformA, proxyB, transformB);
    vertices = t1.vertices;
    t2 = this.closestPoint;
    t1.getClosestPoint$1(t2);
    t2.get$length2();
    t3 = this.saveB;
    t4 = this.saveA;
    out = this.temp;
    t5 = transformB.rotation;
    t6 = this.searchDirection;
    t7 = t6.storage;
    t8 = transformA.rotation;
    t9 = out.storage;
    iter = 0;
    while (true) {
      t10 = this.maxIters;
      if (typeof t10 !== "number")
        throw $.iae(t10);
      if (!(iter < t10))
        break;
      saveCount = t1.count;
      if (typeof saveCount !== "number")
        throw $.iae(saveCount);
      i = 0;
      for (; i < saveCount; ++i) {
        if (i >= 3)
          throw $.ioore(i);
        t4[i] = vertices[i].indexA;
        t3[i] = vertices[i].indexB;
      }
      switch (saveCount) {
        case 1:
          break;
        case 2:
          t1.solve2$0();
          break;
        case 3:
          t1.solve3$0();
          break;
        default:
          return;
      }
      if ($.$eq(t1.count, 3))
        break;
      t1.getClosestPoint$1(t2);
      t2.get$length2();
      t1.getSearchDirection$1(t6);
      if (t6.get$length2() < 1.4208639999999999e-14)
        break;
      t10 = t1.count;
      if (t10 >>> 0 !== t10 || t10 >= 3)
        throw $.ioore(t10);
      vertex = vertices[t10];
      t10 = t8.transposed$0();
      if (1 >= t7.length)
        throw $.ioore(1);
      t7[1] = -t7[1];
      t7[0] = -t7[0];
      t11 = t7[1];
      if (1 >= t9.length)
        throw $.ioore(1);
      t9[1] = t11;
      t9[0] = t7[0];
      out0 = out;
      t10.transform$1(t10, out0);
      vertex.indexA = proxyA.getSupport$1(out);
      t10 = proxyA.get$vertices();
      t11 = vertex.indexA;
      if (t11 >>> 0 !== t11 || t11 >= t10.length)
        throw $.ioore(t11);
      t11 = t10[t11];
      t10 = vertex.wA;
      $.Transform_mulToOut(transformA, t11, t10);
      t11 = t5.transposed$0();
      if (1 >= t7.length)
        throw $.ioore(1);
      t7[1] = -t7[1];
      t7[0] = -t7[0];
      t12 = t7[1];
      if (1 >= t9.length)
        throw $.ioore(1);
      t9[1] = t12;
      t9[0] = t7[0];
      out0 = out;
      t11.transform$1(t11, out0);
      vertex.indexB = proxyB.getSupport$1(out);
      t11 = proxyB.get$vertices();
      t12 = vertex.indexB;
      if (t12 >>> 0 !== t12 || t12 >= t11.length)
        throw $.ioore(t12);
      t12 = t11[t12];
      t11 = vertex.wB;
      $.Transform_mulToOut(transformB, t12, t11);
      t12 = vertex.w;
      t13 = t12.storage;
      t11 = t11.storage;
      if (1 >= t11.length)
        throw $.ioore(1);
      t14 = t11[1];
      if (1 >= t13.length)
        throw $.ioore(1);
      t13[1] = t14;
      t13[0] = t11[0];
      t12.sub$1(t10);
      ++iter;
      this.iters = this.iters + 1;
      for (i = 0; duplicate = false, i < saveCount; ++i) {
        t10 = vertex.indexA;
        if (i >= 3)
          throw $.ioore(i);
        if ($.$eq(t10, t4[i]) && $.$eq(vertex.indexB, t3[i])) {
          duplicate = true;
          break;
        }
      }
      if (duplicate)
        break;
      t1.count = $.$add$ns(t1.count, 1);
    }
    this.maxIters = $.max(this.maxIters, iter);
    t1.getWitnessPoints$2(output.get$pointA(), output.get$pointB());
    t2 = $.MathBox_distanceSquared(output.get$pointA(), output.get$pointB());
    output.set$distance(Math.sqrt(t2));
    output.set$iterations(iter);
    t1.writeCache$1(cache);
    if (input.get$useRadii()) {
      rA = proxyA.get$radius();
      rB = proxyB.get$radius();
      t1 = output.get$distance();
      t2 = $.getInterceptor$ns(rA);
      t3 = t2.$add(rA, rB);
      if (typeof t1 !== "number")
        throw t1.$gt();
      if (typeof t3 !== "number")
        throw $.iae(t3);
      if (t1 > t3) {
        t1 = output.get$distance();
        if (typeof t1 !== "number")
          throw t1.$gt();
        t1 = t1 > 1.192e-7;
      } else
        t1 = false;
      if (t1) {
        t1 = output.get$distance();
        t2 = t2.$add(rA, rB);
        if (typeof t1 !== "number")
          throw t1.$sub();
        if (typeof t2 !== "number")
          throw $.iae(t2);
        output.set$distance(t1 - t2);
        t2 = this.normal;
        t1 = t2.storage;
        t3 = output.get$pointB().storage;
        if (1 >= t3.length)
          throw $.ioore(1);
        t4 = t3[1];
        if (1 >= t1.length)
          throw $.ioore(1);
        t1[1] = t4;
        t1[0] = t3[0];
        t2.sub$1(output.get$pointA());
        t2.normalize$0();
        if (1 >= t1.length)
          throw $.ioore(1);
        t2 = t1[1];
        if (1 >= t9.length)
          throw $.ioore(1);
        t9[1] = t2;
        t9[0] = t1[0];
        t2 = t9[1];
        if (typeof rA !== "number")
          throw $.iae(rA);
        t9[1] = t2 * rA;
        t9[0] = t9[0] * rA;
        t2 = output.get$pointA();
        t2.add$1(t2, out);
        if (1 >= t1.length)
          throw $.ioore(1);
        t2 = t1[1];
        if (1 >= t9.length)
          throw $.ioore(1);
        t9[1] = t2;
        t9[0] = t1[0];
        t1 = t9[1];
        if (typeof rB !== "number")
          throw $.iae(rB);
        t9[1] = t1 * rB;
        t9[0] = t9[0] * rB;
        output.get$pointB().sub$1(out);
      } else {
        t1 = output.get$pointA();
        t1 = t1.add$1(t1, output.get$pointB()).storage;
        if (1 >= t1.length)
          throw $.ioore(1);
        t1[1] = t1[1] * 0.5;
        t1[0] = t1[0] * 0.5;
        t1 = output.get$pointB();
        t1 = t1.storage;
        t2 = output.get$pointA().storage;
        if (1 >= t2.length)
          throw $.ioore(1);
        t3 = t2[1];
        if (1 >= t1.length)
          throw $.ioore(1);
        t1[1] = t3;
        t1[0] = t2[0];
        output.set$distance(0);
      }
    }
  },
  get$distance: function() {
    return new $.BoundClosure$3(this, "distance$3", null);
  },
  static: {
Distance$_construct: function() {
  return new $.Distance(0, 0, 20, $.Simplex$(), $.List_List(3), $.List_List(3), new $.Vector2(new Float32Array(2)), new $.Vector2(new Float32Array(2)), new $.Vector2(new Float32Array(2)), new $.Vector2(new Float32Array(2)));
}}

},

DistanceInput: {"": "Object;proxyA@,proxyB@,transformA<,transformB<,useRadii<", static: {
DistanceInput$: function() {
  return new $.DistanceInput($.DistanceProxy$(), $.DistanceProxy$(), $.Transform$(), $.Transform$(), false);
}}
},

DistanceOutput: {"": "Object;pointA<,pointB<,distance@,iterations?", static: {
DistanceOutput$: function() {
  return new $.DistanceOutput(new $.Vector2(new Float32Array(2)), new $.Vector2(new Float32Array(2)), null, null);
}}
},

DistanceProxy: {"": "Object;vertices<,count@,radius@",
  setFromShape$1: function(shape) {
    var t1, t2, i, t3, t4;
    t1 = $.getInterceptor$x(shape);
    t2 = t1.get$type(shape);
    if (typeof t2 !== "number")
      return this.setFromShape$1$bailout(1, shape, t1, t2);
    if (t2 === 0) {
      t2 = this.vertices;
      if (0 >= t2.length)
        throw $.ioore(0);
      t2[0].setFrom$1(t1.get$position(shape));
      this.count = 1;
      this.radius = shape.get$radius();
    } else if (t2 === 1) {
      this.count = shape.get$vertexCount();
      this.radius = shape.get$radius();
      t1 = this.vertices;
      t2 = t1.length;
      i = 0;
      while (true) {
        t3 = this.count;
        if (typeof t3 !== "number")
          throw $.iae(t3);
        if (!(i < t3))
          break;
        if (i >= t2)
          throw $.ioore(i);
        t3 = t1[i];
        t4 = shape.get$vertices();
        if (i >= t4.length)
          throw $.ioore(i);
        t3.setFrom$1(t4[i]);
        ++i;
      }
    }
  },
  setFromShape$1$bailout: function(state0, shape, t1, t2) {
    switch (state0) {
      case 0:
        t1 = $.getInterceptor$x(shape);
        t2 = t1.get$type(shape);
      case 1:
        state0 = 0;
      case 2:
        var i, t3, t4;
        if (state0 === 0 && $.$eq(t2, 0)) {
          t2 = this.vertices;
          if (0 >= t2.length)
            throw $.ioore(0);
          t2[0].setFrom$1(t1.get$position(shape));
          this.count = 1;
          this.radius = shape.get$radius();
        } else
          switch (state0) {
            case 0:
              t1 = t1.get$type(shape);
            case 2:
              state0 = 0;
              if ($.$eq(t1, 1)) {
                this.count = shape.get$vertexCount();
                this.radius = shape.get$radius();
                t1 = this.vertices;
                t2 = t1.length;
                i = 0;
                while (true) {
                  t3 = this.count;
                  if (typeof t3 !== "number")
                    throw $.iae(t3);
                  if (!(i < t3))
                    break;
                  if (i >= t2)
                    throw $.ioore(i);
                  t3 = t1[i];
                  t4 = shape.get$vertices();
                  if (i >= t4.length)
                    throw $.ioore(i);
                  t3.setFrom$1(t4[i]);
                  ++i;
                }
              }
          }
    }
  },
  getSupport$1: function(direction) {
    var t1, t2, bestValue, t3, bestIndex, i, value;
    t1 = this.vertices;
    t2 = t1.length;
    if (0 >= t2)
      throw $.ioore(0);
    bestValue = t1[0].dot$1(direction);
    t3 = this.count;
    if (typeof t3 !== "number")
      throw $.iae(t3);
    bestIndex = 0;
    i = 1;
    for (; i < t3; ++i) {
      if (i >= t2)
        throw $.ioore(i);
      value = t1[i].dot$1(direction);
      if (value > bestValue) {
        bestValue = value;
        bestIndex = i;
      }
    }
    return bestIndex;
  },
  DistanceProxy$0: function() {
    var t1, t2, i;
    for (t1 = this.vertices, t2 = t1.length, i = 0; i < t2; ++i)
      t1[i] = new $.Vector2(new Float32Array(2));
  },
  static: {
DistanceProxy$: function() {
  var t1 = new $.DistanceProxy($.List_List(8), 0, 0);
  t1.DistanceProxy$0();
  return t1;
}}

},

Features: {"": "Object;referenceEdge<,incidentEdge<,incidentVertex<,flip<",
  setFrom$1: function(f) {
    this.referenceEdge = f.get$referenceEdge();
    this.incidentEdge = f.get$incidentEdge();
    this.incidentVertex = f.get$incidentVertex();
    this.flip = f.get$flip();
  },
  $eq: function(_, other) {
    var t1, t2;
    if (other == null)
      return false;
    t1 = this.referenceEdge;
    t2 = other.get$referenceEdge();
    return (t1 == null ? t2 == null : t1 === t2) && this.incidentEdge === other.get$incidentEdge() && this.incidentVertex === other.get$incidentVertex() && this.flip === other.get$flip();
  },
  toString$0: function(_) {
    return "Features: (" + this.flip + ", " + $.S(this.incidentEdge) + ", " + this.incidentVertex + " " + $.S(this.referenceEdge) + ")";
  },
  zero$0: function() {
    this.referenceEdge = 0;
    this.incidentEdge = 0;
    this.incidentVertex = 0;
    this.flip = 0;
  },
  static: {
Features$: function() {
  return new $.Features(0, 0, 0, 0);
}}

},

Manifold: {"": "Object;points>,localNormal<,localPoint<,type*,pointCount@",
  setFrom$1: function(other) {
    var t1, t2, t3, i, t4, t5;
    t1 = this.points;
    t2 = t1.length;
    t3 = $.getInterceptor$x(other);
    i = 0;
    while (true) {
      t4 = other.get$pointCount();
      if (typeof t4 !== "number")
        throw $.iae(t4);
      if (!(i < t4))
        break;
      if (i >= t2)
        throw $.ioore(i);
      t4 = t1[i];
      t5 = t3.get$points(other);
      if (typeof t5 !== "object" || t5 === null || (t5.constructor !== Array || !!t5.immutable$list) && !$.isJsIndexable(t5, t5[$.dispatchPropertyName]))
        return this.setFrom$1$bailout(1, other, t4, t5, t1, t3, i, t2);
      if (i >= t5.length)
        throw $.ioore(i);
      t4.setFrom$1(t5[i]);
      ++i;
    }
    this.type = t3.get$type(other);
    t1 = this.localNormal.storage;
    t2 = other.get$localNormal().storage;
    if (1 >= t2.length)
      throw $.ioore(1);
    t3 = t2[1];
    if (1 >= t1.length)
      throw $.ioore(1);
    t1[1] = t3;
    t1[0] = t2[0];
    t2 = this.localPoint.storage;
    t1 = other.get$localPoint().storage;
    if (1 >= t1.length)
      throw $.ioore(1);
    t3 = t1[1];
    if (1 >= t2.length)
      throw $.ioore(1);
    t2[1] = t3;
    t2[0] = t1[0];
    this.pointCount = other.get$pointCount();
  },
  setFrom$1$bailout: function(state0, other, t4, t5, t1, t3, i, t2) {
    switch (state0) {
      case 0:
        t1 = this.points;
        t2 = t1.length;
        t3 = $.getInterceptor$x(other);
        i = 0;
      case 1:
        L0:
          while (true)
            switch (state0) {
              case 0:
                t4 = other.get$pointCount();
                if (typeof t4 !== "number")
                  throw $.iae(t4);
                if (!(i < t4))
                  break L0;
                if (i >= t2)
                  throw $.ioore(i);
                t4 = t1[i];
                t5 = t3.get$points(other);
              case 1:
                state0 = 0;
                t4.setFrom$1($.$index$asx(t5, i));
                ++i;
            }
        this.type = t3.get$type(other);
        t1 = this.localNormal.storage;
        t2 = other.get$localNormal().storage;
        if (1 >= t2.length)
          throw $.ioore(1);
        t3 = t2[1];
        if (1 >= t1.length)
          throw $.ioore(1);
        t1[1] = t3;
        t1[0] = t2[0];
        t2 = this.localPoint.storage;
        t1 = other.get$localPoint().storage;
        if (1 >= t1.length)
          throw $.ioore(1);
        t3 = t1[1];
        if (1 >= t2.length)
          throw $.ioore(1);
        t2[1] = t3;
        t2[0] = t1[0];
        this.pointCount = other.get$pointCount();
    }
  },
  Manifold$0: function() {
    var t1, t2, i, t3;
    for (t1 = this.points, t2 = t1.length, i = 0; i < 2; ++i) {
      t3 = new Float32Array(2);
      if (i >= t2)
        throw $.ioore(i);
      t1[i] = new $.ManifoldPoint(new $.Vector2(t3), 0, 0, new $.ContactID(new $.Features(0, 0, 0, 0)));
    }
  },
  static: {
Manifold$: function() {
  var t1 = new $.Manifold($.List_List(2), new $.Vector2(new Float32Array(2)), new $.Vector2(new Float32Array(2)), null, 0);
  t1.Manifold$0();
  return t1;
}}

},

ManifoldPoint: {"": "Object;localPoint<,normalImpulse@,tangentImpulse@,id>",
  setFrom$1: function(other) {
    var t1, t2, t3;
    t1 = this.localPoint.storage;
    t2 = other.get$localPoint().storage;
    if (1 >= t2.length)
      throw $.ioore(1);
    t3 = t2[1];
    if (1 >= t1.length)
      throw $.ioore(1);
    t1[1] = t3;
    t1[0] = t2[0];
    this.normalImpulse = other.get$normalImpulse();
    this.tangentImpulse = other.get$tangentImpulse();
    t2 = this.id.features;
    t1 = $.get$id$x(other).get$features();
    t2.referenceEdge = t1.referenceEdge;
    t2.incidentEdge = t1.incidentEdge;
    t2.incidentVertex = t1.incidentVertex;
    t2.flip = t1.flip;
  }
},

CircleShape: {"": "Shape;position>,type,radius",
  computeAxisAlignedBox$2: function(argBox, argTransform) {
    var p, t1, t2, t3, t4, t5, t6;
    p = new $.Vector2(new Float32Array(2));
    argTransform.rotation.transformed$2(this.position, p);
    p.add$1(p, argTransform.position);
    t1 = argBox.lowerBound;
    t2 = p.storage;
    t3 = t2.length;
    if (0 >= t3)
      throw $.ioore(0);
    t4 = t2[0];
    t5 = this.radius;
    if (typeof t5 !== "number")
      throw $.iae(t5);
    if (1 >= t3)
      throw $.ioore(1);
    t3 = t2[1];
    t1.setValues$2;
    t1 = t1.storage;
    t6 = t1.length;
    if (0 >= t6)
      throw $.ioore(0);
    t1[0] = t4 - t5;
    if (1 >= t6)
      throw $.ioore(1);
    t1[1] = t3 - t5;
    t3 = argBox.upperBound;
    t1 = t2[0];
    t2 = t2[1];
    t3.setValues$2;
    t3 = t3.storage;
    t6 = t3.length;
    if (0 >= t6)
      throw $.ioore(0);
    t3[0] = t1 + t5;
    if (1 >= t6)
      throw $.ioore(1);
    t3[1] = t2 + t5;
  },
  clone$0: function(_) {
    return $.CircleShape$copy(this);
  },
  computeMass$2: function(massData, density) {
    var t1, t2, t3;
    if (density == null)
      throw density.$mul();
    t1 = this.radius;
    if (typeof t1 !== "number")
      throw $.iae(t1);
    massData.mass = density * 3.141592653589793 * t1 * t1;
    t1 = this.position;
    massData.center.setFrom$1(t1);
    t2 = massData.mass;
    t3 = this.radius;
    if (typeof t3 !== "number")
      throw $.iae(t3);
    massData.inertia = t2 * (0.5 * t3 * t3 + t1.dot$1(t1));
  },
  static: {
CircleShape$: function() {
  return new $.CircleShape(new $.Vector2(new Float32Array(2)), 0, 0);
},

CircleShape$copy: function(other) {
  var t1, t2, t3;
  t1 = other.type;
  t2 = other.radius;
  t3 = new $.Vector2(new Float32Array(2));
  t3.setFrom$1(other.position);
  return new $.CircleShape(t3, t1, t2);
}}

},

MassData: {"": "Object;mass<,center<,inertia<",
  setFrom$1: function(md) {
    var t1, t2, t3;
    this.mass = md.get$mass();
    this.inertia = md.get$inertia();
    t1 = this.center.storage;
    t2 = md.get$center().storage;
    if (1 >= t2.length)
      throw $.ioore(1);
    t3 = t2[1];
    if (1 >= t1.length)
      throw $.ioore(1);
    t1[1] = t3;
    t1[0] = t2[0];
  },
  static: {
MassData$: function() {
  return new $.MassData(0, new $.Vector2(new Float32Array(2)), 0);
}}

},

PolygonShape: {"": "Shape;centroid<,vertices<,normals<,vertexCount<,type,radius",
  getSupport$1: function(d) {
    var t1, t2, bestValue, t3, bestIndex, i, value;
    t1 = this.vertices;
    t2 = t1.length;
    if (0 >= t2)
      throw $.ioore(0);
    bestValue = t1[0].dot$1(d);
    for (t3 = this.vertexCount, bestIndex = 0, i = 1; i < t3; ++i) {
      if (i >= t2)
        throw $.ioore(i);
      value = t1[i].dot$1(d);
      if (value > bestValue) {
        bestValue = value;
        bestIndex = i;
      }
    }
    return bestIndex;
  },
  clone$0: function(_) {
    return $.PolygonShape$copy(this);
  },
  setAsBox$2: function(hx, hy) {
    var t1, t2, t3, t4;
    this.vertexCount = 4;
    t1 = this.vertices;
    t2 = t1.length;
    if (0 >= t2)
      throw $.ioore(0);
    t3 = -hx;
    t4 = -hy;
    t1[0].setValues$2(t3, t4);
    if (1 >= t2)
      throw $.ioore(1);
    t1[1].setValues$2(hx, t4);
    if (2 >= t2)
      throw $.ioore(2);
    t1[2].setValues$2(hx, hy);
    if (3 >= t2)
      throw $.ioore(3);
    t1[3].setValues$2(t3, hy);
    t3 = this.normals;
    t1 = t3.length;
    if (0 >= t1)
      throw $.ioore(0);
    t3[0].setValues$2(0, -1);
    if (1 >= t1)
      throw $.ioore(1);
    t3[1].setValues$2(1, 0);
    if (2 >= t1)
      throw $.ioore(2);
    t3[2].setValues$2(0, 1);
    if (3 >= t1)
      throw $.ioore(3);
    t3[3].setValues$2(-1, 0);
    this.centroid.setZero$0();
  },
  computeAxisAlignedBox$2: function(argAabb, argXf) {
    var lower, upper, v, t1, t2, t3, t4, t5, i, t6, t7, t8;
    lower = new $.Vector2(new Float32Array(2));
    upper = new $.Vector2(new Float32Array(2));
    v = new $.Vector2(new Float32Array(2));
    t1 = this.vertices;
    t2 = t1.length;
    if (0 >= t2)
      throw $.ioore(0);
    $.Transform_mulToOut(argXf, t1[0], lower);
    upper.setFrom$1(lower);
    for (t3 = lower.storage, t4 = v.storage, t5 = upper.storage, i = 1; i < this.vertexCount; ++i) {
      if (i >= t2)
        throw $.ioore(i);
      $.Transform_mulToOut(argXf, t1[i], v);
      if (0 >= t3.length)
        throw $.ioore(0);
      t6 = t3[0];
      if (0 >= t4.length)
        throw $.ioore(0);
      t6 = $.min(t6, t4[0]);
      t7 = t3.length;
      if (0 >= t7)
        throw $.ioore(0);
      t3[0] = t6;
      if (1 >= t7)
        throw $.ioore(1);
      t7 = t3[1];
      if (1 >= t4.length)
        throw $.ioore(1);
      t7 = $.min(t7, t4[1]);
      if (1 >= t3.length)
        throw $.ioore(1);
      t3[1] = t7;
      if (0 >= t5.length)
        throw $.ioore(0);
      t7 = t5[0];
      if (0 >= t4.length)
        throw $.ioore(0);
      t7 = $.max(t7, t4[0]);
      t6 = t5.length;
      if (0 >= t6)
        throw $.ioore(0);
      t5[0] = t7;
      if (1 >= t6)
        throw $.ioore(1);
      t6 = t5[1];
      if (1 >= t4.length)
        throw $.ioore(1);
      t6 = $.max(t6, t4[1]);
      if (1 >= t5.length)
        throw $.ioore(1);
      t5[1] = t6;
    }
    t1 = argAabb.lowerBound;
    t2 = t3.length;
    if (0 >= t2)
      throw $.ioore(0);
    t4 = t3[0];
    t6 = this.radius;
    if (typeof t6 !== "number")
      throw $.iae(t6);
    t1.set$x;
    t7 = t1.storage;
    t8 = t7.length;
    if (0 >= t8)
      throw $.ioore(0);
    t7[0] = t4 - t6;
    if (1 >= t2)
      throw $.ioore(1);
    t3 = t3[1];
    t1.set$y;
    if (1 >= t8)
      throw $.ioore(1);
    t7[1] = t3 - t6;
    t3 = argAabb.upperBound;
    t7 = t5.length;
    if (0 >= t7)
      throw $.ioore(0);
    t8 = t5[0];
    t3.set$x;
    t1 = t3.storage;
    t2 = t1.length;
    if (0 >= t2)
      throw $.ioore(0);
    t1[0] = t8 + t6;
    if (1 >= t7)
      throw $.ioore(1);
    t5 = t5[1];
    t3.set$y;
    if (1 >= t2)
      throw $.ioore(1);
    t1[1] = t5 + t6;
  },
  computeMass$2: function(massData, density) {
    var t1, t2, t3, center, pRef, e1, e2, t4, t5, t6, area, I, i, t7, p2, p3, t8, t9, D, triangleArea, t10, t11, t12, t13, t14, px, py, ex1, ey1, ex2, ey2;
    if (this.vertexCount === 2) {
      t1 = this.vertices;
      t2 = t1.length;
      if (0 >= t2)
        throw $.ioore(0);
      t3 = massData.center.setFrom$1(t1[0]);
      if (1 >= t2)
        throw $.ioore(1);
      t1 = t3.add$1(t3, t1[1]);
      t1.scale$1(t1, 0.5);
      massData.mass = 0;
      massData.inertia = 0;
      return;
    }
    center = new $.Vector2(new Float32Array(2));
    center.setZero$0();
    pRef = new $.Vector2(new Float32Array(2));
    pRef.setZero$0();
    e1 = new $.Vector2(new Float32Array(2));
    e2 = new $.Vector2(new Float32Array(2));
    for (t1 = e1.storage, t2 = e2.storage, t3 = center.storage, t4 = pRef.storage, t5 = this.vertices, t6 = t5.length, area = 0, I = 0, i = 0; t7 = this.vertexCount, i < t7;) {
      if (i >= t6)
        throw $.ioore(i);
      p2 = t5[i];
      ++i;
      if (i < t7) {
        if (i >= t6)
          throw $.ioore(i);
        p3 = t5[i];
      } else {
        if (0 >= t6)
          throw $.ioore(0);
        p3 = t5[0];
      }
      t7 = p2.get$storage();
      if (1 >= t7.length)
        throw $.ioore(1);
      t7 = t7[1];
      if (1 >= t1.length)
        throw $.ioore(1);
      t1[1] = t7;
      t7 = p2.get$storage();
      if (0 >= t7.length)
        throw $.ioore(0);
      t1[0] = t7[0];
      e1.sub$1(pRef);
      t7 = p3.get$storage();
      if (1 >= t7.length)
        throw $.ioore(1);
      t7 = t7[1];
      if (1 >= t2.length)
        throw $.ioore(1);
      t2[1] = t7;
      t7 = p3.get$storage();
      if (0 >= t7.length)
        throw $.ioore(0);
      t2[0] = t7[0];
      e2.sub$1(pRef);
      t7 = t1.length;
      if (0 >= t7)
        throw $.ioore(0);
      t8 = t1[0];
      if (1 >= t2.length)
        throw $.ioore(1);
      t9 = t2[1];
      if (1 >= t7)
        throw $.ioore(1);
      D = t8 * t9 - t1[1] * t2[0];
      triangleArea = 0.5 * D;
      area += triangleArea;
      if (0 >= t3.length)
        throw $.ioore(0);
      t9 = t3[0];
      t8 = triangleArea * 0.3333333333333333;
      if (0 >= t4.length)
        throw $.ioore(0);
      t7 = t4[0];
      t10 = $.getInterceptor$x(p2);
      t11 = t10.get$x(p2);
      if (typeof t11 !== "number")
        throw $.iae(t11);
      t12 = $.getInterceptor$x(p3);
      t13 = t12.get$x(p3);
      if (typeof t13 !== "number")
        throw $.iae(t13);
      t14 = t3.length;
      if (0 >= t14)
        throw $.ioore(0);
      t3[0] = t9 + t8 * (t7 + t11 + t13);
      if (1 >= t14)
        throw $.ioore(1);
      t14 = t3[1];
      if (1 >= t4.length)
        throw $.ioore(1);
      t13 = t4[1];
      t10 = t10.get$y(p2);
      if (typeof t10 !== "number")
        throw $.iae(t10);
      t12 = t12.get$y(p3);
      if (typeof t12 !== "number")
        throw $.iae(t12);
      if (1 >= t3.length)
        throw $.ioore(1);
      t3[1] = t14 + t8 * (t13 + t10 + t12);
      t12 = t4.length;
      if (0 >= t12)
        throw $.ioore(0);
      px = t4[0];
      if (1 >= t12)
        throw $.ioore(1);
      py = t4[1];
      t12 = t1.length;
      if (0 >= t12)
        throw $.ioore(0);
      ex1 = t1[0];
      if (1 >= t12)
        throw $.ioore(1);
      ey1 = t1[1];
      t12 = t2.length;
      if (0 >= t12)
        throw $.ioore(0);
      ex2 = t2[0];
      if (1 >= t12)
        throw $.ioore(1);
      ey2 = t2[1];
      I += D * (0.3333333333333333 * (0.25 * (ex1 * ex1 + ex2 * ex1 + ex2 * ex2) + (px * ex1 + px * ex2)) + 0.5 * px * px + (0.3333333333333333 * (0.25 * (ey1 * ey1 + ey2 * ey1 + ey2 * ey2) + (py * ey1 + py * ey2)) + 0.5 * py * py));
    }
    if (density == null)
      throw density.$mul();
    massData.mass = density * area;
    center.scale$1(center, 1 / area);
    massData.center.setFrom$1(center);
    massData.inertia = I * density;
  },
  PolygonShape$copy$1: function(other) {
    var t1, t2, t3, t4, i, t5, t6, t7, t8;
    for (t1 = other.vertices, t2 = t1.length, t3 = this.vertices, t4 = t3.length, i = 0; i < t2; ++i) {
      t5 = t1[i];
      t6 = new $.Vector2(new Float32Array(2));
      t7 = t6.storage;
      t8 = t5.get$storage();
      if (1 >= t8.length)
        throw $.ioore(1);
      t8 = t8[1];
      if (1 >= t7.length)
        throw $.ioore(1);
      t7[1] = t8;
      t5 = t5.get$storage();
      if (0 >= t5.length)
        throw $.ioore(0);
      t7[0] = t5[0];
      if (i >= t4)
        throw $.ioore(i);
      t3[i] = t6;
    }
    for (t1 = other.normals, t2 = t1.length, t3 = this.normals, t4 = t3.length, i = 0; i < t2; ++i) {
      t5 = t1[i];
      t6 = new $.Vector2(new Float32Array(2));
      t7 = t6.storage;
      t8 = t5.get$storage();
      if (1 >= t8.length)
        throw $.ioore(1);
      t8 = t8[1];
      if (1 >= t7.length)
        throw $.ioore(1);
      t7[1] = t8;
      t5 = t5.get$storage();
      if (0 >= t5.length)
        throw $.ioore(0);
      t7[0] = t5[0];
      if (i >= t4)
        throw $.ioore(i);
      t3[i] = t6;
    }
  },
  PolygonShape$0: function() {
    var t1, t2, i;
    for (t1 = this.vertices, t2 = t1.length, i = 0; i < t2; ++i)
      t1[i] = new $.Vector2(new Float32Array(2));
    for (t1 = this.normals, t2 = t1.length, i = 0; i < t2; ++i)
      t1[i] = new $.Vector2(new Float32Array(2));
  },
  static: {
PolygonShape$: function() {
  var t1, t2;
  t1 = $.List_List(8);
  t2 = $.List_List(8);
  t2 = new $.PolygonShape(new $.Vector2(new Float32Array(2)), t1, t2, 0, 1, 0.01);
  t2.PolygonShape$0();
  return t2;
},

PolygonShape$copy: function(other) {
  var t1, t2, t3, t4, t5;
  t1 = other.radius;
  t2 = other.vertexCount;
  t3 = $.List_List(8);
  t4 = $.List_List(8);
  t5 = new $.Vector2(new Float32Array(2));
  t5.setFrom$1(other.centroid);
  t1 = new $.PolygonShape(t5, t3, t4, t2, 1, t1);
  t1.PolygonShape$copy$1(other);
  return t1;
}}

},

Shape: {"": "Object;type*,radius@"},

Simplex: {"": "Object;v1,v2,v3,vertices<,count@,e13,e23,e12,case2,case22,case3,case33",
  readCache$5: function(cache, proxyA, transformA, proxyB, transformB) {
    var t1, i, t2, v, t3, wALocal, wBLocal, t4, t5, t6, metric1, metric2;
    this.count = cache.get$count();
    t1 = this.vertices;
    i = 0;
    while (true) {
      t2 = this.count;
      if (typeof t2 !== "number")
        throw $.iae(t2);
      if (!(i < t2))
        break;
      if (i >= 3)
        throw $.ioore(i);
      v = t1[i];
      v.indexA = $.$index$asx(cache.get$indexA(), i);
      v.indexB = $.$index$asx(cache.get$indexB(), i);
      t2 = proxyA.get$vertices();
      t3 = v.indexA;
      if (t3 >>> 0 !== t3 || t3 >= t2.length)
        throw $.ioore(t3);
      wALocal = t2[t3];
      t3 = proxyB.get$vertices();
      t2 = v.indexB;
      if (t2 >>> 0 !== t2 || t2 >= t3.length)
        throw $.ioore(t2);
      wBLocal = t3[t2];
      t2 = v.wA;
      $.Transform_mulToOut(transformA, wALocal, t2);
      t3 = v.wB;
      $.Transform_mulToOut(transformB, wBLocal, t3);
      t4 = v.w;
      t5 = t4.storage;
      t3 = t3.storage;
      if (1 >= t3.length)
        throw $.ioore(1);
      t6 = t3[1];
      if (1 >= t5.length)
        throw $.ioore(1);
      t5[1] = t6;
      t5[0] = t3[0];
      t4.sub$1(t2);
      v.a = 0;
      ++i;
    }
    if (t2 > 1) {
      metric1 = cache.get$metric();
      metric2 = this.getMetric$0();
      if (metric2 < 0.5 * metric1 || 2 * metric1 < metric2 || metric2 < 1.192e-7)
        this.count = 0;
    }
    if ($.$eq(this.count, 0)) {
      v = t1[0];
      v.indexA = 0;
      v.indexB = 0;
      t1 = proxyA.get$vertices();
      if (0 >= t1.length)
        throw $.ioore(0);
      wALocal = t1[0];
      t1 = proxyB.get$vertices();
      if (0 >= t1.length)
        throw $.ioore(0);
      wBLocal = t1[0];
      t1 = v.wA;
      $.Transform_mulToOut(transformA, wALocal, t1);
      t2 = v.wB;
      $.Transform_mulToOut(transformB, wBLocal, t2);
      v.w.setFrom$1(t2).sub$1(t1);
      this.count = 1;
    }
  },
  writeCache$1: function(cache) {
    var t1, i, t2;
    cache.set$metric(this.getMetric$0());
    cache.set$count(this.count);
    t1 = this.vertices;
    i = 0;
    while (true) {
      t2 = this.count;
      if (typeof t2 !== "number")
        throw $.iae(t2);
      if (!(i < t2))
        break;
      t2 = cache.get$indexA();
      if (i >= 3)
        throw $.ioore(i);
      $.$indexSet$ax(t2, i, t1[i].indexA);
      $.$indexSet$ax(cache.get$indexB(), i, t1[i].indexB);
      ++i;
    }
  },
  getSearchDirection$1: function(out) {
    var t1, t2, t3, t4, t5;
    t1 = out.storage;
    switch (this.count) {
      case 1:
        t2 = this.v1.w.storage;
        if (1 >= t2.length)
          throw $.ioore(1);
        t3 = t2[1];
        if (1 >= t1.length)
          throw $.ioore(1);
        t1[1] = t3;
        t1[0] = t2[0];
        t1[1] = -t1[1];
        t1[0] = -t1[0];
        return;
      case 2:
        t2 = this.e12;
        t3 = t2.storage;
        t4 = this.v2.w.storage;
        if (1 >= t4.length)
          throw $.ioore(1);
        t5 = t4[1];
        if (1 >= t3.length)
          throw $.ioore(1);
        t3[1] = t5;
        t3[0] = t4[0];
        t4 = this.v1.w;
        t2.sub$1(t4);
        t4 = t4.storage;
        if (1 >= t4.length)
          throw $.ioore(1);
        t2 = t4[1];
        if (1 >= t1.length)
          throw $.ioore(1);
        t1[1] = t2;
        t1[0] = t4[0];
        t1[1] = -t1[1];
        t1[0] = -t1[0];
        t4 = t3.length;
        if (0 >= t4)
          throw $.ioore(0);
        t2 = t3[0];
        t5 = t1[1];
        if (1 >= t4)
          throw $.ioore(1);
        t3 = t3[1];
        if (t2 * t5 - t3 * t1[0] > 0) {
          t1[0] = -1 * t3;
          t1[1] = 1 * t2;
        } else {
          t1[0] = 1 * t3;
          t1[1] = -1 * t2;
        }
        break;
      default:
        t2 = t1.length;
        if (0 >= t2)
          throw $.ioore(0);
        t1[0] = 0;
        if (1 >= t2)
          throw $.ioore(1);
        t1[1] = 0;
        return;
    }
  },
  getClosestPoint$1: function(out) {
    var t1, t2, t3, t4, t5, t6, t7;
    t1 = out.storage;
    switch (this.count) {
      case 0:
        t2 = t1.length;
        if (0 >= t2)
          throw $.ioore(0);
        t1[0] = 0;
        if (1 >= t2)
          throw $.ioore(1);
        t1[1] = 0;
        return;
      case 1:
        t2 = this.v1.w.storage;
        if (1 >= t2.length)
          throw $.ioore(1);
        t3 = t2[1];
        if (1 >= t1.length)
          throw $.ioore(1);
        t1[1] = t3;
        t1[0] = t2[0];
        return;
      case 2:
        t2 = this.case22;
        t3 = this.v2;
        t4 = t2.storage;
        t5 = t3.w.storage;
        if (1 >= t5.length)
          throw $.ioore(1);
        t6 = t5[1];
        if (1 >= t4.length)
          throw $.ioore(1);
        t4[1] = t6;
        t4[0] = t5[0];
        t3 = t3.a;
        t4[1] = t4[1] * t3;
        t4[0] = t4[0] * t3;
        t3 = this.case2;
        t4 = this.v1;
        t5 = t3.storage;
        t6 = t4.w.storage;
        if (1 >= t6.length)
          throw $.ioore(1);
        t7 = t6[1];
        if (1 >= t5.length)
          throw $.ioore(1);
        t5[1] = t7;
        t5[0] = t6[0];
        t4 = t4.a;
        t5[1] = t5[1] * t4;
        t5[0] = t5[0] * t4;
        t3.add$1(t3, t2);
        if (1 >= t5.length)
          throw $.ioore(1);
        t2 = t5[1];
        if (1 >= t1.length)
          throw $.ioore(1);
        t1[1] = t2;
        t1[0] = t5[0];
        return;
      case 3:
        t2 = t1.length;
        if (0 >= t2)
          throw $.ioore(0);
        t1[0] = 0;
        if (1 >= t2)
          throw $.ioore(1);
        t1[1] = 0;
        return;
      default:
        t2 = t1.length;
        if (0 >= t2)
          throw $.ioore(0);
        t1[0] = 0;
        if (1 >= t2)
          throw $.ioore(1);
        t1[1] = 0;
        return;
    }
  },
  getWitnessPoints$2: function(pA, pB) {
    var t1, t2, t3, t4;
    switch (this.count) {
      case 0:
        break;
      case 1:
        t1 = this.v1;
        pA.setFrom$1(t1.wA);
        pB.setFrom$1(t1.wB);
        break;
      case 2:
        t1 = this.case2;
        t2 = this.v1;
        t3 = t1.setFrom$1(t2.wA);
        t3.scale$1(t3, t2.a);
        t3 = this.v2;
        t4 = pA.setFrom$1(t3.wA);
        t4 = t4.scale$1(t4, t3.a);
        t4.add$1(t4, t1);
        t4 = t1.setFrom$1(t2.wB);
        t4.scale$1(t4, t2.a);
        t2 = pB.setFrom$1(t3.wB);
        t3 = t2.scale$1(t2, t3.a);
        t3.add$1(t3, t1);
        break;
      case 3:
        t1 = this.v1;
        t2 = pA.setFrom$1(t1.wA);
        t2.scale$1(t2, t1.a);
        t1 = this.case3;
        t2 = this.v2;
        t3 = t1.setFrom$1(t2.wA);
        t3.scale$1(t3, t2.a);
        t2 = this.case33;
        t3 = this.v3;
        t4 = t2.setFrom$1(t3.wA);
        t4.scale$1(t4, t3.a);
        t1 = pA.add$1(pA, t1);
        t1.add$1(t1, t2);
        pB.setFrom$1(pA);
        break;
      default:
        break;
    }
  },
  getMetric$0: function() {
    var t1, t2, t3;
    switch (this.count) {
      case 0:
        return 0;
      case 1:
        return 0;
      case 2:
        t1 = $.MathBox_distanceSquared(this.v1.w, this.v2.w);
        return Math.sqrt(t1);
      case 3:
        t1 = this.case3;
        t2 = this.v1.w;
        t1.setFrom$1(this.v2.w).sub$1(t2);
        t3 = this.case33;
        t3.setFrom$1(this.v3.w).sub$1(t2);
        return t1.cross$1(t3);
      default:
        return 0;
    }
  },
  solve2$0: function() {
    var t1, w1, t2, w2, t3, t4, t5, t6, d12_2, d12_1, inv_d12;
    t1 = this.v1;
    w1 = t1.w;
    t2 = this.v2;
    w2 = t2.w;
    t3 = this.e12;
    t4 = t3.storage;
    t5 = w2.storage;
    if (1 >= t5.length)
      throw $.ioore(1);
    t6 = t5[1];
    if (1 >= t4.length)
      throw $.ioore(1);
    t4[1] = t6;
    t4[0] = t5[0];
    t3.sub$1(w1);
    d12_2 = -w1.dot$1(t3);
    if (d12_2 <= 0) {
      t1.a = 1;
      this.count = 1;
      return;
    }
    d12_1 = w2.dot$1(t3);
    if (d12_1 <= 0) {
      t2.a = 1;
      this.count = 1;
      t1.setFrom$1(t2);
      return;
    }
    inv_d12 = 1 / (d12_1 + d12_2);
    t1.a = d12_1 * inv_d12;
    t2.a = d12_2 * inv_d12;
    this.count = 2;
  },
  solve3$0: function() {
    var t1, w1, t2, w2, t3, w3, t4, t5, t6, t7, w1e12, w2e12, d12_2, t8, t9, w1e13, w3e13, d13_2, t10, w2e23, w3e23, d23_2, n123, d123_1, d123_2, d123_3, inv_d12, inv_d13, inv_d23, inv_d123;
    t1 = this.v1;
    w1 = t1.w;
    t2 = this.v2;
    w2 = t2.w;
    t3 = this.v3;
    w3 = t3.w;
    t4 = this.e12;
    t5 = t4.storage;
    t6 = w2.storage;
    if (1 >= t6.length)
      throw $.ioore(1);
    t7 = t6[1];
    if (1 >= t5.length)
      throw $.ioore(1);
    t5[1] = t7;
    t5[0] = t6[0];
    t4.sub$1(w1);
    w1e12 = w1.dot$1(t4);
    w2e12 = w2.dot$1(t4);
    d12_2 = -w1e12;
    t4 = this.e13;
    t7 = t4.storage;
    t8 = w3.storage;
    if (1 >= t8.length)
      throw $.ioore(1);
    t9 = t8[1];
    if (1 >= t7.length)
      throw $.ioore(1);
    t7[1] = t9;
    t7[0] = t8[0];
    t4.sub$1(w1);
    w1e13 = w1.dot$1(t4);
    w3e13 = w3.dot$1(t4);
    d13_2 = -w1e13;
    t4 = this.e23;
    t9 = t4.storage;
    if (1 >= t8.length)
      throw $.ioore(1);
    t10 = t8[1];
    if (1 >= t9.length)
      throw $.ioore(1);
    t9[1] = t10;
    t9[0] = t8[0];
    t4.sub$1(w2);
    w2e23 = w2.dot$1(t4);
    w3e23 = w3.dot$1(t4);
    d23_2 = -w2e23;
    t4 = t5.length;
    if (0 >= t4)
      throw $.ioore(0);
    t9 = t5[0];
    if (1 >= t7.length)
      throw $.ioore(1);
    t10 = t7[1];
    if (1 >= t4)
      throw $.ioore(1);
    n123 = t9 * t10 - t5[1] * t7[0];
    t7 = t6.length;
    if (0 >= t7)
      throw $.ioore(0);
    t5 = t6[0];
    if (1 >= t8.length)
      throw $.ioore(1);
    t10 = t8[1];
    if (1 >= t7)
      throw $.ioore(1);
    t6 = t6[1];
    t8 = t8[0];
    d123_1 = n123 * (t5 * t10 - t6 * t8);
    t7 = w1.storage;
    if (1 >= t7.length)
      throw $.ioore(1);
    t9 = t7[1];
    t7 = t7[0];
    d123_2 = n123 * (t8 * t9 - t10 * t7);
    d123_3 = n123 * (t7 * t6 - t9 * t5);
    if (d12_2 <= 0 && d13_2 <= 0) {
      t1.a = 1;
      this.count = 1;
      return;
    }
    if (w2e12 > 0 && d12_2 > 0 && d123_3 <= 0) {
      inv_d12 = 1 / (w2e12 + d12_2);
      t1.a = w2e12 * inv_d12;
      t2.a = d12_2 * inv_d12;
      this.count = 2;
      return;
    }
    if (w3e13 > 0 && d13_2 > 0 && d123_2 <= 0) {
      inv_d13 = 1 / (w3e13 + d13_2);
      t1.a = w3e13 * inv_d13;
      t3.a = d13_2 * inv_d13;
      this.count = 2;
      t2.setFrom$1(t3);
      return;
    }
    if (w2e12 <= 0 && d23_2 <= 0) {
      t2.a = 1;
      this.count = 1;
      t1.setFrom$1(t2);
      return;
    }
    if (w3e13 <= 0 && w3e23 <= 0) {
      t3.a = 1;
      this.count = 1;
      t1.setFrom$1(t3);
      return;
    }
    if (w3e23 > 0 && d23_2 > 0 && d123_1 <= 0) {
      inv_d23 = 1 / (w3e23 + d23_2);
      t2.a = w3e23 * inv_d23;
      t3.a = d23_2 * inv_d23;
      this.count = 2;
      t1.setFrom$1(t3);
      return;
    }
    inv_d123 = 1 / (d123_1 + d123_2 + d123_3);
    t1.a = d123_1 * inv_d123;
    t2.a = d123_2 * inv_d123;
    t3.a = d123_3 * inv_d123;
    this.count = 3;
  },
  Simplex$0: function() {
    var t1 = this.vertices;
    t1[0] = this.v1;
    t1[1] = this.v2;
    t1[2] = this.v3;
  },
  static: {
Simplex$: function() {
  var t1, t2, t3, t4, t5, t6;
  t1 = $.SimplexVertex$();
  t2 = $.SimplexVertex$();
  t3 = $.SimplexVertex$();
  t4 = $.List_List(3);
  t5 = new Float32Array(2);
  t6 = new Float32Array(2);
  t6 = new $.Simplex(t1, t2, t3, t4, 0, new $.Vector2(t5), new $.Vector2(new Float32Array(2)), new $.Vector2(t6), new $.Vector2(new Float32Array(2)), new $.Vector2(new Float32Array(2)), new $.Vector2(new Float32Array(2)), new $.Vector2(new Float32Array(2)));
  t6.Simplex$0();
  return t6;
}}

},

SimplexCache: {"": "Object;metric@,count@,indexA<,indexB<",
  setFrom$1: function(sc) {
    var t1, t2, t3;
    t1 = this.indexA;
    t2 = t1.length;
    t3 = sc.get$indexA();
    $.IterableMixinWorkaround_setRangeList(t1, 0, t2, t3, 0);
    t1 = this.indexB;
    t2 = t1.length;
    t3 = sc.get$indexB();
    $.IterableMixinWorkaround_setRangeList(t1, 0, t2, t3, 0);
    this.metric = sc.get$metric();
    this.count = sc.get$count();
  },
  static: {
SimplexCache$: function() {
  return new $.SimplexCache(0, 0, $.List_List$generate(3, new $.SimplexCache_closure(), true), $.List_List$generate(3, new $.SimplexCache_closure0(), true));
}}

},

SimplexCache_closure: {"": "Closure;",
  call$1: function(i) {
    return 2147483647;
  }
},

SimplexCache_closure0: {"": "Closure;",
  call$1: function(i) {
    return 2147483647;
  }
},

SimplexVertex: {"": "Object;wA<,wB<,w<,a>,indexA<,indexB<",
  setFrom$1: function(sv) {
    var t1, t2, t3;
    t1 = this.wA.storage;
    t2 = sv.get$wA().storage;
    if (1 >= t2.length)
      throw $.ioore(1);
    t3 = t2[1];
    if (1 >= t1.length)
      throw $.ioore(1);
    t1[1] = t3;
    t1[0] = t2[0];
    t2 = this.wB.storage;
    t1 = sv.get$wB().storage;
    if (1 >= t1.length)
      throw $.ioore(1);
    t3 = t1[1];
    if (1 >= t2.length)
      throw $.ioore(1);
    t2[1] = t3;
    t2[0] = t1[0];
    t1 = this.w.storage;
    t2 = sv.get$w().storage;
    if (1 >= t2.length)
      throw $.ioore(1);
    t3 = t2[1];
    if (1 >= t1.length)
      throw $.ioore(1);
    t1[1] = t3;
    t1[0] = t2[0];
    this.a = $.get$a$x(sv);
    this.indexA = sv.get$indexA();
    this.indexB = sv.get$indexB();
  },
  toString$0: function(_) {
    return "wA: " + $.S(this.wA) + ", wB: " + $.S(this.wB) + ", w: " + $.S(this.w);
  },
  static: {
SimplexVertex$: function() {
  return new $.SimplexVertex(new $.Vector2(new Float32Array(2)), new $.Vector2(new Float32Array(2)), new $.Vector2(new Float32Array(2)), 0, 0, 0);
}}

},

TimeOfImpact: {"": "Object;cache,distanceInput,xfA,xfB,distanceOutput,fcn,indexes,sweepA<,sweepB<,pool",
  timeOfImpact$2: function(output, input) {
    var t1, proxyA, proxyB, t2, t3, tMax, t4, t5, target, t6, t7, t8, t9, t10, t11, t12, t13, t14, iter, t15, t20, pushBackIter, done, s2, s1, a2, a1, rootIterCount, t, s;
    t1 = $.TimeOfImpact_toiCalls;
    if (typeof t1 !== "number")
      return this.timeOfImpact$2$bailout(1, output, input, t1);
    $.TimeOfImpact_toiCalls = t1 + 1;
    t1 = $.getInterceptor$x(output);
    t1.set$state(output, 0);
    output.set$t(input.get$tMax());
    proxyA = input.get$proxyA();
    proxyB = input.get$proxyB();
    t2 = this.sweepA;
    t2.setFrom$1(input.get$sweepA());
    t3 = this.sweepB;
    t3.setFrom$1(input.get$sweepB());
    t2.normalize$0();
    t3.normalize$0();
    tMax = input.get$tMax();
    if (typeof tMax !== "number")
      return this.timeOfImpact$2$bailout(2, output, input, t1, t2, t3, tMax, proxyA, proxyB);
    t4 = proxyA.get$radius();
    if (typeof t4 !== "number")
      return this.timeOfImpact$2$bailout(3, output, input, t1, t2, t3, tMax, proxyA, proxyB, t4);
    t5 = proxyB.get$radius();
    if (typeof t5 !== "number")
      return this.timeOfImpact$2$bailout(4, output, input, t1, t2, t3, tMax, proxyA, proxyB, t4, t5);
    target = $.max(0.005, t4 + t5 - 0.015);
    if (typeof target !== "number")
      return this.timeOfImpact$2$bailout(5, output, input, t1, t2, t3, tMax, proxyA, proxyB, 0, 0, target);
    t5 = this.cache;
    t5.count = 0;
    t4 = this.distanceInput;
    t4.proxyA = input.get$proxyA();
    t4.proxyB = input.get$proxyB();
    t4.useRadii = false;
    for (t6 = this.fcn, t7 = this.indexes, t8 = this.distanceOutput, t9 = this.xfA, t10 = this.xfB, t11 = this.pool, t12 = target + 0.00125, t13 = target - 0.00125, t14 = 0, iter = 0; true;) {
      t2.getTransform$2(t9, t14);
      t3.getTransform$2(t10, t14);
      t4.transformA = t9;
      t4.transformB = t10;
      t11.distance.distance$3(t8, t5, t4);
      t15 = t8.distance;
      if (t15 == null)
        throw t15.$le();
      if (t15 <= 0) {
        t1.set$state(output, 2);
        output.set$t(0);
        break;
      }
      if (t15 < t12) {
        t1.set$state(output, 3);
        output.set$t(t14);
        break;
      }
      t6.initialize$6(t6, t5, proxyA, t2, proxyB, t3, t14);
      for (t20 = tMax, pushBackIter = 0; done = false, true;) {
        s2 = t6.findMinSeparation$2(t7, t20);
        if (s2 > t12) {
          t1.set$state(output, 4);
          output.set$t(tMax);
          done = true;
          break;
        }
        if (s2 > t13) {
          t14 = t20;
          done = false;
          break;
        }
        s1 = t6.evaluate$3(t7[0], t7[1], t14);
        if (s1 < t13) {
          t1.set$state(output, 1);
          output.set$t(t14);
          done = true;
          break;
        }
        if (s1 <= t12) {
          t1.set$state(output, 3);
          output.set$t(t14);
          done = true;
          break;
        }
        for (a2 = t20, a1 = t14, rootIterCount = 0; true;) {
          t = (rootIterCount & 1) === 1 ? a1 + (target - s1) * (a2 - a1) / (s2 - s1) : 0.5 * (a1 + a2);
          s = t6.evaluate$3(t7[0], t7[1], t);
          if (Math.abs(s - target) < 0.00125) {
            t20 = t;
            break;
          }
          if (s > target) {
            a1 = t;
            s1 = s;
          } else {
            a2 = t;
            s2 = s;
          }
          ++rootIterCount;
          t15 = $.TimeOfImpact_toiRootIters;
          if (typeof t15 !== "number")
            return this.timeOfImpact$2$bailout(6, output, 0, t1, t2, t3, tMax, proxyA, proxyB, t4, t5, target, iter, t9, t20, pushBackIter, t10, s2, s1, a1, a2, t11, t15, t8, C.JSNumber_methods, t6, t7, rootIterCount, t14);
          $.TimeOfImpact_toiRootIters = t15 + 1;
          if (rootIterCount === 50)
            break;
        }
        $.TimeOfImpact_toiMaxRootIters = $.max($.TimeOfImpact_toiMaxRootIters, rootIterCount);
        ++pushBackIter;
        if (pushBackIter === 8) {
          done = false;
          break;
        }
      }
      ++iter;
      t15 = $.TimeOfImpact_toiIters;
      if (typeof t15 !== "number")
        return this.timeOfImpact$2$bailout(7, output, 0, t1, t2, t3, tMax, proxyA, proxyB, t4, t5, target, iter, t9, 0, 0, t10, 0, 0, 0, 0, t11, t15, t8, C.JSNumber_methods, t6, t7, 0, t14, done);
      $.TimeOfImpact_toiIters = t15 + 1;
      if (done)
        break;
      if (iter === 1000) {
        t1.set$state(output, 1);
        output.set$t(t14);
        break;
      }
    }
    $.TimeOfImpact_toiMaxIters = $.max($.TimeOfImpact_toiMaxIters, iter);
  },
  timeOfImpact$2$bailout: function(state0, output, input, t1, t2, t3, tMax, proxyA, proxyB, t4, t5, target, iter, t10, t20, pushBackIter, t11, s2, s1, a1, a2, t12, t14, t9, t8, t6, t7, rootIterCount, t13, done) {
    switch (state0) {
      case 0:
        t1 = $.TimeOfImpact_toiCalls;
      case 1:
        state0 = 0;
        $.TimeOfImpact_toiCalls = $.$add$ns(t1, 1);
        t1 = $.getInterceptor$x(output);
        t1.set$state(output, 0);
        output.set$t(input.get$tMax());
        proxyA = input.get$proxyA();
        proxyB = input.get$proxyB();
        t2 = this.sweepA;
        t2.setFrom$1(input.get$sweepA());
        t3 = this.sweepB;
        t3.setFrom$1(input.get$sweepB());
        t2.normalize$0();
        t3.normalize$0();
        tMax = input.get$tMax();
      case 2:
        state0 = 0;
        t4 = proxyA.get$radius();
      case 3:
        state0 = 0;
        t5 = proxyB.get$radius();
      case 4:
        state0 = 0;
        target = $.max(0.005, $.$sub$n($.$add$ns(t4, t5), 0.015));
      case 5:
        state0 = 0;
        t5 = this.cache;
        t5.count = 0;
        t4 = this.distanceInput;
        t4.proxyA = input.get$proxyA();
        t4.proxyB = input.get$proxyB();
        t4.useRadii = false;
        t6 = this.fcn;
        t7 = this.indexes;
        t8 = $.getInterceptor$ns(target);
        t9 = this.distanceOutput;
        t10 = this.xfA;
        t11 = this.xfB;
        t12 = this.pool;
        t13 = 0;
        iter = 0;
      default:
        var t15, t, s;
        L0:
          while (true)
            switch (state0) {
              case 0:
                if (!true)
                  break L0;
                t2.getTransform$2(t10, t13);
                t3.getTransform$2(t11, t13);
                t4.transformA = t10;
                t4.transformB = t11;
                t12.distance.distance$3(t9, t5, t4);
                t14 = t9.distance;
                if (t14 == null)
                  throw t14.$le();
                if (t14 <= 0) {
                  t1.set$state(output, 2);
                  output.set$t(0);
                  break L0;
                }
                t15 = t8.$add(target, 0.00125);
                if (typeof t15 !== "number")
                  throw $.iae(t15);
                if (t14 < t15) {
                  t1.set$state(output, 3);
                  output.set$t(t13);
                  break L0;
                }
                t6.initialize$6(t6, t5, proxyA, t2, proxyB, t3, t13);
                t20 = tMax;
                pushBackIter = 0;
              case 6:
                L1:
                  while (true)
                    switch (state0) {
                      case 0:
                        done = false;
                        if (!true)
                          break L1;
                        s2 = t6.findMinSeparation$2(t7, t20);
                        t14 = t8.$add(target, 0.00125);
                        if (typeof t14 !== "number")
                          throw $.iae(t14);
                        if (s2 > t14) {
                          t1.set$state(output, 4);
                          output.set$t(tMax);
                          done = true;
                          break L1;
                        }
                        t14 = t8.$sub(target, 0.00125);
                        if (typeof t14 !== "number")
                          throw $.iae(t14);
                        if (s2 > t14) {
                          t13 = t20;
                          done = false;
                          break L1;
                        }
                        s1 = t6.evaluate$3(t7[0], t7[1], t13);
                        t14 = t8.$sub(target, 0.00125);
                        if (typeof t14 !== "number")
                          throw $.iae(t14);
                        if (s1 < t14) {
                          t1.set$state(output, 1);
                          output.set$t(t13);
                          done = true;
                          break L1;
                        }
                        t14 = t8.$add(target, 0.00125);
                        if (typeof t14 !== "number")
                          throw $.iae(t14);
                        if (s1 <= t14) {
                          t1.set$state(output, 3);
                          output.set$t(t13);
                          done = true;
                          break L1;
                        }
                        a2 = t20;
                        a1 = t13;
                        rootIterCount = 0;
                      case 6:
                        L2:
                          while (true)
                            switch (state0) {
                              case 0:
                                if (!true)
                                  break L2;
                                t14 = $.getInterceptor$ns(a1);
                                if ((rootIterCount & 1) === 1)
                                  t = t14.$add(a1, $.$div$n($.$mul$n(t8.$sub(target, s1), $.$sub$n(a2, a1)), s2 - s1));
                                else {
                                  t14 = t14.$add(a1, a2);
                                  if (typeof t14 !== "number")
                                    throw $.iae(t14);
                                  t = 0.5 * t14;
                                }
                                s = t6.evaluate$3(t7[0], t7[1], t);
                                if (typeof target !== "number")
                                  throw $.iae(target);
                                if (Math.abs(s - target) < 0.00125) {
                                  t20 = t;
                                  break L2;
                                }
                                if (s > target) {
                                  a1 = t;
                                  s1 = s;
                                } else {
                                  a2 = t;
                                  s2 = s;
                                }
                                ++rootIterCount;
                                t14 = $.TimeOfImpact_toiRootIters;
                              case 6:
                                state0 = 0;
                                $.TimeOfImpact_toiRootIters = $.$add$ns(t14, 1);
                                if (rootIterCount === 50)
                                  break L2;
                            }
                        $.TimeOfImpact_toiMaxRootIters = $.max($.TimeOfImpact_toiMaxRootIters, rootIterCount);
                        ++pushBackIter;
                        if (pushBackIter === 8) {
                          done = false;
                          break L1;
                        }
                    }
                ++iter;
                t14 = $.TimeOfImpact_toiIters;
              case 7:
                state0 = 0;
                $.TimeOfImpact_toiIters = $.$add$ns(t14, 1);
                if (done)
                  break L0;
                if (iter === 1000) {
                  t1.set$state(output, 1);
                  output.set$t(t13);
                  break L0;
                }
            }
        $.TimeOfImpact_toiMaxIters = $.max($.TimeOfImpact_toiMaxIters, iter);
    }
  },
  TimeOfImpact$_construct$1: function(argPool) {
    var t1 = this.indexes;
    t1[0] = 0;
    t1[1] = 0;
    $.TimeOfImpact_toiCalls = 0;
    $.TimeOfImpact_toiIters = 0;
    $.TimeOfImpact_toiMaxIters = 0;
    $.TimeOfImpact_toiRootIters = 0;
    $.TimeOfImpact_toiMaxRootIters = 0;
  },
  static: {
"": "TimeOfImpact_MAX_ITERATIONS,TimeOfImpact_toiCalls,TimeOfImpact_toiIters,TimeOfImpact_toiMaxIters,TimeOfImpact_toiRootIters,TimeOfImpact_toiMaxRootIters",
TimeOfImpact$_construct: function(argPool) {
  var t1 = new $.TimeOfImpact($.SimplexCache$(), $.DistanceInput$(), $.Transform$(), $.Transform$(), $.DistanceOutput$(), $.SeparationFunction$(), $.List_List(2), $.Sweep$(), $.Sweep$(), argPool);
  t1.TimeOfImpact$_construct$1(argPool);
  return t1;
}}

},

SeparationFunction: {"": "Object;proxyA@,proxyB@,type*,localPoint<,axis,sweepA<,sweepB<,localPointA,localPointB,pointA<,pointB<,localPointA1,localPointA2,normal<,localPointB1,localPointB2,axisA,axisB,temp,xfa,xfb",
  initialize$6: function(_, cache, argProxyA, argSweepA, argProxyB, argSweepB, t1) {
    var count, t2, t3, t4, t5, t6, t7, out, t8, t9, t10, t11, t12, t13, t14, out0, s;
    this.proxyA = argProxyA;
    this.proxyB = argProxyB;
    count = cache.count;
    if (typeof count !== "number")
      return this.initialize$6$bailout(1, cache, argSweepA, count, argSweepB, t1);
    this.sweepA = argSweepA;
    this.sweepB = argSweepB;
    t2 = this.xfa;
    this.sweepA.getTransform$2(t2, t1);
    t3 = this.xfb;
    this.sweepB.getTransform$2(t3, t1);
    if (count === 1) {
      this.type = 0;
      t1 = this.localPointA;
      t4 = this.proxyA.get$vertices();
      t5 = cache.indexA;
      if (0 >= t5.length)
        throw $.ioore(0);
      t5 = t5[0];
      if (t5 >>> 0 !== t5 || t5 >= t4.length)
        throw $.ioore(t5);
      t5 = t4[t5];
      t4 = t1.storage;
      t6 = t5.get$storage();
      if (1 >= t6.length)
        throw $.ioore(1);
      t6 = t6[1];
      if (1 >= t4.length)
        throw $.ioore(1);
      t4[1] = t6;
      t5 = t5.get$storage();
      if (0 >= t5.length)
        throw $.ioore(0);
      t4[0] = t5[0];
      t5 = this.localPointB;
      t4 = this.proxyB.get$vertices();
      t6 = cache.indexB;
      if (0 >= t6.length)
        throw $.ioore(0);
      t6 = t6[0];
      if (t6 >>> 0 !== t6 || t6 >= t4.length)
        throw $.ioore(t6);
      t6 = t4[t6];
      t4 = t5.storage;
      t7 = t6.get$storage();
      if (1 >= t7.length)
        throw $.ioore(1);
      t7 = t7[1];
      if (1 >= t4.length)
        throw $.ioore(1);
      t4[1] = t7;
      t6 = t6.get$storage();
      if (0 >= t6.length)
        throw $.ioore(0);
      t4[0] = t6[0];
      t6 = this.pointA;
      $.Transform_mulToOut(t2, t1, t6);
      t1 = this.pointB;
      $.Transform_mulToOut(t3, t5, t1);
      t5 = this.axis;
      t3 = t5.storage;
      t1 = t1.storage;
      if (1 >= t1.length)
        throw $.ioore(1);
      t2 = t1[1];
      if (1 >= t3.length)
        throw $.ioore(1);
      t3[1] = t2;
      t3[0] = t1[0];
      t5.sub$1(t6);
      return t5.normalizeLength$0();
    } else {
      t1 = cache.indexA;
      t4 = t1.length;
      if (0 >= t4)
        throw $.ioore(0);
      t5 = t1[0];
      if (1 >= t4)
        throw $.ioore(1);
      out = this.normal;
      t4 = this.temp;
      t6 = this.axis;
      t7 = t6.storage;
      t8 = t4.storage;
      if ($.$eq(t5, t1[1])) {
        this.type = 2;
        t5 = this.localPointB1;
        t9 = this.proxyB;
        t10 = t9.get$vertices();
        t11 = cache.indexB;
        t12 = t11.length;
        if (0 >= t12)
          throw $.ioore(0);
        t13 = t11[0];
        if (t13 >>> 0 !== t13 || t13 >= t10.length)
          throw $.ioore(t13);
        t13 = t10[t13];
        t10 = t5.storage;
        t14 = t13.get$storage();
        if (1 >= t14.length)
          throw $.ioore(1);
        t14 = t14[1];
        if (1 >= t10.length)
          throw $.ioore(1);
        t10[1] = t14;
        t13 = t13.get$storage();
        if (0 >= t13.length)
          throw $.ioore(0);
        t10[0] = t13[0];
        t13 = this.localPointB2;
        t9 = t9.get$vertices();
        if (1 >= t12)
          throw $.ioore(1);
        t11 = t11[1];
        if (t11 >>> 0 !== t11 || t11 >= t9.length)
          throw $.ioore(t11);
        t11 = t9[t11];
        t9 = t13.storage;
        t12 = t11.get$storage();
        if (1 >= t12.length)
          throw $.ioore(1);
        t12 = t12[1];
        if (1 >= t9.length)
          throw $.ioore(1);
        t9[1] = t12;
        t11 = t11.get$storage();
        if (0 >= t11.length)
          throw $.ioore(0);
        t9[0] = t11[0];
        t11 = t9[1];
        if (1 >= t8.length)
          throw $.ioore(1);
        t8[1] = t11;
        t8[0] = t9[0];
        t4.sub$1(t5);
        t5 = t8.length;
        if (0 >= t5)
          throw $.ioore(0);
        t9 = t8[0];
        if (1 >= t5)
          throw $.ioore(1);
        t5 = t8[1];
        t11 = t7.length;
        if (0 >= t11)
          throw $.ioore(0);
        t7[0] = 1 * t5;
        if (1 >= t11)
          throw $.ioore(1);
        t7[1] = -1 * t9;
        t6.normalize$0();
        t6 = t3.rotation;
        t5 = out.storage;
        if (1 >= t7.length)
          throw $.ioore(1);
        t9 = t7[1];
        if (1 >= t5.length)
          throw $.ioore(1);
        t5[1] = t9;
        t5[0] = t7[0];
        out0 = out;
        t6.transform$1(t6, out0);
        t5 = this.localPoint;
        t6 = t5.storage;
        if (1 >= t10.length)
          throw $.ioore(1);
        t9 = t10[1];
        if (1 >= t6.length)
          throw $.ioore(1);
        t6[1] = t9;
        t6[0] = t10[0];
        t5.add$1(t5, t13);
        if (1 >= t6.length)
          throw $.ioore(1);
        t6[1] = t6[1] * 0.5;
        t6[0] = t6[0] * 0.5;
        t6 = this.pointB;
        $.Transform_mulToOut(t3, t5, t6);
        t5 = this.localPointA;
        t3 = this.proxyA.get$vertices();
        if (0 >= t1.length)
          throw $.ioore(0);
        t1 = t1[0];
        if (t1 >>> 0 !== t1 || t1 >= t3.length)
          throw $.ioore(t1);
        t1 = t3[t1];
        t3 = t5.storage;
        t13 = t1.get$storage();
        if (1 >= t13.length)
          throw $.ioore(1);
        t13 = t13[1];
        if (1 >= t3.length)
          throw $.ioore(1);
        t3[1] = t13;
        t1 = t1.get$storage();
        if (0 >= t1.length)
          throw $.ioore(0);
        t3[0] = t1[0];
        t1 = this.pointA;
        $.Transform_mulToOut(t2, t5, t1);
        t1 = t1.storage;
        if (1 >= t1.length)
          throw $.ioore(1);
        t5 = t1[1];
        if (1 >= t8.length)
          throw $.ioore(1);
        t8[1] = t5;
        t8[0] = t1[0];
        t4.sub$1(t6);
        s = t4.dot$1(out);
        if (s < 0) {
          if (1 >= t7.length)
            throw $.ioore(1);
          t7[1] = -t7[1];
          t7[0] = -t7[0];
          s = -s;
        }
        return s;
      } else {
        this.type = 1;
        t5 = this.localPointA1;
        t9 = this.proxyA;
        t10 = t9.get$vertices();
        t11 = t1.length;
        if (0 >= t11)
          throw $.ioore(0);
        t12 = t1[0];
        if (t12 >>> 0 !== t12 || t12 >= t10.length)
          throw $.ioore(t12);
        t12 = t10[t12];
        t10 = t5.storage;
        t13 = t12.get$storage();
        if (1 >= t13.length)
          throw $.ioore(1);
        t13 = t13[1];
        if (1 >= t10.length)
          throw $.ioore(1);
        t10[1] = t13;
        t12 = t12.get$storage();
        if (0 >= t12.length)
          throw $.ioore(0);
        t10[0] = t12[0];
        t12 = this.localPointA2;
        t9 = t9.get$vertices();
        if (1 >= t11)
          throw $.ioore(1);
        t1 = t1[1];
        if (t1 >>> 0 !== t1 || t1 >= t9.length)
          throw $.ioore(t1);
        t1 = t9[t1];
        t9 = t12.storage;
        t11 = t1.get$storage();
        if (1 >= t11.length)
          throw $.ioore(1);
        t11 = t11[1];
        if (1 >= t9.length)
          throw $.ioore(1);
        t9[1] = t11;
        t1 = t1.get$storage();
        if (0 >= t1.length)
          throw $.ioore(0);
        t9[0] = t1[0];
        t1 = t9[1];
        if (1 >= t8.length)
          throw $.ioore(1);
        t8[1] = t1;
        t8[0] = t9[0];
        t4.sub$1(t5);
        t5 = t8.length;
        if (0 >= t5)
          throw $.ioore(0);
        t9 = t8[0];
        if (1 >= t5)
          throw $.ioore(1);
        t5 = t8[1];
        t1 = t7.length;
        if (0 >= t1)
          throw $.ioore(0);
        t7[0] = 1 * t5;
        if (1 >= t1)
          throw $.ioore(1);
        t7[1] = -1 * t9;
        t6.normalize$0();
        t6 = t2.rotation;
        t1 = out.storage;
        if (1 >= t7.length)
          throw $.ioore(1);
        t5 = t7[1];
        if (1 >= t1.length)
          throw $.ioore(1);
        t1[1] = t5;
        t1[0] = t7[0];
        out0 = out;
        t6.transform$1(t6, out0);
        t1 = this.localPoint;
        t5 = t1.storage;
        if (1 >= t10.length)
          throw $.ioore(1);
        t6 = t10[1];
        if (1 >= t5.length)
          throw $.ioore(1);
        t5[1] = t6;
        t5[0] = t10[0];
        t1.add$1(t1, t12);
        if (1 >= t5.length)
          throw $.ioore(1);
        t5[1] = t5[1] * 0.5;
        t5[0] = t5[0] * 0.5;
        t5 = this.pointA;
        $.Transform_mulToOut(t2, t1, t5);
        t1 = this.localPointB;
        t2 = this.proxyB.get$vertices();
        t12 = cache.indexB;
        if (0 >= t12.length)
          throw $.ioore(0);
        t12 = t12[0];
        if (t12 >>> 0 !== t12 || t12 >= t2.length)
          throw $.ioore(t12);
        t12 = t2[t12];
        t2 = t1.storage;
        t10 = t12.get$storage();
        if (1 >= t10.length)
          throw $.ioore(1);
        t10 = t10[1];
        if (1 >= t2.length)
          throw $.ioore(1);
        t2[1] = t10;
        t12 = t12.get$storage();
        if (0 >= t12.length)
          throw $.ioore(0);
        t2[0] = t12[0];
        t12 = this.pointB;
        $.Transform_mulToOut(t3, t1, t12);
        t12 = t12.storage;
        if (1 >= t12.length)
          throw $.ioore(1);
        t1 = t12[1];
        if (1 >= t8.length)
          throw $.ioore(1);
        t8[1] = t1;
        t8[0] = t12[0];
        t4.sub$1(t5);
        s = t4.dot$1(out);
        if (s < 0) {
          if (1 >= t7.length)
            throw $.ioore(1);
          t7[1] = -t7[1];
          t7[0] = -t7[0];
          s = -s;
        }
        return s;
      }
    }
  },
  initialize$6$bailout: function(state0, cache, argSweepA, count, argSweepB, t1) {
    var t2, t3, t4, t5, t6, t7, out, t8, t9, t10, t11, t12, out0, s;
    this.sweepA = argSweepA;
    this.sweepB = argSweepB;
    t2 = this.xfa;
    this.sweepA.getTransform$2(t2, t1);
    t3 = this.xfb;
    this.sweepB.getTransform$2(t3, t1);
    if ($.$eq(count, 1)) {
      this.type = 0;
      t1 = this.localPointA;
      t4 = this.proxyA.get$vertices();
      t5 = cache.indexA;
      if (0 >= t5.length)
        throw $.ioore(0);
      t5 = t5[0];
      if (t5 >>> 0 !== t5 || t5 >= t4.length)
        throw $.ioore(t5);
      t5 = t4[t5];
      t4 = t1.storage;
      t6 = t5.get$storage();
      if (1 >= t6.length)
        throw $.ioore(1);
      t6 = t6[1];
      if (1 >= t4.length)
        throw $.ioore(1);
      t4[1] = t6;
      t5 = t5.get$storage();
      if (0 >= t5.length)
        throw $.ioore(0);
      t4[0] = t5[0];
      t5 = this.localPointB;
      t4 = this.proxyB.get$vertices();
      t6 = cache.indexB;
      if (0 >= t6.length)
        throw $.ioore(0);
      t6 = t6[0];
      if (t6 >>> 0 !== t6 || t6 >= t4.length)
        throw $.ioore(t6);
      t6 = t4[t6];
      t4 = t5.storage;
      t7 = t6.get$storage();
      if (1 >= t7.length)
        throw $.ioore(1);
      t7 = t7[1];
      if (1 >= t4.length)
        throw $.ioore(1);
      t4[1] = t7;
      t6 = t6.get$storage();
      if (0 >= t6.length)
        throw $.ioore(0);
      t4[0] = t6[0];
      t6 = this.pointA;
      $.Transform_mulToOut(t2, t1, t6);
      t1 = this.pointB;
      $.Transform_mulToOut(t3, t5, t1);
      t5 = this.axis;
      t3 = t5.storage;
      t1 = t1.storage;
      if (1 >= t1.length)
        throw $.ioore(1);
      t2 = t1[1];
      if (1 >= t3.length)
        throw $.ioore(1);
      t3[1] = t2;
      t3[0] = t1[0];
      t5.sub$1(t6);
      return t5.normalizeLength$0();
    } else {
      t1 = cache.indexA;
      t4 = t1.length;
      if (0 >= t4)
        throw $.ioore(0);
      t5 = t1[0];
      if (1 >= t4)
        throw $.ioore(1);
      out = this.normal;
      t4 = this.temp;
      t6 = this.axis;
      if ($.$eq(t5, t1[1])) {
        this.type = 2;
        t5 = this.localPointB1;
        t7 = this.proxyB;
        t8 = t7.get$vertices();
        t9 = cache.indexB;
        t10 = t9.length;
        if (0 >= t10)
          throw $.ioore(0);
        t11 = t9[0];
        if (t11 >>> 0 !== t11 || t11 >= t8.length)
          throw $.ioore(t11);
        t11 = t8[t11];
        t8 = t5.storage;
        t12 = t11.get$storage();
        if (1 >= t12.length)
          throw $.ioore(1);
        t12 = t12[1];
        if (1 >= t8.length)
          throw $.ioore(1);
        t8[1] = t12;
        t11 = t11.get$storage();
        if (0 >= t11.length)
          throw $.ioore(0);
        t8[0] = t11[0];
        t11 = this.localPointB2;
        t7 = t7.get$vertices();
        if (1 >= t10)
          throw $.ioore(1);
        t9 = t9[1];
        if (t9 >>> 0 !== t9 || t9 >= t7.length)
          throw $.ioore(t9);
        t9 = t7[t9];
        t7 = t11.storage;
        t10 = t9.get$storage();
        if (1 >= t10.length)
          throw $.ioore(1);
        t10 = t10[1];
        if (1 >= t7.length)
          throw $.ioore(1);
        t7[1] = t10;
        t9 = t9.get$storage();
        if (0 >= t9.length)
          throw $.ioore(0);
        t7[0] = t9[0];
        t9 = t4.storage;
        t10 = t7[1];
        if (1 >= t9.length)
          throw $.ioore(1);
        t9[1] = t10;
        t9[0] = t7[0];
        t4.sub$1(t5);
        t5 = t9.length;
        if (0 >= t5)
          throw $.ioore(0);
        t7 = t9[0];
        if (1 >= t5)
          throw $.ioore(1);
        t5 = t9[1];
        t10 = t6.storage;
        t12 = t10.length;
        if (0 >= t12)
          throw $.ioore(0);
        t10[0] = 1 * t5;
        if (1 >= t12)
          throw $.ioore(1);
        t10[1] = -1 * t7;
        t6.normalize$0();
        t6 = t3.rotation;
        t5 = out.storage;
        if (1 >= t10.length)
          throw $.ioore(1);
        t7 = t10[1];
        if (1 >= t5.length)
          throw $.ioore(1);
        t5[1] = t7;
        t5[0] = t10[0];
        out0 = out;
        t6.transform$1(t6, out0);
        t5 = this.localPoint;
        t6 = t5.storage;
        if (1 >= t8.length)
          throw $.ioore(1);
        t7 = t8[1];
        if (1 >= t6.length)
          throw $.ioore(1);
        t6[1] = t7;
        t6[0] = t8[0];
        t5.add$1(t5, t11);
        if (1 >= t6.length)
          throw $.ioore(1);
        t6[1] = t6[1] * 0.5;
        t6[0] = t6[0] * 0.5;
        t6 = this.pointB;
        $.Transform_mulToOut(t3, t5, t6);
        t5 = this.localPointA;
        t3 = this.proxyA.get$vertices();
        if (0 >= t1.length)
          throw $.ioore(0);
        t1 = t1[0];
        if (t1 >>> 0 !== t1 || t1 >= t3.length)
          throw $.ioore(t1);
        t1 = t3[t1];
        t3 = t5.storage;
        t11 = t1.get$storage();
        if (1 >= t11.length)
          throw $.ioore(1);
        t11 = t11[1];
        if (1 >= t3.length)
          throw $.ioore(1);
        t3[1] = t11;
        t1 = t1.get$storage();
        if (0 >= t1.length)
          throw $.ioore(0);
        t3[0] = t1[0];
        t1 = this.pointA;
        $.Transform_mulToOut(t2, t5, t1);
        t1 = t1.storage;
        if (1 >= t1.length)
          throw $.ioore(1);
        t5 = t1[1];
        if (1 >= t9.length)
          throw $.ioore(1);
        t9[1] = t5;
        t9[0] = t1[0];
        t4.sub$1(t6);
        s = t4.dot$1(out);
        if (s < 0) {
          if (1 >= t10.length)
            throw $.ioore(1);
          t10[1] = -t10[1];
          t10[0] = -t10[0];
          s = -s;
        }
        return s;
      } else {
        this.type = 1;
        t5 = this.localPointA1;
        t7 = this.proxyA;
        t8 = t7.get$vertices();
        t9 = t1.length;
        if (0 >= t9)
          throw $.ioore(0);
        t10 = t1[0];
        if (t10 >>> 0 !== t10 || t10 >= t8.length)
          throw $.ioore(t10);
        t10 = t8[t10];
        t8 = t5.storage;
        t11 = t10.get$storage();
        if (1 >= t11.length)
          throw $.ioore(1);
        t11 = t11[1];
        if (1 >= t8.length)
          throw $.ioore(1);
        t8[1] = t11;
        t10 = t10.get$storage();
        if (0 >= t10.length)
          throw $.ioore(0);
        t8[0] = t10[0];
        t10 = this.localPointA2;
        t7 = t7.get$vertices();
        if (1 >= t9)
          throw $.ioore(1);
        t1 = t1[1];
        if (t1 >>> 0 !== t1 || t1 >= t7.length)
          throw $.ioore(t1);
        t1 = t7[t1];
        t7 = t10.storage;
        t9 = t1.get$storage();
        if (1 >= t9.length)
          throw $.ioore(1);
        t9 = t9[1];
        if (1 >= t7.length)
          throw $.ioore(1);
        t7[1] = t9;
        t1 = t1.get$storage();
        if (0 >= t1.length)
          throw $.ioore(0);
        t7[0] = t1[0];
        t1 = t4.storage;
        t9 = t7[1];
        if (1 >= t1.length)
          throw $.ioore(1);
        t1[1] = t9;
        t1[0] = t7[0];
        t4.sub$1(t5);
        t5 = t1.length;
        if (0 >= t5)
          throw $.ioore(0);
        t7 = t1[0];
        if (1 >= t5)
          throw $.ioore(1);
        t5 = t1[1];
        t9 = t6.storage;
        t11 = t9.length;
        if (0 >= t11)
          throw $.ioore(0);
        t9[0] = 1 * t5;
        if (1 >= t11)
          throw $.ioore(1);
        t9[1] = -1 * t7;
        t6.normalize$0();
        t6 = t2.rotation;
        t5 = out.storage;
        if (1 >= t9.length)
          throw $.ioore(1);
        t7 = t9[1];
        if (1 >= t5.length)
          throw $.ioore(1);
        t5[1] = t7;
        t5[0] = t9[0];
        out0 = out;
        t6.transform$1(t6, out0);
        t5 = this.localPoint;
        t6 = t5.storage;
        if (1 >= t8.length)
          throw $.ioore(1);
        t7 = t8[1];
        if (1 >= t6.length)
          throw $.ioore(1);
        t6[1] = t7;
        t6[0] = t8[0];
        t5.add$1(t5, t10);
        if (1 >= t6.length)
          throw $.ioore(1);
        t6[1] = t6[1] * 0.5;
        t6[0] = t6[0] * 0.5;
        t6 = this.pointA;
        $.Transform_mulToOut(t2, t5, t6);
        t5 = this.localPointB;
        t2 = this.proxyB.get$vertices();
        t10 = cache.indexB;
        if (0 >= t10.length)
          throw $.ioore(0);
        t10 = t10[0];
        if (t10 >>> 0 !== t10 || t10 >= t2.length)
          throw $.ioore(t10);
        t10 = t2[t10];
        t2 = t5.storage;
        t8 = t10.get$storage();
        if (1 >= t8.length)
          throw $.ioore(1);
        t8 = t8[1];
        if (1 >= t2.length)
          throw $.ioore(1);
        t2[1] = t8;
        t10 = t10.get$storage();
        if (0 >= t10.length)
          throw $.ioore(0);
        t2[0] = t10[0];
        t10 = this.pointB;
        $.Transform_mulToOut(t3, t5, t10);
        t10 = t10.storage;
        if (1 >= t10.length)
          throw $.ioore(1);
        t5 = t10[1];
        if (1 >= t1.length)
          throw $.ioore(1);
        t1[1] = t5;
        t1[0] = t10[0];
        t4.sub$1(t6);
        s = t4.dot$1(out);
        if (s < 0) {
          if (1 >= t9.length)
            throw $.ioore(1);
          t9[1] = -t9[1];
          t9[0] = -t9[0];
          s = -s;
        }
        return s;
      }
    }
  },
  findMinSeparation$2: function(indexes, t) {
    var t1, t2, t3, t4, out, t5, t6, t7, out0, out1, t8;
    t1 = this.xfa;
    this.sweepA.getTransform$2(t1, t);
    t2 = this.xfb;
    this.sweepB.getTransform$2(t2, t);
    switch (this.type) {
      case 0:
        t3 = t1.rotation.transposed$0();
        t4 = this.axis;
        out = this.axisA;
        t5 = t4.storage;
        t6 = out.storage;
        if (1 >= t5.length)
          throw $.ioore(1);
        t7 = t5[1];
        if (1 >= t6.length)
          throw $.ioore(1);
        t6[1] = t7;
        t6[0] = t5[0];
        out0 = out;
        t3.transform$1(t3, out0);
        t3 = t2.rotation.transposed$0();
        t5 = t4.storage;
        if (1 >= t5.length)
          throw $.ioore(1);
        t5[1] = -t5[1];
        t5[0] = -t5[0];
        out0 = this.axisB;
        t6 = out0.storage;
        t7 = t5[1];
        if (1 >= t6.length)
          throw $.ioore(1);
        t6[1] = t7;
        t6[0] = t5[0];
        out1 = out0;
        t3.transform$1(t3, out1);
        if (1 >= t5.length)
          throw $.ioore(1);
        t5[1] = -t5[1];
        t5[0] = -t5[0];
        indexes[0] = this.proxyA.getSupport$1(out);
        indexes[1] = this.proxyB.getSupport$1(out0);
        t3 = this.localPointA;
        t5 = this.proxyA.get$vertices();
        t6 = indexes[0];
        if (t6 >>> 0 !== t6 || t6 >= t5.length)
          throw $.ioore(t6);
        t6 = t5[t6];
        t5 = t3.storage;
        t7 = t6.get$storage();
        if (1 >= t7.length)
          throw $.ioore(1);
        t7 = t7[1];
        if (1 >= t5.length)
          throw $.ioore(1);
        t5[1] = t7;
        t6 = t6.get$storage();
        if (0 >= t6.length)
          throw $.ioore(0);
        t5[0] = t6[0];
        t6 = this.localPointB;
        t5 = this.proxyB.get$vertices();
        t7 = indexes[1];
        if (t7 >>> 0 !== t7 || t7 >= t5.length)
          throw $.ioore(t7);
        t7 = t5[t7];
        t5 = t6.storage;
        t8 = t7.get$storage();
        if (1 >= t8.length)
          throw $.ioore(1);
        t8 = t8[1];
        if (1 >= t5.length)
          throw $.ioore(1);
        t5[1] = t8;
        t7 = t7.get$storage();
        if (0 >= t7.length)
          throw $.ioore(0);
        t5[0] = t7[0];
        t7 = this.pointA;
        $.Transform_mulToOut(t1, t3, t7);
        t3 = this.pointB;
        $.Transform_mulToOut(t2, t6, t3);
        return t3.sub$1(t7).dot$1(t4);
      case 1:
        t3 = t1.rotation;
        out = this.normal;
        t4 = this.axis.storage;
        t5 = out.storage;
        if (1 >= t4.length)
          throw $.ioore(1);
        t6 = t4[1];
        if (1 >= t5.length)
          throw $.ioore(1);
        t5[1] = t6;
        t5[0] = t4[0];
        out0 = out;
        t3.transform$1(t3, out0);
        t3 = this.pointA;
        $.Transform_mulToOut(t1, this.localPoint, t3);
        t1 = out.storage;
        if (1 >= t1.length)
          throw $.ioore(1);
        t1[1] = -t1[1];
        t1[0] = -t1[0];
        t4 = t2.rotation.transposed$0();
        out0 = this.axisB;
        t5 = out0.storage;
        if (1 >= t1.length)
          throw $.ioore(1);
        t6 = t1[1];
        if (1 >= t5.length)
          throw $.ioore(1);
        t5[1] = t6;
        t5[0] = t1[0];
        out1 = out0;
        t4.transform$1(t4, out1);
        if (1 >= t1.length)
          throw $.ioore(1);
        t1[1] = -t1[1];
        t1[0] = -t1[0];
        indexes[0] = -1;
        indexes[1] = this.proxyB.getSupport$1(out0);
        t1 = this.localPointB;
        t4 = this.proxyB.get$vertices();
        t5 = indexes[1];
        if (t5 >>> 0 !== t5 || t5 >= t4.length)
          throw $.ioore(t5);
        t5 = t4[t5];
        t4 = t1.storage;
        t6 = t5.get$storage();
        if (1 >= t6.length)
          throw $.ioore(1);
        t6 = t6[1];
        if (1 >= t4.length)
          throw $.ioore(1);
        t4[1] = t6;
        t5 = t5.get$storage();
        if (0 >= t5.length)
          throw $.ioore(0);
        t4[0] = t5[0];
        t5 = this.pointB;
        $.Transform_mulToOut(t2, t1, t5);
        return t5.sub$1(t3).dot$1(out);
      case 2:
        t3 = t2.rotation;
        out = this.normal;
        t4 = this.axis.storage;
        t5 = out.storage;
        if (1 >= t4.length)
          throw $.ioore(1);
        t6 = t4[1];
        if (1 >= t5.length)
          throw $.ioore(1);
        t5[1] = t6;
        t5[0] = t4[0];
        out0 = out;
        t3.transform$1(t3, out0);
        t3 = this.pointB;
        $.Transform_mulToOut(t2, this.localPoint, t3);
        t2 = t1.rotation.transposed$0();
        t4 = out.storage;
        if (1 >= t4.length)
          throw $.ioore(1);
        t4[1] = -t4[1];
        t4[0] = -t4[0];
        out0 = this.axisA;
        t5 = out0.storage;
        t6 = t4[1];
        if (1 >= t5.length)
          throw $.ioore(1);
        t5[1] = t6;
        t5[0] = t4[0];
        out1 = out0;
        t2.transform$1(t2, out1);
        if (1 >= t4.length)
          throw $.ioore(1);
        t4[1] = -t4[1];
        t4[0] = -t4[0];
        indexes[1] = -1;
        indexes[0] = this.proxyA.getSupport$1(out0);
        t2 = this.localPointA;
        t4 = this.proxyA.get$vertices();
        t5 = indexes[0];
        if (t5 >>> 0 !== t5 || t5 >= t4.length)
          throw $.ioore(t5);
        t5 = t4[t5];
        t4 = t2.storage;
        t6 = t5.get$storage();
        if (1 >= t6.length)
          throw $.ioore(1);
        t6 = t6[1];
        if (1 >= t4.length)
          throw $.ioore(1);
        t4[1] = t6;
        t5 = t5.get$storage();
        if (0 >= t5.length)
          throw $.ioore(0);
        t4[0] = t5[0];
        t5 = this.pointA;
        $.Transform_mulToOut(t1, t2, t5);
        return t5.sub$1(t3).dot$1(out);
      default:
        indexes[0] = -1;
        indexes[1] = -1;
        return 0;
    }
  },
  evaluate$3: function(indexA, indexB, t) {
    var t1, t2, t3, t4, out, t5, t6, t7, t8, out0;
    t1 = this.xfa;
    this.sweepA.getTransform$2(t1, t);
    t2 = this.xfb;
    this.sweepB.getTransform$2(t2, t);
    switch (this.type) {
      case 0:
        t3 = t1.rotation.transposed$0();
        t4 = this.axis;
        out = this.axisA;
        t5 = t4.storage;
        t6 = out.storage;
        if (1 >= t5.length)
          throw $.ioore(1);
        t7 = t5[1];
        if (1 >= t6.length)
          throw $.ioore(1);
        t6[1] = t7;
        t6[0] = t5[0];
        t3.transform$1(t3, out);
        t3 = t2.rotation.transposed$0();
        t5 = t4.storage;
        if (1 >= t5.length)
          throw $.ioore(1);
        t5[1] = -t5[1];
        t5[0] = -t5[0];
        out = this.axisB;
        t6 = out.storage;
        t7 = t5[1];
        if (1 >= t6.length)
          throw $.ioore(1);
        t6[1] = t7;
        t6[0] = t5[0];
        t3.transform$1(t3, out);
        if (1 >= t5.length)
          throw $.ioore(1);
        t5[1] = -t5[1];
        t5[0] = -t5[0];
        t3 = this.localPointA;
        t5 = this.proxyA.get$vertices();
        if (indexA >>> 0 !== indexA || indexA >= t5.length)
          throw $.ioore(indexA);
        t5 = t5[indexA];
        t6 = t3.storage;
        t7 = t5.get$storage();
        if (1 >= t7.length)
          throw $.ioore(1);
        t7 = t7[1];
        if (1 >= t6.length)
          throw $.ioore(1);
        t6[1] = t7;
        t5 = t5.get$storage();
        if (0 >= t5.length)
          throw $.ioore(0);
        t6[0] = t5[0];
        t5 = this.localPointB;
        t6 = this.proxyB.get$vertices();
        if (indexB >>> 0 !== indexB || indexB >= t6.length)
          throw $.ioore(indexB);
        t6 = t6[indexB];
        t7 = t5.storage;
        t8 = t6.get$storage();
        if (1 >= t8.length)
          throw $.ioore(1);
        t8 = t8[1];
        if (1 >= t7.length)
          throw $.ioore(1);
        t7[1] = t8;
        t6 = t6.get$storage();
        if (0 >= t6.length)
          throw $.ioore(0);
        t7[0] = t6[0];
        t6 = this.pointA;
        $.Transform_mulToOut(t1, t3, t6);
        t3 = this.pointB;
        $.Transform_mulToOut(t2, t5, t3);
        return t3.sub$1(t6).dot$1(t4);
      case 1:
        t3 = t1.rotation;
        out = this.normal;
        t4 = this.axis.storage;
        t5 = out.storage;
        if (1 >= t4.length)
          throw $.ioore(1);
        t6 = t4[1];
        if (1 >= t5.length)
          throw $.ioore(1);
        t5[1] = t6;
        t5[0] = t4[0];
        out0 = out;
        t3.transform$1(t3, out0);
        t3 = this.pointA;
        $.Transform_mulToOut(t1, this.localPoint, t3);
        t1 = out.storage;
        if (1 >= t1.length)
          throw $.ioore(1);
        t1[1] = -t1[1];
        t1[0] = -t1[0];
        t4 = t2.rotation.transposed$0();
        out0 = this.axisB;
        t5 = out0.storage;
        if (1 >= t1.length)
          throw $.ioore(1);
        t6 = t1[1];
        if (1 >= t5.length)
          throw $.ioore(1);
        t5[1] = t6;
        t5[0] = t1[0];
        t4.transform$1(t4, out0);
        if (1 >= t1.length)
          throw $.ioore(1);
        t1[1] = -t1[1];
        t1[0] = -t1[0];
        t1 = this.localPointB;
        t4 = this.proxyB.get$vertices();
        if (indexB >>> 0 !== indexB || indexB >= t4.length)
          throw $.ioore(indexB);
        t4 = t4[indexB];
        t5 = t1.storage;
        t6 = t4.get$storage();
        if (1 >= t6.length)
          throw $.ioore(1);
        t6 = t6[1];
        if (1 >= t5.length)
          throw $.ioore(1);
        t5[1] = t6;
        t4 = t4.get$storage();
        if (0 >= t4.length)
          throw $.ioore(0);
        t5[0] = t4[0];
        t4 = this.pointB;
        $.Transform_mulToOut(t2, t1, t4);
        return t4.sub$1(t3).dot$1(out);
      case 2:
        t3 = t2.rotation;
        out = this.normal;
        t4 = this.axis.storage;
        t5 = out.storage;
        if (1 >= t4.length)
          throw $.ioore(1);
        t6 = t4[1];
        if (1 >= t5.length)
          throw $.ioore(1);
        t5[1] = t6;
        t5[0] = t4[0];
        out0 = out;
        t3.transform$1(t3, out0);
        t3 = this.pointB;
        $.Transform_mulToOut(t2, this.localPoint, t3);
        t2 = t1.rotation.transposed$0();
        t4 = out.storage;
        if (1 >= t4.length)
          throw $.ioore(1);
        t4[1] = -t4[1];
        t4[0] = -t4[0];
        out0 = this.axisA;
        t5 = out0.storage;
        t6 = t4[1];
        if (1 >= t5.length)
          throw $.ioore(1);
        t5[1] = t6;
        t5[0] = t4[0];
        t2.transform$1(t2, out0);
        if (1 >= t4.length)
          throw $.ioore(1);
        t4[1] = -t4[1];
        t4[0] = -t4[0];
        t2 = this.localPointA;
        t4 = this.proxyA.get$vertices();
        if (indexA >>> 0 !== indexA || indexA >= t4.length)
          throw $.ioore(indexA);
        t4 = t4[indexA];
        t5 = t2.storage;
        t6 = t4.get$storage();
        if (1 >= t6.length)
          throw $.ioore(1);
        t6 = t6[1];
        if (1 >= t5.length)
          throw $.ioore(1);
        t5[1] = t6;
        t4 = t4.get$storage();
        if (0 >= t4.length)
          throw $.ioore(0);
        t5[0] = t4[0];
        t4 = this.pointA;
        $.Transform_mulToOut(t1, t2, t4);
        return t4.sub$1(t3).dot$1(out);
      default:
        return 0;
    }
  },
  static: {
SeparationFunction$: function() {
  var t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18;
  t1 = $.DistanceProxy$();
  t2 = $.DistanceProxy$();
  t3 = new Float32Array(2);
  t4 = new Float32Array(2);
  t5 = $.Sweep$();
  t6 = $.Sweep$();
  t7 = new Float32Array(2);
  t8 = new Float32Array(2);
  t9 = new Float32Array(2);
  t10 = new Float32Array(2);
  t11 = new Float32Array(2);
  t12 = new Float32Array(2);
  t13 = new Float32Array(2);
  t14 = new Float32Array(2);
  t15 = new Float32Array(2);
  t16 = new Float32Array(2);
  t17 = $.Transform$();
  t18 = $.Transform$();
  return new $.SeparationFunction(t1, t2, 0, new $.Vector2(t3), new $.Vector2(t4), t5, t6, new $.Vector2(t7), new $.Vector2(t8), new $.Vector2(t9), new $.Vector2(t10), new $.Vector2(t11), new $.Vector2(t12), new $.Vector2(t13), new $.Vector2(t14), new $.Vector2(t15), new $.Vector2(new Float32Array(2)), new $.Vector2(new Float32Array(2)), new $.Vector2(t16), t17, t18);
}}

},

TimeOfImpactInput: {"": "Object;proxyA<,proxyB<,sweepA<,sweepB<,tMax<", static: {
TimeOfImpactInput$: function() {
  return new $.TimeOfImpactInput($.DistanceProxy$(), $.DistanceProxy$(), $.Sweep$(), $.Sweep$(), 0);
}}
},

TimeOfImpactOutput: {"": "Object;state',t?"},

WorldManifold: {"": "Object;normal<,points>,pool3,pool4",
  initialize$5: function(_, manifold, xfA, radiusA, xfB, radiusB) {
    var t1, pointA, pointB, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, i, t16, scalar, v, t17;
    t1 = $.getInterceptor$x(manifold);
    switch (t1.get$type(manifold)) {
      case 0:
        pointA = this.pool3;
        pointB = this.pool4;
        t2 = this.normal;
        t3 = t2.storage;
        t4 = t3.length;
        if (0 >= t4)
          throw $.ioore(0);
        t3[0] = 1;
        if (1 >= t4)
          throw $.ioore(1);
        t3[1] = 0;
        t4 = xfA.position.storage;
        t5 = t4.length;
        if (0 >= t5)
          throw $.ioore(0);
        t6 = t4[0];
        t7 = xfA.rotation.storage;
        t8 = t7.length;
        if (0 >= t8)
          throw $.ioore(0);
        t9 = t7[0];
        t10 = manifold.get$localPoint().storage;
        t11 = t10.length;
        if (0 >= t11)
          throw $.ioore(0);
        t12 = t10[0];
        if (2 >= t8)
          throw $.ioore(2);
        t13 = t7[2];
        if (1 >= t11)
          throw $.ioore(1);
        t10 = t10[1];
        t11 = pointA.storage;
        t14 = t11.length;
        if (0 >= t14)
          throw $.ioore(0);
        t11[0] = t6 + t9 * t12 + t13 * t10;
        if (1 >= t5)
          throw $.ioore(1);
        t4 = t4[1];
        t5 = t7[1];
        t10 = manifold.get$localPoint().storage;
        t13 = t10.length;
        if (0 >= t13)
          throw $.ioore(0);
        t12 = t10[0];
        if (3 >= t8)
          throw $.ioore(3);
        t7 = t7[3];
        if (1 >= t13)
          throw $.ioore(1);
        t10 = t10[1];
        if (1 >= t14)
          throw $.ioore(1);
        t11[1] = t4 + t5 * t12 + t7 * t10;
        t10 = xfB.position.storage;
        t7 = t10.length;
        if (0 >= t7)
          throw $.ioore(0);
        t12 = t10[0];
        t5 = xfB.rotation.storage;
        t4 = t5.length;
        if (0 >= t4)
          throw $.ioore(0);
        t14 = t5[0];
        t13 = t1.get$points(manifold);
        t8 = $.getInterceptor$asx(t13);
        t9 = t8.$index(t13, 0).get$localPoint().storage;
        if (0 >= t9.length)
          throw $.ioore(0);
        t9 = t9[0];
        if (2 >= t4)
          throw $.ioore(2);
        t6 = t5[2];
        t13 = t8.$index(t13, 0).get$localPoint().storage;
        if (1 >= t13.length)
          throw $.ioore(1);
        t13 = t13[1];
        t8 = pointB.storage;
        t15 = t8.length;
        if (0 >= t15)
          throw $.ioore(0);
        t8[0] = t12 + t14 * t9 + t6 * t13;
        if (1 >= t7)
          throw $.ioore(1);
        t10 = t10[1];
        t7 = t5[1];
        t1 = t1.get$points(manifold);
        t13 = $.getInterceptor$asx(t1);
        t6 = t13.$index(t1, 0).get$localPoint().storage;
        if (0 >= t6.length)
          throw $.ioore(0);
        t6 = t6[0];
        if (3 >= t4)
          throw $.ioore(3);
        t5 = t5[3];
        t1 = t13.$index(t1, 0).get$localPoint().storage;
        if (1 >= t1.length)
          throw $.ioore(1);
        t1 = t1[1];
        if (1 >= t15)
          throw $.ioore(1);
        t8[1] = t10 + t7 * t6 + t5 * t1;
        if ($.MathBox_distanceSquared(pointA, pointB) > 1.4208639999999999e-14) {
          t1 = t8.length;
          if (0 >= t1)
            throw $.ioore(0);
          t4 = t8[0];
          t5 = t11.length;
          if (0 >= t5)
            throw $.ioore(0);
          t6 = t11[0];
          t7 = t3.length;
          if (0 >= t7)
            throw $.ioore(0);
          t3[0] = t4 - t6;
          if (1 >= t1)
            throw $.ioore(1);
          t1 = t8[1];
          if (1 >= t5)
            throw $.ioore(1);
          t5 = t11[1];
          if (1 >= t7)
            throw $.ioore(1);
          t3[1] = t1 - t5;
          t2.normalize$0();
        }
        t1 = t3.length;
        if (0 >= t1)
          throw $.ioore(0);
        t2 = t3[0];
        if (typeof radiusA !== "number")
          throw $.iae(radiusA);
        t4 = t11.length;
        if (0 >= t4)
          throw $.ioore(0);
        t5 = t11[0];
        if (1 >= t1)
          throw $.ioore(1);
        t3 = t3[1];
        if (1 >= t4)
          throw $.ioore(1);
        t11 = t11[1];
        if (typeof radiusB !== "number")
          throw $.iae(radiusB);
        t4 = t8.length;
        if (0 >= t4)
          throw $.ioore(0);
        t1 = t8[0];
        if (1 >= t4)
          throw $.ioore(1);
        t8 = t8[1];
        t4 = this.points;
        if (0 >= t4.length)
          throw $.ioore(0);
        $.set$x$x(t4[0], (t2 * radiusA + t5 + (-t2 * radiusB + t1)) * 0.5);
        if (0 >= t4.length)
          throw $.ioore(0);
        $.set$y$x(t4[0], (t3 * radiusA + t11 + (-t3 * radiusB + t8)) * 0.5);
        return;
      case 1:
        t2 = xfA.rotation.storage;
        t3 = t2.length;
        if (0 >= t3)
          throw $.ioore(0);
        t4 = t2[0];
        t5 = manifold.get$localNormal().storage;
        t6 = t5.length;
        if (0 >= t6)
          throw $.ioore(0);
        t7 = t5[0];
        if (2 >= t3)
          throw $.ioore(2);
        t8 = t2[2];
        if (1 >= t6)
          throw $.ioore(1);
        t5 = t5[1];
        t6 = this.normal.storage;
        t9 = t6.length;
        if (0 >= t9)
          throw $.ioore(0);
        t6[0] = t4 * t7 + t8 * t5;
        t5 = t2[1];
        t8 = manifold.get$localNormal().storage;
        t7 = t8.length;
        if (0 >= t7)
          throw $.ioore(0);
        t4 = t8[0];
        if (3 >= t3)
          throw $.ioore(3);
        t3 = t2[3];
        if (1 >= t7)
          throw $.ioore(1);
        t8 = t8[1];
        if (1 >= t9)
          throw $.ioore(1);
        t6[1] = t5 * t4 + t3 * t8;
        t8 = xfA.position.storage;
        t3 = t8.length;
        if (0 >= t3)
          throw $.ioore(0);
        t4 = t8[0];
        t5 = t2[0];
        t9 = manifold.get$localPoint().storage;
        t7 = t9.length;
        if (0 >= t7)
          throw $.ioore(0);
        t10 = t9[0];
        t11 = t2[2];
        if (1 >= t7)
          throw $.ioore(1);
        t9 = t9[1];
        t7 = this.pool3.storage;
        t12 = t7.length;
        if (0 >= t12)
          throw $.ioore(0);
        t7[0] = t4 + t5 * t10 + t11 * t9;
        if (1 >= t3)
          throw $.ioore(1);
        t8 = t8[1];
        t3 = t2[1];
        t9 = manifold.get$localPoint().storage;
        t11 = t9.length;
        if (0 >= t11)
          throw $.ioore(0);
        t10 = t9[0];
        t2 = t2[3];
        if (1 >= t11)
          throw $.ioore(1);
        t9 = t9[1];
        if (1 >= t12)
          throw $.ioore(1);
        t7[1] = t8 + t3 * t10 + t2 * t9;
        t2 = xfB.position.storage;
        t3 = xfB.rotation.storage;
        t4 = this.pool4.storage;
        t5 = $.getInterceptor$n(radiusA);
        t8 = this.points;
        i = 0;
        while (true) {
          t9 = manifold.get$pointCount();
          if (typeof t9 !== "number")
            throw $.iae(t9);
          if (!(i < t9))
            break;
          t9 = t2.length;
          if (0 >= t9)
            throw $.ioore(0);
          t10 = t2[0];
          t11 = t3.length;
          if (0 >= t11)
            throw $.ioore(0);
          t12 = t3[0];
          t13 = t1.get$points(manifold);
          t14 = $.getInterceptor$asx(t13);
          t15 = t14.$index(t13, i).get$localPoint().storage;
          if (0 >= t15.length)
            throw $.ioore(0);
          t15 = t15[0];
          if (2 >= t11)
            throw $.ioore(2);
          t16 = t3[2];
          t13 = t14.$index(t13, i).get$localPoint().storage;
          if (1 >= t13.length)
            throw $.ioore(1);
          t13 = t13[1];
          t14 = t4.length;
          if (0 >= t14)
            throw $.ioore(0);
          t4[0] = t10 + t12 * t15 + t16 * t13;
          if (1 >= t9)
            throw $.ioore(1);
          t9 = t2[1];
          t13 = t3[1];
          t16 = t1.get$points(manifold);
          t15 = $.getInterceptor$asx(t16);
          t12 = t15.$index(t16, i).get$localPoint().storage;
          if (0 >= t12.length)
            throw $.ioore(0);
          t12 = t12[0];
          if (3 >= t11)
            throw $.ioore(3);
          t11 = t3[3];
          t16 = t15.$index(t16, i).get$localPoint().storage;
          if (1 >= t16.length)
            throw $.ioore(1);
          t16 = t16[1];
          if (1 >= t14)
            throw $.ioore(1);
          t4[1] = t9 + t13 * t12 + t11 * t16;
          t16 = t4[0];
          t11 = t7.length;
          if (0 >= t11)
            throw $.ioore(0);
          t12 = t7[0];
          t13 = t6.length;
          if (0 >= t13)
            throw $.ioore(0);
          t9 = t6[0];
          t14 = t4[1];
          if (1 >= t11)
            throw $.ioore(1);
          t11 = t7[1];
          if (1 >= t13)
            throw $.ioore(1);
          scalar = t5.$sub(radiusA, (t16 - t12) * t9 + (t14 - t11) * t6[1]);
          t11 = t6.length;
          if (0 >= t11)
            throw $.ioore(0);
          t14 = t6[0];
          if (typeof scalar !== "number")
            throw $.iae(scalar);
          t9 = t4.length;
          if (0 >= t9)
            throw $.ioore(0);
          t12 = t4[0];
          if (1 >= t11)
            throw $.ioore(1);
          t11 = t6[1];
          if (1 >= t9)
            throw $.ioore(1);
          t9 = t4[1];
          if (typeof radiusB !== "number")
            throw $.iae(radiusB);
          if (i >= t8.length)
            throw $.ioore(i);
          $.set$x$x(t8[i], (t14 * scalar + t12 + (-t14 * radiusB + t12)) * 0.5);
          if (i >= t8.length)
            throw $.ioore(i);
          $.set$y$x(t8[i], (t11 * scalar + t9 + (-t11 * radiusB + t9)) * 0.5);
          ++i;
        }
        return;
      case 2:
        t2 = xfB.rotation.storage;
        t3 = t2.length;
        if (0 >= t3)
          throw $.ioore(0);
        t4 = t2[0];
        t5 = manifold.get$localNormal().storage;
        t6 = t5.length;
        if (0 >= t6)
          throw $.ioore(0);
        t7 = t5[0];
        if (2 >= t3)
          throw $.ioore(2);
        t8 = t2[2];
        if (1 >= t6)
          throw $.ioore(1);
        t5 = t5[1];
        t6 = this.normal.storage;
        t9 = t6.length;
        if (0 >= t9)
          throw $.ioore(0);
        t6[0] = t4 * t7 + t8 * t5;
        t5 = t2[1];
        t8 = manifold.get$localNormal().storage;
        t7 = t8.length;
        if (0 >= t7)
          throw $.ioore(0);
        t4 = t8[0];
        if (3 >= t3)
          throw $.ioore(3);
        t3 = t2[3];
        if (1 >= t7)
          throw $.ioore(1);
        t8 = t8[1];
        if (1 >= t9)
          throw $.ioore(1);
        t6[1] = t5 * t4 + t3 * t8;
        v = manifold.get$localPoint();
        t8 = xfB.position.storage;
        t3 = t8.length;
        if (0 >= t3)
          throw $.ioore(0);
        t4 = t8[0];
        t5 = t2[0];
        t9 = v.storage;
        t7 = t9.length;
        if (0 >= t7)
          throw $.ioore(0);
        t10 = t9[0];
        t11 = t2[2];
        if (1 >= t7)
          throw $.ioore(1);
        t7 = t9[1];
        t12 = this.pool3.storage;
        t13 = t12.length;
        if (0 >= t13)
          throw $.ioore(0);
        t12[0] = t4 + t5 * t10 + t11 * t7;
        if (1 >= t3)
          throw $.ioore(1);
        t8 = t8[1];
        t3 = t2[1];
        t7 = t9[0];
        t2 = t2[3];
        t9 = t9[1];
        if (1 >= t13)
          throw $.ioore(1);
        t12[1] = t8 + t3 * t7 + t2 * t9;
        t2 = xfA.position.storage;
        t3 = xfA.rotation.storage;
        t4 = this.pool4.storage;
        t5 = $.getInterceptor$n(radiusB);
        t7 = this.points;
        i = 0;
        while (true) {
          t8 = manifold.get$pointCount();
          if (typeof t8 !== "number")
            throw $.iae(t8);
          t9 = t6.length;
          if (!(i < t8))
            break;
          t8 = t2.length;
          if (0 >= t8)
            throw $.ioore(0);
          t10 = t2[0];
          t11 = t3.length;
          if (0 >= t11)
            throw $.ioore(0);
          t13 = t3[0];
          t14 = t1.get$points(manifold);
          t15 = $.getInterceptor$asx(t14);
          t16 = t15.$index(t14, i).get$localPoint().storage;
          if (0 >= t16.length)
            throw $.ioore(0);
          t16 = t16[0];
          if (2 >= t11)
            throw $.ioore(2);
          t17 = t3[2];
          t14 = t15.$index(t14, i).get$localPoint().storage;
          if (1 >= t14.length)
            throw $.ioore(1);
          t14 = t14[1];
          t15 = t4.length;
          if (0 >= t15)
            throw $.ioore(0);
          t4[0] = t10 + t13 * t16 + t17 * t14;
          if (1 >= t8)
            throw $.ioore(1);
          t8 = t2[1];
          t14 = t3[1];
          t17 = t1.get$points(manifold);
          t16 = $.getInterceptor$asx(t17);
          t13 = t16.$index(t17, i).get$localPoint().storage;
          if (0 >= t13.length)
            throw $.ioore(0);
          t13 = t13[0];
          if (3 >= t11)
            throw $.ioore(3);
          t11 = t3[3];
          t17 = t16.$index(t17, i).get$localPoint().storage;
          if (1 >= t17.length)
            throw $.ioore(1);
          t17 = t17[1];
          if (1 >= t15)
            throw $.ioore(1);
          t4[1] = t8 + t14 * t13 + t11 * t17;
          t17 = t4[0];
          t11 = t12.length;
          if (0 >= t11)
            throw $.ioore(0);
          t13 = t12[0];
          if (0 >= t9)
            throw $.ioore(0);
          t14 = t6[0];
          t8 = t4[1];
          if (1 >= t11)
            throw $.ioore(1);
          t11 = t12[1];
          if (1 >= t9)
            throw $.ioore(1);
          scalar = t5.$sub(radiusB, (t17 - t13) * t14 + (t8 - t11) * t6[1]);
          t11 = t6.length;
          if (0 >= t11)
            throw $.ioore(0);
          t8 = t6[0];
          if (typeof scalar !== "number")
            throw $.iae(scalar);
          t14 = t4.length;
          if (0 >= t14)
            throw $.ioore(0);
          t13 = t4[0];
          if (1 >= t11)
            throw $.ioore(1);
          t11 = t6[1];
          if (1 >= t14)
            throw $.ioore(1);
          t14 = t4[1];
          if (typeof radiusA !== "number")
            throw $.iae(radiusA);
          if (i >= t7.length)
            throw $.ioore(i);
          $.set$x$x(t7[i], (-t8 * radiusA + t13 + (t8 * scalar + t13)) * 0.5);
          if (i >= t7.length)
            throw $.ioore(i);
          $.set$y$x(t7[i], (-t11 * radiusA + t14 + (t11 * scalar + t14)) * 0.5);
          ++i;
        }
        if (0 >= t9)
          throw $.ioore(0);
        t6[0] = -t6[0];
        if (1 >= t9)
          throw $.ioore(1);
        t6[1] = -t6[1];
        break;
      default:
    }
  },
  static: {
WorldManifold$: function() {
  var t1, t2, t3;
  t1 = new Float32Array(2);
  t2 = new Float32Array(2);
  t3 = new Float32Array(2);
  return new $.WorldManifold(new $.Vector2(t1), $.List_List$generate(2, new $.WorldManifold_closure(), true), new $.Vector2(t2), new $.Vector2(t3));
}}

},

WorldManifold_closure: {"": "Closure;",
  call$1: function(i) {
    return new $.Vector2(new Float32Array(2));
  }
},

Color3: {"": "Object;x*,y*,z",
  setFromRGBF$3: function(r, g, b) {
    var t1, truncated;
    t1 = Math.floor(r * 255);
    if (isNaN(t1))
      $.throwExpression(new $.UnsupportedError("NaN"));
    if (t1 == Infinity || t1 == -Infinity)
      $.throwExpression(new $.UnsupportedError("Infinity"));
    truncated = t1 < 0 ? Math.ceil(t1) : Math.floor(t1);
    t1 = truncated == -0.0 ? 0 : truncated;
    if (isNaN(t1))
      $.throwExpression(new $.UnsupportedError("NaN"));
    if (t1 == Infinity || t1 == -Infinity)
      $.throwExpression(new $.UnsupportedError("Infinity"));
    truncated = t1 < 0 ? Math.ceil(t1) : Math.floor(t1);
    this.x = truncated == -0.0 ? 0 : truncated;
    t1 = Math.floor(g * 255);
    if (isNaN(t1))
      $.throwExpression(new $.UnsupportedError("NaN"));
    if (t1 == Infinity || t1 == -Infinity)
      $.throwExpression(new $.UnsupportedError("Infinity"));
    truncated = t1 < 0 ? Math.ceil(t1) : Math.floor(t1);
    t1 = truncated == -0.0 ? 0 : truncated;
    if (isNaN(t1))
      $.throwExpression(new $.UnsupportedError("NaN"));
    if (t1 == Infinity || t1 == -Infinity)
      $.throwExpression(new $.UnsupportedError("Infinity"));
    truncated = t1 < 0 ? Math.ceil(t1) : Math.floor(t1);
    this.y = truncated == -0.0 ? 0 : truncated;
    t1 = Math.floor(b * 255);
    if (isNaN(t1))
      $.throwExpression(new $.UnsupportedError("NaN"));
    if (t1 == Infinity || t1 == -Infinity)
      $.throwExpression(new $.UnsupportedError("Infinity"));
    truncated = t1 < 0 ? Math.ceil(t1) : Math.floor(t1);
    t1 = truncated == -0.0 ? 0 : truncated;
    if (isNaN(t1))
      $.throwExpression(new $.UnsupportedError("NaN"));
    if (t1 == Infinity || t1 == -Infinity)
      $.throwExpression(new $.UnsupportedError("Infinity"));
    truncated = t1 < 0 ? Math.ceil(t1) : Math.floor(t1);
    this.z = truncated == -0.0 ? 0 : truncated;
  },
  $eq: function(_, other) {
    var t1;
    if (other == null)
      return false;
    if (typeof other === "object" && other !== null && !!$.getInterceptor(other).$isColor3)
      t1 = this.x === other.x && this.y === other.y && this.z === other.z;
    else
      t1 = false;
    return t1;
  },
  $isColor3: true,
  static: {
Color3$fromRGBF: function(r, g, b) {
  return new $.Color3(C.JSNumber_methods.toInt$0(C.JSNumber_methods.toInt$0(Math.floor(r * 255))), C.JSNumber_methods.toInt$0(C.JSNumber_methods.toInt$0(Math.floor(g * 255))), C.JSNumber_methods.toInt$0(C.JSNumber_methods.toInt$0(Math.floor(b * 255))));
}}

},

Sweep: {"": "Object;localCenter<,centerZero<,center<,angleZero<,angle<",
  $eq: function(_, other) {
    if (other == null)
      return false;
    return this.localCenter === other.get$localCenter() && this.centerZero === other.get$centerZero() && this.center === other.get$center() && $.$eq(this.angleZero, other.get$angleZero()) && $.$eq(this.angle, other.get$angle());
  },
  setFrom$1: function(other) {
    var t1, t2, t3;
    t1 = this.localCenter.storage;
    t2 = other.get$localCenter().storage;
    if (1 >= t2.length)
      throw $.ioore(1);
    t3 = t2[1];
    if (1 >= t1.length)
      throw $.ioore(1);
    t1[1] = t3;
    t1[0] = t2[0];
    t2 = this.centerZero.storage;
    t1 = other.get$centerZero().storage;
    if (1 >= t1.length)
      throw $.ioore(1);
    t3 = t1[1];
    if (1 >= t2.length)
      throw $.ioore(1);
    t2[1] = t3;
    t2[0] = t1[0];
    t1 = this.center.storage;
    t2 = other.get$center().storage;
    if (1 >= t2.length)
      throw $.ioore(1);
    t3 = t2[1];
    if (1 >= t1.length)
      throw $.ioore(1);
    t1[1] = t3;
    t1[0] = t2[0];
    this.angleZero = other.get$angleZero();
    this.angle = other.get$angle();
  },
  normalize$0: function() {
    var d = 6.283185307179586 * $.floor$0$n($.$div$n(this.angleZero, 6.283185307179586));
    this.angleZero = $.$sub$n(this.angleZero, d);
    this.angle = $.$sub$n(this.angle, d);
  },
  getTransform$2: function(xf, alpha) {
    var t1, t2, t3, t4, t5, t6, t7, t8, t9, t10;
    if (typeof alpha !== "number")
      throw $.iae(alpha);
    t1 = 1 - alpha;
    t2 = this.centerZero.storage;
    t3 = t2.length;
    if (0 >= t3)
      throw $.ioore(0);
    t4 = t2[0];
    t5 = this.center.storage;
    t6 = t5.length;
    if (0 >= t6)
      throw $.ioore(0);
    t7 = t5[0];
    t8 = xf.position.storage;
    t9 = t8.length;
    if (0 >= t9)
      throw $.ioore(0);
    t8[0] = t1 * t4 + alpha * t7;
    if (1 >= t3)
      throw $.ioore(1);
    t2 = t2[1];
    if (1 >= t6)
      throw $.ioore(1);
    t5 = t5[1];
    if (1 >= t9)
      throw $.ioore(1);
    t8[1] = t1 * t2 + alpha * t5;
    t5 = xf.rotation;
    t2 = this.angleZero;
    if (typeof t2 !== "number")
      throw $.iae(t2);
    t9 = this.angle;
    if (typeof t9 !== "number")
      throw $.iae(t9);
    t5.setRotation$1(t1 * t2 + alpha * t9);
    t9 = t8.length;
    if (0 >= t9)
      throw $.ioore(0);
    t2 = t8[0];
    t5 = t5.storage;
    t1 = t5.length;
    if (0 >= t1)
      throw $.ioore(0);
    t6 = t5[0];
    t3 = this.localCenter.storage;
    t7 = t3.length;
    if (0 >= t7)
      throw $.ioore(0);
    t4 = t3[0];
    if (2 >= t1)
      throw $.ioore(2);
    t10 = t5[2];
    if (1 >= t7)
      throw $.ioore(1);
    t8[0] = t2 - (t6 * t4 + t10 * t3[1]);
    if (1 >= t9)
      throw $.ioore(1);
    t9 = t8[1];
    t10 = t5[1];
    t4 = t3[0];
    if (3 >= t1)
      throw $.ioore(3);
    t8[1] = t9 - (t10 * t4 + t5[3] * t3[1]);
  },
  advance$1: function(time) {
    var t1, t2, t3, t4, t5, t6;
    if (typeof time !== "number")
      throw $.iae(time);
    t1 = 1 - time;
    t2 = this.centerZero.storage;
    t3 = t2.length;
    if (0 >= t3)
      throw $.ioore(0);
    t4 = t2[0];
    t5 = this.center.storage;
    t6 = t5.length;
    if (0 >= t6)
      throw $.ioore(0);
    t2[0] = t1 * t4 + time * t5[0];
    if (1 >= t3)
      throw $.ioore(1);
    t3 = t2[1];
    if (1 >= t6)
      throw $.ioore(1);
    t2[1] = t1 * t3 + time * t5[1];
    t5 = this.angleZero;
    if (typeof t5 !== "number")
      throw $.iae(t5);
    t3 = this.angle;
    if (typeof t3 !== "number")
      throw $.iae(t3);
    this.angleZero = t1 * t5 + time * t3;
  },
  static: {
Sweep$: function() {
  return new $.Sweep(new $.Vector2(new Float32Array(2)), new $.Vector2(new Float32Array(2)), new $.Vector2(new Float32Array(2)), 0, 0);
}}

},

Transform: {"": "Object;position>,rotation<",
  $eq: function(_, other) {
    if (other == null)
      return false;
    return this.position === $.get$position$x(other) && this.rotation === other.get$rotation();
  },
  setFrom$1: function(other) {
    var t1, t2, t3;
    t1 = $.get$position$x(other);
    t2 = this.position.storage;
    t3 = t1.get$storage();
    if (1 >= t3.length)
      throw $.ioore(1);
    t3 = t3[1];
    if (1 >= t2.length)
      throw $.ioore(1);
    t2[1] = t3;
    t1 = t1.get$storage();
    if (0 >= t1.length)
      throw $.ioore(0);
    t2[0] = t1[0];
    this.rotation.setFrom$1(other.get$rotation());
  },
  static: {
Transform$: function() {
  return new $.Transform(new $.Vector2(new Float32Array(2)), new $.Matrix2(new Float32Array(4)));
},

Transform_mulToOut: function(transform, vector, out) {
  var t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11;
  t1 = transform.position.storage;
  if (1 >= t1.length)
    throw $.ioore(1);
  t2 = t1[1];
  t3 = transform.rotation.storage;
  if (1 >= t3.length)
    throw $.ioore(1);
  t4 = t3[1];
  t5 = $.getInterceptor$x(vector);
  t6 = t5.get$x(vector);
  if (typeof t6 !== "number")
    throw $.iae(t6);
  if (3 >= t3.length)
    throw $.ioore(3);
  t7 = t3[3];
  t8 = t5.get$y(vector);
  if (typeof t8 !== "number")
    throw $.iae(t8);
  if (0 >= t1.length)
    throw $.ioore(0);
  t1 = t1[0];
  if (0 >= t3.length)
    throw $.ioore(0);
  t9 = t3[0];
  t10 = t5.get$x(vector);
  if (typeof t10 !== "number")
    throw $.iae(t10);
  if (2 >= t3.length)
    throw $.ioore(2);
  t3 = t3[2];
  t5 = t5.get$y(vector);
  if (typeof t5 !== "number")
    throw $.iae(t5);
  t11 = $.getInterceptor$x(out);
  t11.set$x(out, t1 + t9 * t10 + t3 * t5);
  t11.set$y(out, t2 + t4 * t6 + t7 * t8);
},

Transform_mulTransToOut: function(T, v, out) {
  var t1, t2, t3, t4, t5, v1x, v1y, bx, by, b1x, b1y;
  t1 = v.storage;
  t2 = t1.length;
  if (0 >= t2)
    throw $.ioore(0);
  t3 = t1[0];
  t4 = T.position.storage;
  t5 = t4.length;
  if (0 >= t5)
    throw $.ioore(0);
  v1x = t3 - t4[0];
  if (1 >= t2)
    throw $.ioore(1);
  t1 = t1[1];
  if (1 >= t5)
    throw $.ioore(1);
  v1y = t1 - t4[1];
  t4 = T.rotation.storage;
  t1 = t4.length;
  if (0 >= t1)
    throw $.ioore(0);
  bx = t4[0];
  if (1 >= t1)
    throw $.ioore(1);
  by = t4[1];
  if (2 >= t1)
    throw $.ioore(2);
  b1x = t4[2];
  if (3 >= t1)
    throw $.ioore(3);
  b1y = t4[3];
  t4 = out.storage;
  t1 = t4.length;
  if (0 >= t1)
    throw $.ioore(0);
  t4[0] = v1x * bx + v1y * by;
  if (1 >= t1)
    throw $.ioore(1);
  t4[1] = v1x * b1x + v1y * b1y;
}}

},

ViewportTransform: {"": "Object;center<",
  get$translation: function() {
    var result = new $.Vector2(new Float32Array(2));
    result.setFrom$1(this.extents);
    result.sub$1(this.center);
    return result;
  },
  getWorldToScreen$2: function(argWorld, argScreen) {
    var t1, t2, t3, gridCorrectedX, t4;
    t1 = $.getInterceptor$x(argWorld);
    t2 = $.$mul$n(t1.get$x(argWorld), this.scale);
    t3 = this.extents.storage;
    if (0 >= t3.length)
      throw $.ioore(0);
    gridCorrectedX = $.$add$ns(t2, t3[0]);
    if (1 >= t3.length)
      throw $.ioore(1);
    t3 = t3[1];
    t1 = $.$mul$n(t1.get$y(argWorld), this.scale);
    if (typeof t1 !== "number")
      throw $.iae(t1);
    t2 = this.get$translation().storage;
    if (0 >= t2.length)
      throw $.ioore(0);
    t2 = $.$add$ns(gridCorrectedX, t2[0]);
    t4 = this.get$translation().storage;
    if (1 >= t4.length)
      throw $.ioore(1);
    argScreen.setValues$2(t2, t3 - t1 + -t4[1]);
  }
},

Body: {"": "Object;world,flags@,contactList@,sleepTime@,userData@,_linearVelocity,_angularVelocity,mass<,invMass<,next@,prev@,fixtureList<,fixtureCount,jointList<,_force<,_torque@,_inertia,invInertia<,linearDamping<,angularDamping<,_type<,islandIndex?,originTransform<,sweep<,_fixDef,_pmd,_pxf,oldCenter,tempCenter",
  createFixture$1: function(def) {
    var fixture, t1;
    fixture = $.Fixture$();
    fixture.create$2(this, def);
    if ((this.flags & 32) === 32)
      fixture.createProxy$2(this.world._contactManager.broadPhase, this.originTransform);
    fixture.next = this.fixtureList;
    this.fixtureList = fixture;
    this.fixtureCount = this.fixtureCount + 1;
    fixture.body = this;
    t1 = fixture.density;
    if (t1 == null)
      throw t1.$gt();
    if (t1 > 0)
      this.resetMassData$0();
    t1 = this.world;
    t1._flags = (t1._flags | 1) >>> 0;
    return fixture;
  },
  createFixtureFromShape$2: function(shape, density) {
    var t1 = this._fixDef;
    t1.shape = shape;
    t1.density = density;
    return this.createFixture$1(t1);
  },
  createFixtureFromShape$1: function(shape) {
    return this.createFixtureFromShape$2(shape, 0);
  },
  get$position: function(_) {
    return this.originTransform.position;
  },
  get$angle: function() {
    return this.sweep.angle;
  },
  get$worldCenter: function() {
    return this.sweep.center;
  },
  get$localCenter: function() {
    return this.sweep.localCenter;
  },
  get$linearVelocity: function() {
    return this._linearVelocity;
  },
  set$linearVelocity: function(v) {
    if ($.$eq(this._type, 0))
      return;
    if (v.dot$1(v) > 0)
      this.set$awake(true);
    this._linearVelocity.setFrom$1(v);
  },
  get$angularVelocity: function() {
    return this._angularVelocity;
  },
  set$angularVelocity: function(w) {
    if (!$.$eq(this._type, 0)) {
      if ($.$gt$n($.$mul$n(w, w), 0))
        this.set$awake(true);
      this._angularVelocity = w;
    }
  },
  applyLinearImpulse$2: function(impulse, point) {
    var t1, t2, t3, t4, t5, t6, t7, t8, t9, t10;
    if (!$.$eq(this._type, 2))
      return;
    this.set$awake(true);
    t1 = this._linearVelocity.storage;
    t2 = t1.length;
    if (0 >= t2)
      throw $.ioore(0);
    t3 = t1[0];
    t4 = impulse.storage;
    t5 = t4.length;
    if (0 >= t5)
      throw $.ioore(0);
    t6 = t4[0];
    t7 = this.invMass;
    t1[0] = t3 + t6 * t7;
    if (1 >= t2)
      throw $.ioore(1);
    t2 = t1[1];
    if (1 >= t5)
      throw $.ioore(1);
    t1[1] = t2 + t4[1] * t7;
    t7 = this._angularVelocity;
    t2 = this.invInertia;
    t1 = point.storage;
    t5 = t1.length;
    if (0 >= t5)
      throw $.ioore(0);
    t6 = t1[0];
    t3 = this.sweep.center.storage;
    t8 = t3.length;
    if (0 >= t8)
      throw $.ioore(0);
    t9 = t3[0];
    t10 = t4[1];
    if (1 >= t5)
      throw $.ioore(1);
    t1 = t1[1];
    if (1 >= t8)
      throw $.ioore(1);
    this._angularVelocity = $.$add$ns(t7, t2 * ((t6 - t9) * t10 - (t1 - t3[1]) * t4[0]));
  },
  get$inertia: function() {
    var t1, t2, t3, t4, t5;
    t1 = this._inertia;
    t2 = this.mass;
    t3 = this.sweep.localCenter.storage;
    t4 = t3.length;
    if (0 >= t4)
      throw $.ioore(0);
    t5 = t3[0];
    if (1 >= t4)
      throw $.ioore(1);
    t3 = t3[1];
    return t1 + t2 * (t5 * t5 + t3 * t3);
  },
  getMassData$1: function(data) {
    var lc, t1, t2, t3, t4, t5;
    data.mass = this.mass;
    lc = this.sweep.localCenter;
    data.inertia = this._inertia + this.mass * lc.get$length2();
    t1 = lc.storage;
    t2 = t1.length;
    if (0 >= t2)
      throw $.ioore(0);
    t3 = t1[0];
    t4 = data.center.storage;
    t5 = t4.length;
    if (0 >= t5)
      throw $.ioore(0);
    t4[0] = t3;
    if (1 >= t2)
      throw $.ioore(1);
    t1 = t1[1];
    if (1 >= t5)
      throw $.ioore(1);
    t4[1] = t1;
  },
  resetMassData$0: function() {
    var t1, t2, t3, massData, f, t4, temp, t5, t6;
    this.mass = 0;
    this.invMass = 0;
    this._inertia = 0;
    this.invInertia = 0;
    t1 = this.sweep;
    t2 = t1.localCenter;
    t2.setZero$0();
    if ($.$eq(this._type, 0) || $.$eq(this._type, 1)) {
      t2 = this.originTransform.position;
      t1.center.setFrom$1(t2);
      t1.centerZero.setFrom$1(t2);
      return;
    }
    t3 = this.tempCenter;
    t3.setZero$0();
    massData = this._pmd;
    for (f = this.fixtureList, t4 = massData.center.storage; f != null; f = f.get$next()) {
      if (f.get$density() === 0)
        continue;
      f.getMassData$1(massData);
      this.mass = this.mass + massData.mass;
      temp = new $.Vector2(new Float32Array(2));
      t5 = temp.storage;
      if (1 >= t4.length)
        throw $.ioore(1);
      t6 = t4[1];
      if (1 >= t5.length)
        throw $.ioore(1);
      t5[1] = t6;
      t5[0] = t4[0];
      t6 = massData.mass;
      t5[1] = t5[1] * t6;
      t5[0] = t5[0] * t6;
      t3.add$1(t3, temp);
      this._inertia = this._inertia + massData.inertia;
    }
    t4 = this.mass;
    if (t4 > 0) {
      this.invMass = 1 / t4;
      t3.scale$1(t3, this.invMass);
    } else {
      this.mass = 1;
      this.invMass = 1;
    }
    t4 = this._inertia;
    if (t4 > 0 && (this.flags & 16) === 0) {
      this._inertia = t4 - this.mass * t3.dot$1(t3);
      this.invInertia = 1 / this._inertia;
    } else {
      this._inertia = 0;
      this.invInertia = 0;
    }
    t4 = this.oldCenter;
    t5 = t1.center;
    t4.setFrom$1(t5);
    t2.setFrom$1(t3);
    t1 = t1.centerZero;
    $.Transform_mulToOut(this.originTransform, t2, t1);
    t5.setFrom$1(t1);
    temp = new $.Vector2(new Float32Array(2));
    temp.setFrom$1(t5);
    temp.sub$1(t4);
    $.Vector2_crossVectorAndNumToOut(temp, $.$negate$n(this._angularVelocity), temp);
    t4 = this._linearVelocity;
    t4.add$1(t4, temp);
  },
  getWorldPoint$1: function(localPoint) {
    var v = new $.Vector2(new Float32Array(2));
    $.Transform_mulToOut(this.originTransform, localPoint, v);
    return v;
  },
  getWorldPointToOut$2: function(localPoint, out) {
    $.Transform_mulToOut(this.originTransform, localPoint, out);
  },
  getWorldVector2$1: function(localVector) {
    var out = new $.Vector2(new Float32Array(2));
    this.originTransform.rotation.transformed$2(localVector, out);
    return out;
  },
  getWorldVectorToOut$2: function(localVector, out) {
    this.originTransform.rotation.transformed$2(localVector, out);
  },
  get$type: function(_) {
    return this._type;
  },
  set$type: function(_, otherType) {
    var ce;
    if ($.$eq(this._type, otherType))
      return;
    this._type = otherType;
    this.resetMassData$0();
    if ($.$eq(this._type, 0)) {
      this._linearVelocity.setZero$0();
      this._angularVelocity = 0;
    }
    this.set$awake(true);
    this._force.setZero$0();
    this._torque = 0;
    for (ce = this.contactList; ce != null; ce = ce.get$next())
      ce.get$contact().flagForFiltering$0();
  },
  get$bullet: function() {
    return (this.flags & 8) === 8;
  },
  set$awake: function(flag) {
    var t1;
    if (flag) {
      t1 = this.flags;
      if ((t1 & 2) === 0) {
        this.flags = (t1 | 2) >>> 0;
        this.sleepTime = 0;
      }
    } else {
      this.flags = (this.flags & 4294967293) >>> 0;
      this.sleepTime = 0;
      this._linearVelocity.setZero$0();
      this._angularVelocity = 0;
      this._force.setZero$0();
      this._torque = 0;
    }
  },
  get$awake: function() {
    return (this.flags & 2) === 2;
  },
  get$active: function() {
    return (this.flags & 32) === 32;
  },
  synchronizeFixtures$0: function() {
    var xf1, t1, t2, out, t3, t4, t5, out0, broadPhase, f;
    xf1 = this._pxf;
    t1 = xf1.rotation;
    t2 = this.sweep;
    t1.setRotation$1(t2.angleZero);
    out = xf1.position;
    t3 = t2.localCenter.storage;
    t4 = out.storage;
    if (1 >= t3.length)
      throw $.ioore(1);
    t5 = t3[1];
    if (1 >= t4.length)
      throw $.ioore(1);
    t4[1] = t5;
    t4[0] = t3[0];
    out0 = out;
    t1.transform$1(t1, out0);
    t1 = out.storage;
    if (1 >= t1.length)
      throw $.ioore(1);
    t1[1] = t1[1] * -1;
    t1[0] = t1[0] * -1;
    out.add$1(out, t2.centerZero);
    broadPhase = this.world._contactManager.broadPhase;
    for (f = this.fixtureList, t1 = this.originTransform; f != null; f = f.get$next())
      f.synchronize$3(broadPhase, xf1, t1);
  },
  synchronizeTransform$0: function() {
    var t1, t2, c, s, t, r, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12;
    t1 = this.sweep;
    t2 = t1.angle;
    if (typeof t2 !== "number")
      $.throwExpression(new $.ArgumentError(t2));
    c = Math.cos(t2);
    t2 = t1.angle;
    if (typeof t2 !== "number")
      $.throwExpression(new $.ArgumentError(t2));
    s = Math.sin(t2);
    t = this.originTransform;
    r = t.rotation;
    r.setValues$4(c, s, -s, c);
    t2 = r.storage;
    t3 = t2.length;
    if (0 >= t3)
      throw $.ioore(0);
    t4 = t2[0];
    t5 = t1.localCenter.storage;
    t6 = t5.length;
    if (0 >= t6)
      throw $.ioore(0);
    t7 = t5[0];
    if (2 >= t3)
      throw $.ioore(2);
    t8 = t2[2];
    if (1 >= t6)
      throw $.ioore(1);
    t6 = t5[1];
    t1 = t1.center.storage;
    t9 = t1.length;
    if (0 >= t9)
      throw $.ioore(0);
    t10 = t1[0];
    t11 = t.position.storage;
    t12 = t11.length;
    if (0 >= t12)
      throw $.ioore(0);
    t11[0] = (t4 * t7 + t8 * t6) * -1 + t10;
    t10 = t2[1];
    t6 = t5[0];
    if (3 >= t3)
      throw $.ioore(3);
    t2 = t2[3];
    t5 = t5[1];
    if (1 >= t9)
      throw $.ioore(1);
    t1 = t1[1];
    if (1 >= t12)
      throw $.ioore(1);
    t11[1] = (t10 * t6 + t2 * t5) * -1 + t1;
  },
  shouldCollide$1: function(other) {
    var t1 = this._type;
    if (typeof t1 !== "number")
      return this.shouldCollide$1$bailout(1, other, t1);
    if (t1 !== 2) {
      t1 = other.get$_type();
      if (typeof t1 !== "number")
        return this.shouldCollide$1$bailout(2, 0, t1);
      t1 = t1 !== 2;
    } else
      t1 = false;
    return !t1;
  },
  shouldCollide$1$bailout: function(state0, other, t1) {
    switch (state0) {
      case 0:
        t1 = this._type;
      case 1:
        state0 = 0;
      case 2:
        if (state0 === 2 || state0 === 0 && !$.$eq(t1, 2))
          switch (state0) {
            case 0:
              t1 = other.get$_type();
            case 2:
              state0 = 0;
              t1 = !$.$eq(t1, 2);
          }
        else
          t1 = false;
        return !t1;
    }
  },
  advance$1: function(t) {
    var t1 = this.sweep;
    t1.advance$1(t);
    t1.center.setFrom$1(t1.centerZero);
    t1.angle = t1.angleZero;
    this.synchronizeTransform$0();
  },
  Body$2: function(bd, world) {
    var t1, t2, t3, t4;
    if (bd.bullet)
      this.flags = (this.flags | 8) >>> 0;
    if (bd.fixedRotation)
      this.flags = (this.flags | 16) >>> 0;
    if (bd.allowSleep)
      this.flags = (this.flags | 4) >>> 0;
    if (bd.awake)
      this.flags = (this.flags | 2) >>> 0;
    if (bd.active)
      this.flags = (this.flags | 32) >>> 0;
    t1 = this.originTransform;
    t1.position.setFrom$1(bd.position);
    t1.rotation.setRotation$1(bd.angle);
    t2 = this.sweep;
    t3 = t2.localCenter;
    t3.setZero$0();
    t4 = t2.centerZero;
    $.Transform_mulToOut(t1, t3, t4);
    t2.center.setFrom$1(t4);
    t2.angle = bd.angle;
    t2.angleZero = bd.angle;
    if ($.$eq(this._type, 2)) {
      this.mass = 1;
      this.invMass = 1;
    } else {
      this.mass = 0;
      this.invMass = 0;
    }
  },
  static: {
"": "Body_ISLAND_FLAG,Body_AWAKE_FLAG,Body_AUTO_SLEEP_FLAG,Body_BULLET_FLAG,Body_FIXED_ROTATION_FLAG,Body_ACTIVE_FLAG,Body_TO_I_FLAG",
Body$: function(bd, world) {
  var t1, t2, t3, t4, t5, t6, t7, t8, t9, t10;
  t1 = $.Transform$();
  t2 = $.Sweep$();
  t3 = new $.Vector2(new Float32Array(2));
  t3.setFrom$1(bd.linearVelocity);
  t4 = new Float32Array(2);
  t5 = bd.userData;
  t6 = $.FixtureDef$();
  t7 = $.MassData$();
  t8 = $.Transform$();
  t9 = new Float32Array(2);
  t10 = new Float32Array(2);
  t10 = new $.Body(world, 0, null, 0, t5, t3, 0, null, null, null, null, null, 0, null, new $.Vector2(t4), 0, 0, 0, bd.linearDamping, bd.angularDamping, bd.type, null, t1, t2, t6, t7, t8, new $.Vector2(t9), new $.Vector2(t10));
  t10.Body$2(bd, world);
  return t10;
}}

},

BodyDef: {"": "Object;type*,angle<,userData@,position>,linearVelocity<,angularVelocity@,fixedRotation,isSleeping,bullet<,allowSleep,linearDamping<,angularDamping<,awake@,active<", static: {
BodyDef$: function() {
  return new $.BodyDef(0, 0, null, new $.Vector2(new Float32Array(2)), new $.Vector2(new Float32Array(2)), 0, false, null, false, true, 0, 0, true, true);
}}
},

ContactManager: {"": "Object;broadPhase,contactList<,contactCount,contactFilter,contactListener,pool",
  _addPair$2: function(fixtureA, fixtureB) {
    var bodyA, bodyB, edge, t1, fA, fB, c;
    bodyA = $.get$body$x(fixtureA);
    bodyB = $.get$body$x(fixtureB);
    if (bodyA == null ? bodyB == null : bodyA === bodyB)
      return;
    edge = bodyB.get$contactList();
    for (; edge != null;) {
      t1 = edge.get$other();
      if (t1 == null ? bodyA == null : t1 === bodyA) {
        t1 = edge.get$contact();
        fA = t1.get$fixtureA();
        fB = t1.get$fixtureB();
        t1 = $.getInterceptor(fA);
        if (t1.$eq(fA, fixtureA) && $.$eq(fB, fixtureB))
          return;
        if (t1.$eq(fA, fixtureB) && $.$eq(fB, fixtureA))
          return;
      }
      edge = edge.get$next();
    }
    if (!bodyB.shouldCollide$1(bodyA))
      return;
    if (!this.contactFilter.shouldCollide$2(fixtureA, fixtureB))
      return;
    c = this.pool.popContact$2(fixtureA, fixtureB);
    fixtureA = c.get$fixtureA();
    fixtureB = c.get$fixtureB();
    bodyA = $.get$body$x(fixtureA);
    bodyB = $.get$body$x(fixtureB);
    c.set$prev(null);
    c.set$next(this.contactList);
    t1 = this.contactList;
    if (t1 != null)
      t1.set$prev(c);
    this.contactList = c;
    c.get$edge1().contact = c;
    c.get$edge1().other = bodyB;
    c.get$edge1().prev = null;
    c.get$edge1().next = bodyA.get$contactList();
    t1 = bodyA.get$contactList();
    if (t1 != null)
      t1.set$prev(c.get$edge1());
    bodyA.set$contactList(c.get$edge1());
    c.get$edge2().contact = c;
    c.get$edge2().other = bodyA;
    c.get$edge2().prev = null;
    c.get$edge2().next = bodyB.get$contactList();
    t1 = bodyB.get$contactList();
    if (t1 != null)
      t1.set$prev(c.get$edge2());
    bodyB.set$contactList(c.get$edge2());
    this.contactCount = this.contactCount + 1;
  },
  get$_addPair: function() {
    return new $.BoundClosure$2(this, "_addPair$2", null);
  },
  destroy$1: function(c) {
    var fixtureA, fixtureB, bodyA, bodyB, t1, t2;
    fixtureA = c.get$fixtureA();
    fixtureB = c.get$fixtureB();
    bodyA = $.get$body$x(fixtureA);
    bodyB = $.get$body$x(fixtureB);
    t1 = this.contactListener;
    if (t1 != null && c.get$touching())
      t1.endContact$1;
    t1 = c.get$prev();
    if (t1 != null)
      t1.set$next(c.get$next());
    if (c.get$next() != null)
      c.get$next().set$prev(c.get$prev());
    if ($.$eq(c, this.contactList))
      this.contactList = c.get$next();
    t1 = c.get$edge1();
    t2 = t1.prev;
    if (t2 != null)
      t2.set$next(t1.next);
    t1 = c.get$edge1();
    t2 = t1.next;
    if (t2 != null)
      t2.set$prev(t1.prev);
    t1 = c.get$edge1();
    if (t1 === bodyA.get$contactList())
      bodyA.set$contactList(t1.next);
    t1 = c.get$edge2();
    t2 = t1.prev;
    if (t2 != null)
      t2.set$next(t1.next);
    t1 = c.get$edge2();
    t2 = t1.next;
    if (t2 != null)
      t2.set$prev(t1.prev);
    t1 = c.get$edge2();
    if (t1 === bodyB.get$contactList())
      bodyB.set$contactList(t1.next);
    this.pool.pushContact$1(c);
    this.contactCount = this.contactCount - 1;
  },
  collide$0: function() {
    var c, t1, fixtureA, fixtureB, bodyA, bodyB, t2, c0, proxyIdA, proxyIdB;
    c = this.contactList;
    for (t1 = this.contactFilter; c != null;) {
      fixtureA = c.get$fixtureA();
      fixtureB = c.get$fixtureB();
      bodyA = $.get$body$x(fixtureA);
      bodyB = $.get$body$x(fixtureB);
      if (!bodyA.get$awake() && !bodyB.get$awake()) {
        c = c.get$next();
        continue;
      }
      t2 = c.get$flags();
      if (t2 == null)
        throw t2.$and();
      if ((t2 & 8) === 8) {
        if (!bodyB.shouldCollide$1(bodyA)) {
          c0 = c.get$next();
          this.destroy$1(c);
          c = c0;
          continue;
        }
        if (!t1.shouldCollide$2(fixtureA, fixtureB)) {
          c0 = c.get$next();
          this.destroy$1(c);
          c = c0;
          continue;
        }
        t2 = c.get$flags();
        if (t2 == null)
          throw t2.$and();
        c.set$flags((t2 & 4294967287) >>> 0);
      }
      proxyIdA = fixtureA.get$proxy();
      proxyIdB = fixtureB.get$proxy();
      if (!$.AxisAlignedBox_testOverlap(proxyIdA.get$box(), proxyIdB.get$box())) {
        c0 = c.get$next();
        this.destroy$1(c);
        c = c0;
        continue;
      }
      c.update$1(this.contactListener);
      c = c.get$next();
    }
  },
  static: {
ContactManager$: function(argPool) {
  return new $.ContactManager($.BroadPhase$(), null, 0, new $.ContactFilter(), null, argPool);
}}

},

CircleContact: {"": "Contact;flags,prev,next,edge1,edge2,fixtureA,fixtureB,manifold,toiCount,pool,_oldManifold",
  init$2: function(fA, fB) {
    $.Contact.prototype.init$2.call(this, fA, fB);
  },
  evaluate$3: function(argManifold, xfA, xfB) {
    this.pool.collision.collideCircles$5(argManifold, $.get$shape$x(this.fixtureA), xfA, $.get$shape$x(this.fixtureB), xfB);
  }
},

Contact: {"": "Object;flags@,prev@,next@,edge1<,edge2<,fixtureA<,fixtureB<,manifold@,toiCount@",
  init$2: function(fixA, fixB) {
    var t1;
    this.flags = 0;
    this.fixtureA = fixA;
    this.fixtureB = fixB;
    this.manifold.set$pointCount(0);
    this.prev = null;
    this.next = null;
    t1 = this.edge1;
    t1.contact = null;
    t1.prev = null;
    t1.next = null;
    t1.other = null;
    t1 = this.edge2;
    t1.contact = null;
    t1.prev = null;
    t1.next = null;
    t1.other = null;
    this.toiCount = 0;
  },
  get$touching: function() {
    var t1 = this.flags;
    if (t1 == null)
      return this.get$touching$bailout(1, t1);
    return (t1 & 2) === 2;
  },
  get$touching$bailout: function(state0, t1) {
    if (t1 == null)
      throw t1.$and();
    return (t1 & 2) === 2;
  },
  get$enabled: function() {
    var t1 = this.flags;
    if (t1 == null)
      return this.get$enabled$bailout(1, t1);
    return (t1 & 4) === 4;
  },
  get$enabled$bailout: function(state0, t1) {
    if (t1 == null)
      throw t1.$and();
    return (t1 & 4) === 4;
  },
  flagForFiltering$0: function() {
    var t1 = this.flags;
    if (t1 == null)
      return this.flagForFiltering$0$bailout(1, t1);
    this.flags = (t1 | 8) >>> 0;
  },
  flagForFiltering$0$bailout: function(state0, t1) {
    if (t1 == null)
      throw t1.$or();
    this.flags = (t1 | 8) >>> 0;
  },
  update$1: function(listener) {
    var t1, t2, wasTouching, sensorA, t3, sensorB, sensor, t4, bodyA, t5, bodyB, xfA, xfB, shapeA, shapeB, touching, i, mp2, id2, j, mp1;
    t1 = this._oldManifold;
    t1.setFrom$1(this.manifold);
    t2 = this.flags;
    if (t2 == null)
      return this.update$1$bailout(1, listener, t2, t1);
    this.flags = (t2 | 4) >>> 0;
    t2 = this.flags;
    if (t2 == null)
      return this.update$1$bailout(2, listener, t2, t1);
    wasTouching = (t2 & 2) === 2;
    t2 = this.fixtureA;
    sensorA = t2.get$isSensor();
    t3 = this.fixtureB;
    sensorB = t3.get$isSensor();
    sensor = sensorA === true || sensorB === true;
    t4 = $.getInterceptor$x(t2);
    bodyA = t4.get$body(t2);
    t5 = $.getInterceptor$x(t3);
    bodyB = t5.get$body(t3);
    xfA = bodyA.get$originTransform();
    xfB = bodyB.get$originTransform();
    if (sensor) {
      shapeA = t4.get$shape(t2);
      shapeB = t5.get$shape(t3);
      touching = this.pool.collision.testOverlap$4(shapeA, shapeB, xfA, xfB);
      this.manifold.set$pointCount(0);
    } else {
      this.evaluate$3(this.manifold, xfA, xfB);
      t2 = this.manifold.get$pointCount();
      if (typeof t2 !== "number")
        return this.update$1$bailout(3, listener, t2, t1, bodyA, bodyB, wasTouching, sensor);
      touching = t2 > 0;
      t2 = t1.points;
      t3 = t2.length;
      i = 0;
      while (true) {
        t4 = this.manifold;
        t5 = t4.get$pointCount();
        if (typeof t5 !== "number")
          throw $.iae(t5);
        if (!(i < t5))
          break;
        t4 = $.get$points$x(t4);
        if (typeof t4 !== "object" || t4 === null || (t4.constructor !== Array || !!t4.immutable$list) && !$.isJsIndexable(t4, t4[$.dispatchPropertyName]))
          return this.update$1$bailout(4, listener, t2, t1, bodyA, bodyB, wasTouching, sensor, t3, touching, t4, i);
        if (i >= t4.length)
          throw $.ioore(i);
        mp2 = t4[i];
        mp2.set$normalImpulse(0);
        mp2.set$tangentImpulse(0);
        id2 = $.get$id$x(mp2);
        j = 0;
        while (true) {
          t4 = t1.pointCount;
          if (typeof t4 !== "number")
            throw $.iae(t4);
          if (!(j < t4))
            break;
          if (j >= t3)
            throw $.ioore(j);
          mp1 = t2[j];
          if ($.get$id$x(mp1).isEqual$1(id2)) {
            mp2.set$normalImpulse(mp1.get$normalImpulse());
            mp2.set$tangentImpulse(mp1.get$tangentImpulse());
            break;
          }
          ++j;
        }
        ++i;
      }
      if (touching !== wasTouching) {
        bodyA.set$awake(true);
        bodyB.set$awake(true);
      }
    }
    t1 = this.flags;
    if (t1 == null)
      return this.update$1$bailout(5, listener, 0, t1, 0, 0, wasTouching, sensor, 0, touching);
    if (touching)
      this.flags = (t1 | 2) >>> 0;
    else
      this.flags = (t1 & 4294967293) >>> 0;
    if (listener == null)
      return;
    if (!wasTouching && touching)
      listener.beginContact$1(this);
    if (wasTouching && !touching)
      listener.endContact$1;
    if (!sensor && touching)
      listener.preSolve$2;
  },
  update$1$bailout: function(state0, listener, t2, t1, bodyA, bodyB, wasTouching, sensor, t3, touching, t4, i) {
    switch (state0) {
      case 0:
        t1 = this._oldManifold;
        t1.setFrom$1(this.manifold);
        t2 = this.flags;
      case 1:
        state0 = 0;
        if (t2 == null)
          throw t2.$or();
        this.flags = (t2 | 4) >>> 0;
        t2 = this.flags;
      case 2:
        state0 = 0;
        if (t2 == null)
          throw t2.$and();
        wasTouching = (t2 & 2) === 2;
        t2 = this.fixtureA;
        sensorA = t2.get$isSensor();
        t3 = this.fixtureB;
        sensorB = t3.get$isSensor();
        sensor = sensorA === true || sensorB === true;
        t4 = $.getInterceptor$x(t2);
        bodyA = t4.get$body(t2);
        t5 = $.getInterceptor$x(t3);
        bodyB = t5.get$body(t3);
        xfA = bodyA.get$originTransform();
        xfB = bodyB.get$originTransform();
      default:
        if (state0 === 0 && sensor) {
          shapeA = t4.get$shape(t2);
          shapeB = t5.get$shape(t3);
          touching = this.pool.collision.testOverlap$4(shapeA, shapeB, xfA, xfB);
          this.manifold.set$pointCount(0);
        } else
          switch (state0) {
            case 0:
              this.evaluate$3(this.manifold, xfA, xfB);
              t2 = this.manifold.get$pointCount();
            case 3:
              state0 = 0;
              touching = $.$gt$n(t2, 0);
              t2 = t1.points;
              t3 = t2.length;
              i = 0;
            case 4:
              L0:
                while (true)
                  switch (state0) {
                    case 0:
                      t4 = this.manifold;
                      t5 = t4.get$pointCount();
                      if (typeof t5 !== "number")
                        throw $.iae(t5);
                      if (!(i < t5))
                        break L0;
                      t4 = $.get$points$x(t4);
                    case 4:
                      state0 = 0;
                      mp2 = $.$index$asx(t4, i);
                      mp2.set$normalImpulse(0);
                      mp2.set$tangentImpulse(0);
                      id2 = $.get$id$x(mp2);
                      j = 0;
                      while (true) {
                        t4 = t1.pointCount;
                        if (typeof t4 !== "number")
                          throw $.iae(t4);
                        if (!(j < t4))
                          break;
                        if (j >= t3)
                          throw $.ioore(j);
                        mp1 = t2[j];
                        if ($.get$id$x(mp1).isEqual$1(id2)) {
                          mp2.set$normalImpulse(mp1.get$normalImpulse());
                          mp2.set$tangentImpulse(mp1.get$tangentImpulse());
                          break;
                        }
                        ++j;
                      }
                      ++i;
                  }
              if (touching !== wasTouching) {
                bodyA.set$awake(true);
                bodyB.set$awake(true);
              }
          }
        t1 = this.flags;
      case 5:
        var sensorA, sensorB, t5, xfA, xfB, shapeA, shapeB, mp2, id2, j, mp1;
        state0 = 0;
        if (touching) {
          if (t1 == null)
            throw t1.$or();
          this.flags = (t1 | 2) >>> 0;
        } else {
          if (t1 == null)
            throw t1.$and();
          this.flags = (t1 & 4294967293) >>> 0;
        }
        if (listener == null)
          return;
        if (!wasTouching && touching)
          listener.beginContact$1(this);
        if (wasTouching && !touching)
          listener.endContact$1;
        if (!sensor && touching)
          listener.preSolve$2;
    }
  }
},

ContactConstraint: {"": "Object;points>,localNormal<,localPoint<,normal<,normalMass<,K<,bodyA@,bodyB@,type*,radius@,friction@,restitution@,pointCount@,manifold@",
  setFrom$1: function(cp) {
    var t1, t2, t3, i, t4;
    this.pointCount = cp.get$pointCount();
    t1 = this.localNormal.storage;
    t2 = cp.get$localNormal().storage;
    if (1 >= t2.length)
      throw $.ioore(1);
    t3 = t2[1];
    if (1 >= t1.length)
      throw $.ioore(1);
    t1[1] = t3;
    t1[0] = t2[0];
    t2 = this.localPoint.storage;
    t1 = cp.get$localPoint().storage;
    if (1 >= t1.length)
      throw $.ioore(1);
    t3 = t1[1];
    if (1 >= t2.length)
      throw $.ioore(1);
    t2[1] = t3;
    t2[0] = t1[0];
    t1 = this.normal.storage;
    t2 = cp.get$normal().storage;
    if (1 >= t2.length)
      throw $.ioore(1);
    t3 = t2[1];
    if (1 >= t1.length)
      throw $.ioore(1);
    t1[1] = t3;
    t1[0] = t2[0];
    this.normalMass.setFrom$1(cp.get$normalMass());
    this.K.setFrom$1(cp.get$K());
    this.bodyA = cp.get$bodyA();
    this.bodyB = cp.get$bodyB();
    t2 = $.getInterceptor$x(cp);
    this.type = t2.get$type(cp);
    this.radius = cp.get$radius();
    this.friction = cp.get$friction();
    this.restitution = cp.get$restitution();
    this.manifold = cp.get$manifold();
    t1 = this.points;
    i = 0;
    while (true) {
      t3 = cp.get$pointCount();
      if (typeof t3 !== "number")
        throw $.iae(t3);
      if (!(i < t3))
        break;
      if (i >= t1.length)
        throw $.ioore(i);
      t3 = t1[i];
      t4 = t2.get$points(cp);
      if (typeof t4 !== "object" || t4 === null || (t4.constructor !== Array || !!t4.immutable$list) && !$.isJsIndexable(t4, t4[$.dispatchPropertyName]))
        return this.setFrom$1$bailout(1, cp, t1, t3, i, t2, t4);
      if (i >= t4.length)
        throw $.ioore(i);
      t3.setFrom$1(t4[i]);
      ++i;
    }
  },
  setFrom$1$bailout: function(state0, cp, t1, t3, i, t2, t4) {
    switch (state0) {
      case 0:
        this.pointCount = cp.get$pointCount();
        t1 = this.localNormal.storage;
        t2 = cp.get$localNormal().storage;
        if (1 >= t2.length)
          throw $.ioore(1);
        t3 = t2[1];
        if (1 >= t1.length)
          throw $.ioore(1);
        t1[1] = t3;
        t1[0] = t2[0];
        t2 = this.localPoint.storage;
        t1 = cp.get$localPoint().storage;
        if (1 >= t1.length)
          throw $.ioore(1);
        t3 = t1[1];
        if (1 >= t2.length)
          throw $.ioore(1);
        t2[1] = t3;
        t2[0] = t1[0];
        t1 = this.normal.storage;
        t2 = cp.get$normal().storage;
        if (1 >= t2.length)
          throw $.ioore(1);
        t3 = t2[1];
        if (1 >= t1.length)
          throw $.ioore(1);
        t1[1] = t3;
        t1[0] = t2[0];
        this.normalMass.setFrom$1(cp.get$normalMass());
        this.K.setFrom$1(cp.get$K());
        this.bodyA = cp.get$bodyA();
        this.bodyB = cp.get$bodyB();
        t2 = $.getInterceptor$x(cp);
        this.type = t2.get$type(cp);
        this.radius = cp.get$radius();
        this.friction = cp.get$friction();
        this.restitution = cp.get$restitution();
        this.manifold = cp.get$manifold();
        t1 = this.points;
        i = 0;
      case 1:
        L0:
          while (true)
            switch (state0) {
              case 0:
                t3 = cp.get$pointCount();
                if (typeof t3 !== "number")
                  throw $.iae(t3);
                if (!(i < t3))
                  break L0;
                if (i >= t1.length)
                  throw $.ioore(i);
                t3 = t1[i];
                t4 = t2.get$points(cp);
              case 1:
                state0 = 0;
                t3.setFrom$1($.$index$asx(t4, i));
                ++i;
            }
    }
  },
  toString$0: function(_) {
    return "localNormal: \"" + $.S(this.localNormal) + "\", localPoint: \"" + $.S(this.localPoint) + "\" normal: \"" + $.S(this.normal) + "\", radius: \"" + $.S(this.radius) + "\" friction: \"" + $.S(this.friction) + "\" restitution: \"" + $.S(this.restitution) + "\", pointCount: \"" + $.S(this.pointCount) + "\"";
  },
  static: {
ContactConstraint$: function() {
  return new $.ContactConstraint($.List_List$generate(2, new $.ContactConstraint_closure(), true), new $.Vector2(new Float32Array(2)), new $.Vector2(new Float32Array(2)), new $.Vector2(new Float32Array(2)), new $.Matrix2(new Float32Array(4)), new $.Matrix2(new Float32Array(4)), null, null, null, null, null, null, 0, null);
}}

},

ContactConstraint_closure: {"": "Closure;",
  call$1: function(i) {
    return $.ContactConstraintPoint$();
  }
},

ContactConstraintPoint: {"": "Object;localPoint<,rA<,rB<,normalImpulse@,tangentImpulse@,normalMass@,tangentMass@,velocityBias@",
  setFrom$1: function(cp) {
    var t1, t2, t3;
    t1 = this.localPoint.storage;
    t2 = cp.get$localPoint().storage;
    if (1 >= t2.length)
      throw $.ioore(1);
    t3 = t2[1];
    if (1 >= t1.length)
      throw $.ioore(1);
    t1[1] = t3;
    t1[0] = t2[0];
    t2 = this.rA.storage;
    t1 = cp.get$rA().storage;
    if (1 >= t1.length)
      throw $.ioore(1);
    t3 = t1[1];
    if (1 >= t2.length)
      throw $.ioore(1);
    t2[1] = t3;
    t2[0] = t1[0];
    t1 = this.rB.storage;
    t2 = cp.get$rB().storage;
    if (1 >= t2.length)
      throw $.ioore(1);
    t3 = t2[1];
    if (1 >= t1.length)
      throw $.ioore(1);
    t1[1] = t3;
    t1[0] = t2[0];
    this.normalImpulse = cp.get$normalImpulse();
    this.tangentImpulse = cp.get$tangentImpulse();
    this.normalMass = cp.get$normalMass();
    this.tangentMass = cp.get$tangentMass();
    this.velocityBias = cp.get$velocityBias();
  },
  toString$0: function(_) {
    return "normal impulse: " + $.S(this.normalImpulse) + ", tangentImpulse: " + $.S(this.tangentImpulse) + ", normalMass: " + $.S(this.normalMass) + ", tangentMass: " + $.S(this.tangentMass) + ", velocityBias: " + $.S(this.velocityBias) + ", localPoint: " + $.S(this.localPoint) + ", rA: " + $.S(this.rA) + ", rB: " + $.S(this.rB);
  },
  static: {
ContactConstraintPoint$: function() {
  return new $.ContactConstraintPoint(new $.Vector2(new Float32Array(2)), new $.Vector2(new Float32Array(2)), new $.Vector2(new Float32Array(2)), 0, 0, 0, 0, 0);
}}

},

ContactEdge: {"": "Object;other<,contact<,prev@,next@"},

ContactRegister: {"": "Object;creator<,primary<"},

ContactSolver: {"": "Object;constraints,constraintCount,worldManifold,tangent,temp1,temp2,P,dv,dv1,dv2,x>,d,P1,P2,psolver,rA<,rB<",
  init$3: function(contacts, contactCount, impulseRatio) {
    var t1, t2, t3, i, t4, t5, t6, t7, contact, fixtureA, fixtureB, shapeA, t8, shapeB, radiusA, radiusB, bodyA, bodyB, manifold, friction, restitution, restitution0, vA, vB, wA, wB, cc, t9, t10, t11, t12, t13, j, t14, cp, ccp, t15, t16, t17, t18, rnA, rnB, rtA, rtB, t19, t20, vRel, ccp1, ccp2, invMassA, invIA, invMassB, invIB, rn1A, rn1B, rn2A, rn2B, k11, k22, k12;
    this.constraintCount = contactCount;
    t1 = this.constraints;
    t2 = t1.length;
    if (contactCount == null)
      throw $.iae(contactCount);
    if (t2 < contactCount) {
      this.constraints = $.List_List($.max(t2 * 2, this.constraintCount));
      t2 = this.constraints;
      t3 = t1.length;
      $.IterableMixinWorkaround_setRangeList(t2, 0, t3, t1, 0);
      for (i = t1.length; t1 = this.constraints, i < t1.length; ++i) {
        t2 = $.ContactConstraint$();
        if (i >= t1.length)
          throw $.ioore(i);
        t1[i] = t2;
      }
    }
    t1 = this.worldManifold;
    t2 = t1.points;
    t3 = this.tangent.storage;
    t4 = this.temp2.storage;
    t5 = this.temp1.storage;
    t6 = t1.normal.storage;
    i = 0;
    while (true) {
      t7 = this.constraintCount;
      if (t7 == null)
        throw $.iae(t7);
      if (!(i < t7))
        break;
      if (i >= contacts.length)
        throw $.ioore(i);
      contact = contacts[i];
      fixtureA = contact.get$fixtureA();
      fixtureB = contact.get$fixtureB();
      t7 = $.getInterceptor$x(fixtureA);
      shapeA = t7.get$shape(fixtureA);
      t8 = $.getInterceptor$x(fixtureB);
      shapeB = t8.get$shape(fixtureB);
      radiusA = shapeA.get$radius();
      radiusB = shapeB.get$radius();
      bodyA = t7.get$body(fixtureA);
      bodyB = t8.get$body(fixtureB);
      manifold = contact.get$manifold();
      t8 = fixtureA.get$friction();
      t7 = fixtureB.get$friction();
      if (t8 == null)
        throw t8.$mul();
      if (typeof t7 !== "number")
        throw $.iae(t7);
      t7 = t8 * t7;
      friction = Math.sqrt(t7);
      restitution = fixtureA.get$restitution();
      restitution0 = fixtureB.get$restitution();
      restitution = $.$gt$n(restitution, restitution0) ? restitution : restitution0;
      if (typeof restitution !== "number")
        return this.init$3$bailout(1, manifold, contacts, impulseRatio, t6, t4, t1, t2, i, friction, t5, t3, restitution, radiusA, radiusB, bodyA, bodyB);
      vA = bodyA.get$linearVelocity();
      vB = bodyB.get$linearVelocity();
      wA = bodyA.get$angularVelocity();
      if (typeof wA !== "number")
        return this.init$3$bailout(2, manifold, contacts, impulseRatio, t6, t4, t1, t2, i, friction, t5, t3, restitution, radiusA, radiusB, bodyA, bodyB, vB, vA, wA);
      wB = bodyB.get$angularVelocity();
      if (typeof wB !== "number")
        return this.init$3$bailout(3, manifold, contacts, impulseRatio, t6, t4, t1, t2, i, friction, t5, t3, restitution, radiusA, radiusB, bodyA, bodyB, vB, vA, wA, wB);
      t1.initialize$5(t1, manifold, bodyA.get$originTransform(), radiusA, bodyB.get$originTransform(), radiusB);
      t7 = this.constraints;
      if (i >= t7.length)
        throw $.ioore(i);
      cc = t7[i];
      cc.set$bodyA(bodyA);
      cc.set$bodyB(bodyB);
      cc.set$manifold(manifold);
      t7 = cc.get$normal();
      t8 = t6.length;
      if (0 >= t8)
        throw $.ioore(0);
      t9 = t6[0];
      t7 = t7.storage;
      if (0 >= t7.length)
        throw $.ioore(0);
      t7[0] = t9;
      t9 = cc.get$normal();
      if (1 >= t8)
        throw $.ioore(1);
      t8 = t6[1];
      t9 = t9.storage;
      if (1 >= t9.length)
        throw $.ioore(1);
      t9[1] = t8;
      cc.set$pointCount(manifold.get$pointCount());
      cc.set$friction(friction);
      cc.set$restitution(restitution);
      t8 = cc.get$localNormal();
      t9 = manifold.get$localNormal().storage;
      if (0 >= t9.length)
        throw $.ioore(0);
      t9 = t9[0];
      t8 = t8.storage;
      if (0 >= t8.length)
        throw $.ioore(0);
      t8[0] = t9;
      t9 = cc.get$localNormal();
      t8 = manifold.get$localNormal().storage;
      if (1 >= t8.length)
        throw $.ioore(1);
      t8 = t8[1];
      t9 = t9.storage;
      if (1 >= t9.length)
        throw $.ioore(1);
      t9[1] = t8;
      t8 = cc.get$localPoint();
      t9 = manifold.get$localPoint().storage;
      if (0 >= t9.length)
        throw $.ioore(0);
      t9 = t9[0];
      t8 = t8.storage;
      if (0 >= t8.length)
        throw $.ioore(0);
      t8[0] = t9;
      t9 = cc.get$localPoint();
      t8 = manifold.get$localPoint().storage;
      if (1 >= t8.length)
        throw $.ioore(1);
      t8 = t8[1];
      t9 = t9.storage;
      if (1 >= t9.length)
        throw $.ioore(1);
      t9[1] = t8;
      cc.set$radius($.$add$ns(radiusA, radiusB));
      t8 = $.getInterceptor$x(manifold);
      t9 = $.getInterceptor$x(cc);
      t9.set$type(cc, t8.get$type(manifold));
      t7 = vB.storage;
      t10 = vA.storage;
      t11 = -restitution;
      t12 = -wA;
      t13 = -wB;
      j = 0;
      while (true) {
        t14 = cc.get$pointCount();
        if (typeof t14 !== "number")
          throw $.iae(t14);
        if (!(j < t14))
          break;
        cp = $.$index$asx(t8.get$points(manifold), j);
        ccp = $.$index$asx(t9.get$points(cc), j);
        t14 = cp.get$normalImpulse();
        if (typeof t14 !== "number")
          throw $.iae(t14);
        ccp.set$normalImpulse(impulseRatio * t14);
        t14 = cp.get$tangentImpulse();
        if (typeof t14 !== "number")
          throw $.iae(t14);
        ccp.set$tangentImpulse(impulseRatio * t14);
        t14 = ccp.get$localPoint();
        t15 = cp.get$localPoint().storage;
        if (0 >= t15.length)
          throw $.ioore(0);
        t15 = t15[0];
        t14 = t14.storage;
        if (0 >= t14.length)
          throw $.ioore(0);
        t14[0] = t15;
        t15 = ccp.get$localPoint();
        t14 = cp.get$localPoint().storage;
        if (1 >= t14.length)
          throw $.ioore(1);
        t14 = t14[1];
        t15 = t15.storage;
        if (1 >= t15.length)
          throw $.ioore(1);
        t15[1] = t14;
        t14 = ccp.get$rA();
        if (j >= t2.length)
          throw $.ioore(j);
        t15 = $.get$x$x(t2[j]);
        t16 = bodyA.get$sweep().center.storage;
        if (0 >= t16.length)
          throw $.ioore(0);
        t16 = $.$sub$n(t15, t16[0]);
        t14 = t14.storage;
        if (0 >= t14.length)
          throw $.ioore(0);
        t14[0] = t16;
        t16 = ccp.get$rA();
        if (j >= t2.length)
          throw $.ioore(j);
        t14 = $.get$y$x(t2[j]);
        t15 = bodyA.get$sweep().center.storage;
        if (1 >= t15.length)
          throw $.ioore(1);
        t15 = $.$sub$n(t14, t15[1]);
        t16 = t16.storage;
        if (1 >= t16.length)
          throw $.ioore(1);
        t16[1] = t15;
        t15 = ccp.get$rB();
        if (j >= t2.length)
          throw $.ioore(j);
        t16 = $.get$x$x(t2[j]);
        t14 = bodyB.get$sweep().center.storage;
        if (0 >= t14.length)
          throw $.ioore(0);
        t14 = $.$sub$n(t16, t14[0]);
        t15 = t15.storage;
        if (0 >= t15.length)
          throw $.ioore(0);
        t15[0] = t14;
        t14 = ccp.get$rB();
        if (j >= t2.length)
          throw $.ioore(j);
        t15 = $.get$y$x(t2[j]);
        t16 = bodyB.get$sweep().center.storage;
        if (1 >= t16.length)
          throw $.ioore(1);
        t16 = $.$sub$n(t15, t16[1]);
        t14 = t14.storage;
        if (1 >= t14.length)
          throw $.ioore(1);
        t14[1] = t16;
        t16 = ccp.get$rA().storage;
        t14 = t16.length;
        if (0 >= t14)
          throw $.ioore(0);
        t15 = t16[0];
        t17 = cc.get$normal().storage;
        if (1 >= t17.length)
          throw $.ioore(1);
        t18 = t17[1];
        if (1 >= t14)
          throw $.ioore(1);
        t16 = t16[1];
        t17 = t17[0];
        rnA = t15 * t18 - t16 * t17;
        t16 = ccp.get$rB().storage;
        t15 = t16.length;
        if (0 >= t15)
          throw $.ioore(0);
        t14 = t16[0];
        if (1 >= t15)
          throw $.ioore(1);
        rnB = t14 * t18 - t16[1] * t17;
        ccp.set$normalMass(1 / (bodyA.get$invMass() + bodyB.get$invMass() + bodyA.get$invInertia() * (rnA * rnA) + bodyB.get$invInertia() * (rnB * rnB)));
        t17 = cc.get$normal().storage;
        if (1 >= t17.length)
          throw $.ioore(1);
        t17 = t17[1];
        t16 = t3.length;
        if (0 >= t16)
          throw $.ioore(0);
        t3[0] = 1 * t17;
        t17 = cc.get$normal().storage;
        if (0 >= t17.length)
          throw $.ioore(0);
        t17 = t17[0];
        if (1 >= t16)
          throw $.ioore(1);
        t3[1] = -1 * t17;
        t17 = ccp.get$rA().storage;
        t16 = t17.length;
        if (0 >= t16)
          throw $.ioore(0);
        t18 = t17[0];
        t14 = t3[1];
        if (1 >= t16)
          throw $.ioore(1);
        t17 = t17[1];
        t16 = t3[0];
        rtA = t18 * t14 - t17 * t16;
        t17 = ccp.get$rB().storage;
        t18 = t17.length;
        if (0 >= t18)
          throw $.ioore(0);
        t15 = t17[0];
        if (1 >= t18)
          throw $.ioore(1);
        rtB = t15 * t14 - t17[1] * t16;
        ccp.set$tangentMass(1 / (bodyA.get$invMass() + bodyB.get$invMass() + bodyA.get$invInertia() * (rtA * rtA) + bodyB.get$invInertia() * (rtB * rtB)));
        ccp.set$velocityBias(0);
        t16 = ccp.get$rA().storage;
        if (1 >= t16.length)
          throw $.ioore(1);
        t16 = t16[1];
        t17 = t4.length;
        if (0 >= t17)
          throw $.ioore(0);
        t4[0] = t12 * t16;
        t16 = ccp.get$rA().storage;
        if (0 >= t16.length)
          throw $.ioore(0);
        t16 = t16[0];
        if (1 >= t17)
          throw $.ioore(1);
        t4[1] = wA * t16;
        t16 = ccp.get$rB().storage;
        if (1 >= t16.length)
          throw $.ioore(1);
        t16 = t16[1];
        t17 = t7.length;
        if (0 >= t17)
          throw $.ioore(0);
        t14 = t7[0];
        t15 = t10.length;
        if (0 >= t15)
          throw $.ioore(0);
        t18 = t10[0];
        t19 = t4[0];
        t20 = t5.length;
        if (0 >= t20)
          throw $.ioore(0);
        t5[0] = t13 * t16 + t14 - t18 - t19;
        t19 = ccp.get$rB().storage;
        if (0 >= t19.length)
          throw $.ioore(0);
        t19 = t19[0];
        if (1 >= t17)
          throw $.ioore(1);
        t17 = t7[1];
        if (1 >= t15)
          throw $.ioore(1);
        t15 = t10[1];
        t18 = t4[1];
        if (1 >= t20)
          throw $.ioore(1);
        t5[1] = wB * t19 + t17 - t15 - t18;
        t18 = cc.get$normal().storage;
        t15 = t18.length;
        if (0 >= t15)
          throw $.ioore(0);
        t17 = t18[0];
        t19 = t5[0];
        if (1 >= t15)
          throw $.ioore(1);
        vRel = t17 * t19 + t18[1] * t5[1];
        if (vRel < -1)
          ccp.set$velocityBias(t11 * vRel);
        ++j;
      }
      if (t14 === 2) {
        t7 = t9.get$points(cc);
        t8 = $.getInterceptor$asx(t7);
        ccp1 = t8.$index(t7, 0);
        ccp2 = t8.$index(t7, 1);
        invMassA = bodyA.get$invMass();
        invIA = bodyA.get$invInertia();
        invMassB = bodyB.get$invMass();
        invIB = bodyB.get$invInertia();
        t7 = ccp1.get$rA();
        t8 = cc.get$normal();
        t7 = t7.storage;
        t9 = t7.length;
        if (0 >= t9)
          throw $.ioore(0);
        t10 = t7[0];
        t8 = t8.storage;
        if (1 >= t8.length)
          throw $.ioore(1);
        t11 = t8[1];
        if (1 >= t9)
          throw $.ioore(1);
        t7 = t7[1];
        t8 = t8[0];
        rn1A = t10 * t11 - t7 * t8;
        t7 = ccp1.get$rB().storage;
        t10 = t7.length;
        if (0 >= t10)
          throw $.ioore(0);
        t9 = t7[0];
        if (1 >= t10)
          throw $.ioore(1);
        rn1B = t9 * t11 - t7[1] * t8;
        t7 = ccp2.get$rA().storage;
        t9 = t7.length;
        if (0 >= t9)
          throw $.ioore(0);
        t10 = t7[0];
        if (1 >= t9)
          throw $.ioore(1);
        rn2A = t10 * t11 - t7[1] * t8;
        t7 = ccp2.get$rB().storage;
        t10 = t7.length;
        if (0 >= t10)
          throw $.ioore(0);
        t9 = t7[0];
        if (1 >= t10)
          throw $.ioore(1);
        rn2B = t9 * t11 - t7[1] * t8;
        t8 = invMassA + invMassB;
        t7 = invIA * rn1A;
        t11 = invIB * rn1B;
        k11 = t8 + t7 * rn1A + t11 * rn1B;
        k22 = t8 + invIA * rn2A * rn2A + invIB * rn2B * rn2B;
        k12 = t8 + t7 * rn2A + t11 * rn2B;
        if (k11 * k11 < 100 * (k11 * k22 - k12 * k12)) {
          t7 = cc.get$K().storage;
          if (3 >= t7.length)
            throw $.ioore(3);
          t7[3] = k22;
          t7[2] = k12;
          t7[1] = k12;
          t7[0] = k11;
          cc.get$normalMass().setValues$4(k11, k12, k12, k22);
          cc.get$normalMass().invert$0();
        } else
          cc.set$pointCount(1);
      }
      ++i;
    }
  },
  init$3$bailout: function(state0, manifold, contacts, impulseRatio, t6, t4, t1, t2, i, friction, t5, t3, restitution, radiusA, radiusB, bodyA, bodyB, vB, vA, wA, wB) {
    switch (state0) {
      case 0:
        this.constraintCount = contactCount;
        t1 = this.constraints;
        t2 = t1.length;
        if (contactCount == null)
          throw $.iae(contactCount);
        if (t2 < contactCount) {
          this.constraints = $.List_List($.max(t2 * 2, this.constraintCount));
          t2 = this.constraints;
          t3 = t1.length;
          $.IterableMixinWorkaround_setRangeList(t2, 0, t3, t1, 0);
          for (i = t1.length; t1 = this.constraints, i < t1.length; ++i) {
            t2 = $.ContactConstraint$();
            if (i >= t1.length)
              throw $.ioore(i);
            t1[i] = t2;
          }
        }
        t1 = this.worldManifold;
        t2 = t1.points;
        t3 = this.tangent.storage;
        t4 = this.temp2.storage;
        t5 = this.temp1.storage;
        t6 = t1.normal.storage;
        i = 0;
      default:
        var t7, contact, fixtureA, fixtureB, shapeA, t8, shapeB, restitution0, cc, t9, t10, t11, t12, t13, j, t14, cp, ccp, t15, t16, t17, t18, rnA, rnB, rtA, rtB, vRel, ccp1, ccp2, invMassA, invIA, invMassB, invIB, rn1A, rn1B, rn2A, rn2B, k11, k22, k12;
        L0:
          while (true)
            switch (state0) {
              case 0:
                t7 = this.constraintCount;
                if (t7 == null)
                  throw $.iae(t7);
                if (!(i < t7))
                  break L0;
                if (i >= contacts.length)
                  throw $.ioore(i);
                contact = contacts[i];
                fixtureA = contact.get$fixtureA();
                fixtureB = contact.get$fixtureB();
                t7 = $.getInterceptor$x(fixtureA);
                shapeA = t7.get$shape(fixtureA);
                t8 = $.getInterceptor$x(fixtureB);
                shapeB = t8.get$shape(fixtureB);
                radiusA = shapeA.get$radius();
                radiusB = shapeB.get$radius();
                bodyA = t7.get$body(fixtureA);
                bodyB = t8.get$body(fixtureB);
                manifold = contact.get$manifold();
                t8 = fixtureA.get$friction();
                t7 = fixtureB.get$friction();
                if (t8 == null)
                  throw t8.$mul();
                if (typeof t7 !== "number")
                  throw $.iae(t7);
                t7 = t8 * t7;
                friction = Math.sqrt(t7);
                restitution = fixtureA.get$restitution();
                restitution0 = fixtureB.get$restitution();
                restitution = $.$gt$n(restitution, restitution0) ? restitution : restitution0;
              case 1:
                state0 = 0;
                vA = bodyA.get$linearVelocity();
                vB = bodyB.get$linearVelocity();
                wA = bodyA.get$angularVelocity();
              case 2:
                state0 = 0;
                wB = bodyB.get$angularVelocity();
              case 3:
                state0 = 0;
                t1.initialize$5(t1, manifold, bodyA.get$originTransform(), radiusA, bodyB.get$originTransform(), radiusB);
                t7 = this.constraints;
                if (i >= t7.length)
                  throw $.ioore(i);
                cc = t7[i];
                cc.set$bodyA(bodyA);
                cc.set$bodyB(bodyB);
                cc.set$manifold(manifold);
                t7 = cc.get$normal();
                t8 = t6.length;
                if (0 >= t8)
                  throw $.ioore(0);
                t9 = t6[0];
                t7 = t7.storage;
                if (0 >= t7.length)
                  throw $.ioore(0);
                t7[0] = t9;
                t9 = cc.get$normal();
                if (1 >= t8)
                  throw $.ioore(1);
                t8 = t6[1];
                t9 = t9.storage;
                if (1 >= t9.length)
                  throw $.ioore(1);
                t9[1] = t8;
                cc.set$pointCount(manifold.get$pointCount());
                cc.set$friction(friction);
                cc.set$restitution(restitution);
                t8 = cc.get$localNormal();
                t9 = manifold.get$localNormal().storage;
                if (0 >= t9.length)
                  throw $.ioore(0);
                t9 = t9[0];
                t8 = t8.storage;
                if (0 >= t8.length)
                  throw $.ioore(0);
                t8[0] = t9;
                t9 = cc.get$localNormal();
                t8 = manifold.get$localNormal().storage;
                if (1 >= t8.length)
                  throw $.ioore(1);
                t8 = t8[1];
                t9 = t9.storage;
                if (1 >= t9.length)
                  throw $.ioore(1);
                t9[1] = t8;
                t8 = cc.get$localPoint();
                t9 = manifold.get$localPoint().storage;
                if (0 >= t9.length)
                  throw $.ioore(0);
                t9 = t9[0];
                t8 = t8.storage;
                if (0 >= t8.length)
                  throw $.ioore(0);
                t8[0] = t9;
                t9 = cc.get$localPoint();
                t8 = manifold.get$localPoint().storage;
                if (1 >= t8.length)
                  throw $.ioore(1);
                t8 = t8[1];
                t9 = t9.storage;
                if (1 >= t9.length)
                  throw $.ioore(1);
                t9[1] = t8;
                cc.set$radius($.$add$ns(radiusA, radiusB));
                t8 = $.getInterceptor$x(manifold);
                t9 = $.getInterceptor$x(cc);
                t9.set$type(cc, t8.get$type(manifold));
                t7 = $.getInterceptor$n(restitution);
                t10 = $.getInterceptor$n(wA);
                t11 = $.getInterceptor$n(wB);
                t12 = vB.storage;
                t13 = vA.storage;
                j = 0;
                while (true) {
                  t14 = cc.get$pointCount();
                  if (typeof t14 !== "number")
                    throw $.iae(t14);
                  if (!(j < t14))
                    break;
                  cp = $.$index$asx(t8.get$points(manifold), j);
                  ccp = $.$index$asx(t9.get$points(cc), j);
                  t14 = cp.get$normalImpulse();
                  if (typeof t14 !== "number")
                    throw $.iae(t14);
                  ccp.set$normalImpulse(impulseRatio * t14);
                  t14 = cp.get$tangentImpulse();
                  if (typeof t14 !== "number")
                    throw $.iae(t14);
                  ccp.set$tangentImpulse(impulseRatio * t14);
                  t14 = ccp.get$localPoint();
                  t15 = cp.get$localPoint().storage;
                  if (0 >= t15.length)
                    throw $.ioore(0);
                  t15 = t15[0];
                  t14 = t14.storage;
                  if (0 >= t14.length)
                    throw $.ioore(0);
                  t14[0] = t15;
                  t15 = ccp.get$localPoint();
                  t14 = cp.get$localPoint().storage;
                  if (1 >= t14.length)
                    throw $.ioore(1);
                  t14 = t14[1];
                  t15 = t15.storage;
                  if (1 >= t15.length)
                    throw $.ioore(1);
                  t15[1] = t14;
                  t14 = ccp.get$rA();
                  if (j >= t2.length)
                    throw $.ioore(j);
                  t15 = $.get$x$x(t2[j]);
                  t16 = bodyA.get$sweep().center.storage;
                  if (0 >= t16.length)
                    throw $.ioore(0);
                  t16 = $.$sub$n(t15, t16[0]);
                  t14 = t14.storage;
                  if (0 >= t14.length)
                    throw $.ioore(0);
                  t14[0] = t16;
                  t16 = ccp.get$rA();
                  if (j >= t2.length)
                    throw $.ioore(j);
                  t14 = $.get$y$x(t2[j]);
                  t15 = bodyA.get$sweep().center.storage;
                  if (1 >= t15.length)
                    throw $.ioore(1);
                  t15 = $.$sub$n(t14, t15[1]);
                  t16 = t16.storage;
                  if (1 >= t16.length)
                    throw $.ioore(1);
                  t16[1] = t15;
                  t15 = ccp.get$rB();
                  if (j >= t2.length)
                    throw $.ioore(j);
                  t16 = $.get$x$x(t2[j]);
                  t14 = bodyB.get$sweep().center.storage;
                  if (0 >= t14.length)
                    throw $.ioore(0);
                  t14 = $.$sub$n(t16, t14[0]);
                  t15 = t15.storage;
                  if (0 >= t15.length)
                    throw $.ioore(0);
                  t15[0] = t14;
                  t14 = ccp.get$rB();
                  if (j >= t2.length)
                    throw $.ioore(j);
                  t15 = $.get$y$x(t2[j]);
                  t16 = bodyB.get$sweep().center.storage;
                  if (1 >= t16.length)
                    throw $.ioore(1);
                  t16 = $.$sub$n(t15, t16[1]);
                  t14 = t14.storage;
                  if (1 >= t14.length)
                    throw $.ioore(1);
                  t14[1] = t16;
                  t16 = ccp.get$rA().storage;
                  t14 = t16.length;
                  if (0 >= t14)
                    throw $.ioore(0);
                  t15 = t16[0];
                  t17 = cc.get$normal().storage;
                  if (1 >= t17.length)
                    throw $.ioore(1);
                  t18 = t17[1];
                  if (1 >= t14)
                    throw $.ioore(1);
                  t16 = t16[1];
                  t17 = t17[0];
                  rnA = t15 * t18 - t16 * t17;
                  t16 = ccp.get$rB().storage;
                  t15 = t16.length;
                  if (0 >= t15)
                    throw $.ioore(0);
                  t14 = t16[0];
                  if (1 >= t15)
                    throw $.ioore(1);
                  rnB = t14 * t18 - t16[1] * t17;
                  ccp.set$normalMass(1 / (bodyA.get$invMass() + bodyB.get$invMass() + bodyA.get$invInertia() * (rnA * rnA) + bodyB.get$invInertia() * (rnB * rnB)));
                  t17 = cc.get$normal().storage;
                  if (1 >= t17.length)
                    throw $.ioore(1);
                  t17 = t17[1];
                  t16 = t3.length;
                  if (0 >= t16)
                    throw $.ioore(0);
                  t3[0] = 1 * t17;
                  t17 = cc.get$normal().storage;
                  if (0 >= t17.length)
                    throw $.ioore(0);
                  t17 = t17[0];
                  if (1 >= t16)
                    throw $.ioore(1);
                  t3[1] = -1 * t17;
                  t17 = ccp.get$rA().storage;
                  t16 = t17.length;
                  if (0 >= t16)
                    throw $.ioore(0);
                  t18 = t17[0];
                  t14 = t3[1];
                  if (1 >= t16)
                    throw $.ioore(1);
                  t17 = t17[1];
                  t16 = t3[0];
                  rtA = t18 * t14 - t17 * t16;
                  t17 = ccp.get$rB().storage;
                  t18 = t17.length;
                  if (0 >= t18)
                    throw $.ioore(0);
                  t15 = t17[0];
                  if (1 >= t18)
                    throw $.ioore(1);
                  rtB = t15 * t14 - t17[1] * t16;
                  ccp.set$tangentMass(1 / (bodyA.get$invMass() + bodyB.get$invMass() + bodyA.get$invInertia() * (rtA * rtA) + bodyB.get$invInertia() * (rtB * rtB)));
                  ccp.set$velocityBias(0);
                  t16 = t10.$negate(wA);
                  t17 = ccp.get$rA().storage;
                  if (1 >= t17.length)
                    throw $.ioore(1);
                  t17 = $.$mul$n(t16, t17[1]);
                  if (0 >= t4.length)
                    throw $.ioore(0);
                  t4[0] = t17;
                  t17 = ccp.get$rA().storage;
                  if (0 >= t17.length)
                    throw $.ioore(0);
                  t17 = t10.$mul(wA, t17[0]);
                  if (1 >= t4.length)
                    throw $.ioore(1);
                  t4[1] = t17;
                  t17 = t11.$negate(wB);
                  t16 = ccp.get$rB().storage;
                  if (1 >= t16.length)
                    throw $.ioore(1);
                  t16 = $.$mul$n(t17, t16[1]);
                  if (0 >= t12.length)
                    throw $.ioore(0);
                  t16 = $.$add$ns(t16, t12[0]);
                  if (0 >= t13.length)
                    throw $.ioore(0);
                  t16 = $.$sub$n(t16, t13[0]);
                  if (0 >= t4.length)
                    throw $.ioore(0);
                  t16 = $.$sub$n(t16, t4[0]);
                  if (0 >= t5.length)
                    throw $.ioore(0);
                  t5[0] = t16;
                  t16 = ccp.get$rB().storage;
                  if (0 >= t16.length)
                    throw $.ioore(0);
                  t16 = t11.$mul(wB, t16[0]);
                  if (1 >= t12.length)
                    throw $.ioore(1);
                  t16 = $.$add$ns(t16, t12[1]);
                  if (1 >= t13.length)
                    throw $.ioore(1);
                  t16 = $.$sub$n(t16, t13[1]);
                  if (1 >= t4.length)
                    throw $.ioore(1);
                  t16 = $.$sub$n(t16, t4[1]);
                  if (1 >= t5.length)
                    throw $.ioore(1);
                  t5[1] = t16;
                  t16 = cc.get$normal().storage;
                  t17 = t16.length;
                  if (0 >= t17)
                    throw $.ioore(0);
                  t14 = t16[0];
                  t15 = t5[0];
                  if (1 >= t17)
                    throw $.ioore(1);
                  vRel = t14 * t15 + t16[1] * t5[1];
                  if (vRel < -1)
                    ccp.set$velocityBias($.$mul$n(t7.$negate(restitution), vRel));
                  ++j;
                }
                if (t14 === 2) {
                  t7 = t9.get$points(cc);
                  t8 = $.getInterceptor$asx(t7);
                  ccp1 = t8.$index(t7, 0);
                  ccp2 = t8.$index(t7, 1);
                  invMassA = bodyA.get$invMass();
                  invIA = bodyA.get$invInertia();
                  invMassB = bodyB.get$invMass();
                  invIB = bodyB.get$invInertia();
                  t7 = ccp1.get$rA();
                  t8 = cc.get$normal();
                  t7 = t7.storage;
                  t9 = t7.length;
                  if (0 >= t9)
                    throw $.ioore(0);
                  t10 = t7[0];
                  t8 = t8.storage;
                  if (1 >= t8.length)
                    throw $.ioore(1);
                  t11 = t8[1];
                  if (1 >= t9)
                    throw $.ioore(1);
                  t7 = t7[1];
                  t8 = t8[0];
                  rn1A = t10 * t11 - t7 * t8;
                  t7 = ccp1.get$rB().storage;
                  t10 = t7.length;
                  if (0 >= t10)
                    throw $.ioore(0);
                  t9 = t7[0];
                  if (1 >= t10)
                    throw $.ioore(1);
                  rn1B = t9 * t11 - t7[1] * t8;
                  t7 = ccp2.get$rA().storage;
                  t9 = t7.length;
                  if (0 >= t9)
                    throw $.ioore(0);
                  t10 = t7[0];
                  if (1 >= t9)
                    throw $.ioore(1);
                  rn2A = t10 * t11 - t7[1] * t8;
                  t7 = ccp2.get$rB().storage;
                  t10 = t7.length;
                  if (0 >= t10)
                    throw $.ioore(0);
                  t9 = t7[0];
                  if (1 >= t10)
                    throw $.ioore(1);
                  rn2B = t9 * t11 - t7[1] * t8;
                  t8 = invMassA + invMassB;
                  t7 = invIA * rn1A;
                  t11 = invIB * rn1B;
                  k11 = t8 + t7 * rn1A + t11 * rn1B;
                  k22 = t8 + invIA * rn2A * rn2A + invIB * rn2B * rn2B;
                  k12 = t8 + t7 * rn2A + t11 * rn2B;
                  if (k11 * k11 < 100 * (k11 * k22 - k12 * k12)) {
                    t7 = cc.get$K().storage;
                    if (3 >= t7.length)
                      throw $.ioore(3);
                    t7[3] = k22;
                    t7[2] = k12;
                    t7[1] = k12;
                    t7[0] = k11;
                    cc.get$normalMass().setValues$4(k11, k12, k12, k22);
                    cc.get$normalMass().invert$0();
                  } else
                    cc.set$pointCount(1);
                }
                ++i;
            }
    }
  },
  warmStart$0: function() {
    var t1, i, t2, c, bodyA, bodyB, invMassA, invIA, invMassB, invIB, t3, t4, t5, j, ccp, Px, Py, t6, t7;
    t1 = this.tangent.storage;
    i = 0;
    while (true) {
      t2 = this.constraintCount;
      if (t2 == null)
        throw $.iae(t2);
      if (!(i < t2))
        break;
      t2 = this.constraints;
      if (i >= t2.length)
        throw $.ioore(i);
      c = t2[i];
      bodyA = c.get$bodyA();
      bodyB = c.get$bodyB();
      invMassA = bodyA.get$invMass();
      invIA = bodyA.get$invInertia();
      invMassB = bodyB.get$invMass();
      invIB = bodyB.get$invInertia();
      t2 = c.get$normal().storage;
      t3 = t2.length;
      if (0 >= t3)
        throw $.ioore(0);
      t4 = t2[0];
      if (1 >= t3)
        throw $.ioore(1);
      t3 = t2[1];
      t5 = t1.length;
      if (0 >= t5)
        throw $.ioore(0);
      t1[0] = 1 * t3;
      if (1 >= t5)
        throw $.ioore(1);
      t1[1] = -1 * t4;
      t3 = $.getInterceptor$x(c);
      j = 0;
      while (true) {
        t4 = c.get$pointCount();
        if (typeof t4 !== "number")
          throw $.iae(t4);
        if (!(j < t4))
          break;
        ccp = $.$index$asx(t3.get$points(c), j);
        t4 = ccp.get$normalImpulse();
        if (0 >= t2.length)
          throw $.ioore(0);
        t4 = $.$mul$n(t4, t2[0]);
        t5 = ccp.get$tangentImpulse();
        if (0 >= t1.length)
          throw $.ioore(0);
        Px = $.$add$ns(t4, $.$mul$n(t5, t1[0]));
        t5 = ccp.get$normalImpulse();
        if (1 >= t2.length)
          throw $.ioore(1);
        t5 = $.$mul$n(t5, t2[1]);
        t4 = ccp.get$tangentImpulse();
        if (1 >= t1.length)
          throw $.ioore(1);
        Py = $.$add$ns(t5, $.$mul$n(t4, t1[1]));
        t4 = bodyA.get$angularVelocity();
        t5 = ccp.get$rA().storage;
        t6 = t5.length;
        if (0 >= t6)
          throw $.ioore(0);
        t7 = t5[0];
        if (typeof Py !== "number")
          throw $.iae(Py);
        if (1 >= t6)
          throw $.ioore(1);
        t5 = t5[1];
        if (typeof Px !== "number")
          throw $.iae(Px);
        bodyA.set$angularVelocity($.$sub$n(t4, invIA * (t7 * Py - t5 * Px)));
        t5 = bodyA.get$linearVelocity().storage;
        if (0 >= t5.length)
          throw $.ioore(0);
        t5[0] = t5[0] - Px * invMassA;
        t5 = bodyA.get$linearVelocity().storage;
        if (1 >= t5.length)
          throw $.ioore(1);
        t5[1] = t5[1] - Py * invMassA;
        t5 = bodyB.get$angularVelocity();
        t7 = ccp.get$rB().storage;
        t4 = t7.length;
        if (0 >= t4)
          throw $.ioore(0);
        t6 = t7[0];
        if (1 >= t4)
          throw $.ioore(1);
        bodyB.set$angularVelocity($.$add$ns(t5, invIB * (t6 * Py - t7[1] * Px)));
        t7 = bodyB.get$linearVelocity().storage;
        if (0 >= t7.length)
          throw $.ioore(0);
        t7[0] = t7[0] + Px * invMassB;
        t7 = bodyB.get$linearVelocity().storage;
        if (1 >= t7.length)
          throw $.ioore(1);
        t7[1] = t7[1] + Py * invMassB;
        ++j;
      }
      ++i;
    }
  },
  solveVelocityConstraints$0: function() {
    var t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, i, t16, c, bodyA, bodyB, wA, wB, vA, vB, invMassA, invIA, invMassB, invIB, t17, friction, t18, j, t19, ccp, a, t20, t21, t22, t23, t24, t25, t26, lambda, maxFriction, newImpulse, Px, Py, cp1, a1, b, vn, cp2, t27, t28, vn1, vn2;
    t1 = this.dv.storage;
    t2 = this.tangent.storage;
    t3 = this.d;
    t4 = this.x;
    t5 = t3.storage;
    t6 = t4.storage;
    t7 = this.P1.storage;
    t8 = this.P2;
    t9 = t8.storage;
    t10 = this.temp1;
    t11 = t10.storage;
    t12 = this.temp2;
    t13 = t12.storage;
    t14 = this.dv1.storage;
    t15 = this.dv2.storage;
    i = 0;
    while (true) {
      t16 = this.constraintCount;
      if (t16 == null)
        throw $.iae(t16);
      if (!(i < t16))
        break;
      t16 = this.constraints;
      if (i >= t16.length)
        throw $.ioore(i);
      c = t16[i];
      bodyA = c.get$bodyA();
      bodyB = c.get$bodyB();
      wA = bodyA.get$angularVelocity();
      if (typeof wA !== "number")
        return this.solveVelocityConstraints$0$bailout(1, t10, t11, t2, t14, i, t15, t12, bodyA, t13, wA, t9, bodyB, c, t3, t5, t6, t4, t1, t8, t7);
      wB = bodyB.get$angularVelocity();
      if (typeof wB !== "number")
        return this.solveVelocityConstraints$0$bailout(2, t10, t11, t2, t14, i, t15, t12, bodyA, t13, wA, t9, bodyB, c, t3, t5, t6, t4, t1, t8, t7, wB);
      vA = bodyA.get$linearVelocity();
      vB = bodyB.get$linearVelocity();
      invMassA = bodyA.get$invMass();
      invIA = bodyA.get$invInertia();
      invMassB = bodyB.get$invMass();
      invIB = bodyB.get$invInertia();
      t16 = c.get$normal().storage;
      if (1 >= t16.length)
        throw $.ioore(1);
      t16 = t16[1];
      t17 = t2.length;
      if (0 >= t17)
        throw $.ioore(0);
      t2[0] = 1 * t16;
      t16 = c.get$normal().storage;
      if (0 >= t16.length)
        throw $.ioore(0);
      t16 = t16[0];
      if (1 >= t17)
        throw $.ioore(1);
      t2[1] = -1 * t16;
      friction = c.get$friction();
      t16 = $.getInterceptor$x(c);
      t17 = vB.storage;
      t18 = vA.storage;
      j = 0;
      while (true) {
        t19 = c.get$pointCount();
        if (typeof t19 !== "number")
          throw $.iae(t19);
        if (!(j < t19))
          break;
        t19 = t16.get$points(c);
        if (typeof t19 !== "object" || t19 === null || (t19.constructor !== Array || !!t19.immutable$list) && !$.isJsIndexable(t19, t19[$.dispatchPropertyName]))
          return this.solveVelocityConstraints$0$bailout(3, t10, t11, t2, t14, i, t15, t12, bodyA, t13, wA, t9, bodyB, c, t3, t5, t6, t4, t1, t8, t7, wB, t19, t16, vA, invMassA, invIA, invIB, invMassB, vB, t17, t18, friction, j);
        if (j >= t19.length)
          throw $.ioore(j);
        ccp = t19[j];
        a = ccp.get$rA();
        t19 = ccp.get$rB().storage;
        if (1 >= t19.length)
          throw $.ioore(1);
        t19 = t19[1];
        t20 = t17.length;
        if (0 >= t20)
          throw $.ioore(0);
        t21 = t17[0];
        t22 = t18.length;
        if (0 >= t22)
          throw $.ioore(0);
        t23 = t18[0];
        t24 = a.storage;
        if (1 >= t24.length)
          throw $.ioore(1);
        t25 = t24[1];
        t26 = t1.length;
        if (0 >= t26)
          throw $.ioore(0);
        t1[0] = -wB * t19 + t21 - t23 + wA * t25;
        t25 = ccp.get$rB().storage;
        if (0 >= t25.length)
          throw $.ioore(0);
        t25 = t25[0];
        if (1 >= t20)
          throw $.ioore(1);
        t20 = t17[1];
        if (1 >= t22)
          throw $.ioore(1);
        t22 = t18[1];
        t24 = t24[0];
        if (1 >= t26)
          throw $.ioore(1);
        t1[1] = wB * t25 + t20 - t22 - wA * t24;
        t24 = t1[0];
        t22 = t2.length;
        if (0 >= t22)
          throw $.ioore(0);
        t20 = t2[0];
        t25 = t1[1];
        if (1 >= t22)
          throw $.ioore(1);
        t22 = t2[1];
        lambda = ccp.get$tangentMass() * -(t24 * t20 + t25 * t22);
        t22 = ccp.get$normalImpulse();
        if (friction == null)
          throw friction.$mul();
        if (typeof t22 !== "number")
          throw $.iae(t22);
        maxFriction = friction * t22;
        t22 = ccp.get$tangentImpulse();
        if (typeof t22 !== "number")
          return this.solveVelocityConstraints$0$bailout(4, t10, t11, t2, t14, i, t15, t12, bodyA, t13, wA, t9, bodyB, c, t3, t5, t6, t4, t1, t8, t7, wB, C.JSNumber_methods, t16, vA, invMassA, invIA, invIB, invMassB, vB, t17, t18, friction, j, ccp, C.JSNumber_methods, t22, lambda, maxFriction);
        newImpulse = $.max(-maxFriction, $.min(t22 + lambda, maxFriction));
        if (typeof newImpulse !== "number")
          return this.solveVelocityConstraints$0$bailout(5, t10, t11, t2, t14, i, t15, t12, bodyA, t13, wA, t9, bodyB, c, t3, t5, t6, t4, t1, t8, t7, wB, C.JSNumber_methods, t16, vA, invMassA, invIA, invIB, invMassB, vB, t17, t18, friction, j, ccp, C.JSNumber_methods, 0, 0, 0, newImpulse);
        t22 = ccp.get$tangentImpulse();
        if (typeof t22 !== "number")
          return this.solveVelocityConstraints$0$bailout(6, t10, t11, t2, t14, i, t15, t12, bodyA, t13, wA, t9, bodyB, c, t3, t5, t6, t4, t1, t8, t7, wB, C.JSNumber_methods, t16, vA, invMassA, invIA, invIB, invMassB, vB, t17, t18, friction, j, ccp, C.JSNumber_methods, t22, 0, 0, newImpulse);
        lambda = newImpulse - t22;
        t22 = t2.length;
        if (0 >= t22)
          throw $.ioore(0);
        Px = t2[0] * lambda;
        if (1 >= t22)
          throw $.ioore(1);
        Py = t2[1] * lambda;
        t22 = t18.length;
        if (0 >= t22)
          throw $.ioore(0);
        t18[0] = t18[0] - Px * invMassA;
        if (1 >= t22)
          throw $.ioore(1);
        t18[1] = t18[1] - Py * invMassA;
        t22 = ccp.get$rA().storage;
        t25 = t22.length;
        if (0 >= t25)
          throw $.ioore(0);
        t20 = t22[0];
        if (1 >= t25)
          throw $.ioore(1);
        wA -= invIA * (t20 * Py - t22[1] * Px);
        t22 = t17.length;
        if (0 >= t22)
          throw $.ioore(0);
        t17[0] = t17[0] + Px * invMassB;
        if (1 >= t22)
          throw $.ioore(1);
        t17[1] = t17[1] + Py * invMassB;
        t22 = ccp.get$rB().storage;
        t20 = t22.length;
        if (0 >= t20)
          throw $.ioore(0);
        t25 = t22[0];
        if (1 >= t20)
          throw $.ioore(1);
        wB += invIB * (t25 * Py - t22[1] * Px);
        ccp.set$tangentImpulse(newImpulse);
        ++j;
      }
      t19 = t19 === 1;
      t16 = t16.get$points(c);
      if (typeof t16 !== "object" || t16 === null || (t16.constructor !== Array || !!t16.immutable$list) && !$.isJsIndexable(t16, t16[$.dispatchPropertyName]))
        return this.solveVelocityConstraints$0$bailout(7, t10, t11, t2, t14, i, t15, t12, bodyA, t13, wA, t9, bodyB, c, t3, t5, t6, t4, t1, t8, t7, wB, t19, t16, vA, invMassA, invIA, invIB, invMassB, vB, t17, t18, 0, 0, 0, 0, 0, 0, 0, 0, C.JSNumber_methods);
      t20 = t16.length;
      cp1 = t16[0];
      t21 = -wB;
      if (t19) {
        if (0 >= t20)
          throw $.ioore(0);
        a1 = cp1.get$rA();
        t16 = cp1.get$rB().storage;
        if (1 >= t16.length)
          throw $.ioore(1);
        t16 = t16[1];
        t19 = t17.length;
        if (0 >= t19)
          throw $.ioore(0);
        t20 = t17[0];
        t22 = t18.length;
        if (0 >= t22)
          throw $.ioore(0);
        t23 = t18[0];
        t24 = a1.storage;
        if (1 >= t24.length)
          throw $.ioore(1);
        t25 = t24[1];
        t26 = t1.length;
        if (0 >= t26)
          throw $.ioore(0);
        t1[0] = t21 * t16 + t20 - t23 + wA * t25;
        t25 = cp1.get$rB().storage;
        if (0 >= t25.length)
          throw $.ioore(0);
        t25 = t25[0];
        if (1 >= t19)
          throw $.ioore(1);
        t19 = t17[1];
        if (1 >= t22)
          throw $.ioore(1);
        t22 = t18[1];
        t24 = t24[0];
        if (1 >= t26)
          throw $.ioore(1);
        t1[1] = wB * t25 + t19 - t22 - wA * t24;
        b = c.get$normal();
        t24 = t1[0];
        t22 = b.storage;
        t19 = t22.length;
        if (0 >= t19)
          throw $.ioore(0);
        t25 = t22[0];
        t26 = t1[1];
        if (1 >= t19)
          throw $.ioore(1);
        t22 = t22[1];
        vn = t24 * t25 + t26 * t22;
        t26 = cp1.get$normalMass();
        if (typeof t26 !== "number")
          return this.solveVelocityConstraints$0$bailout(8, t10, t11, t2, t14, i, t15, t12, bodyA, t13, wA, t9, bodyB, c, t3, t5, t6, t4, t1, t8, t7, wB, t26, 0, 0, invMassA, invIA, invIB, invMassB, 0, t17, t18, 0, 0, cp1, 0, C.JSNumber_methods, 0, 0, 0, C.JSNumber_methods, vn);
        t24 = cp1.get$velocityBias();
        if (typeof t24 !== "number")
          throw $.iae(t24);
        lambda = -t26 * (vn - t24);
        t24 = cp1.get$normalImpulse();
        if (typeof t24 !== "number")
          return this.solveVelocityConstraints$0$bailout(9, t10, t11, t2, t14, i, t15, t12, bodyA, t13, wA, t9, bodyB, c, t3, t5, t6, t4, t1, t8, t7, wB, 0, 0, 0, invMassA, invIA, invIB, invMassB, 0, t17, t18, 0, 0, cp1, 0, C.JSNumber_methods, lambda, 0, 0, C.JSNumber_methods, 0, t24);
        a = t24 + lambda;
        newImpulse = a > 0 ? a : 0;
        lambda = newImpulse - t24;
        Px = t25 * lambda;
        Py = t22 * lambda;
        t18[0] = t18[0] - Px * invMassA;
        t18[1] = t18[1] - Py * invMassA;
        t16 = cp1.get$rA().storage;
        t19 = t16.length;
        if (0 >= t19)
          throw $.ioore(0);
        t20 = t16[0];
        if (1 >= t19)
          throw $.ioore(1);
        wA -= invIA * (t20 * Py - t16[1] * Px);
        t17[0] = t17[0] + Px * invMassB;
        t17[1] = t17[1] + Py * invMassB;
        t16 = cp1.get$rB().storage;
        t20 = t16.length;
        if (0 >= t20)
          throw $.ioore(0);
        t19 = t16[0];
        if (1 >= t20)
          throw $.ioore(1);
        wB += invIB * (t19 * Py - t16[1] * Px);
        cp1.set$normalImpulse(newImpulse);
      } else {
        if (0 >= t20)
          throw $.ioore(0);
        if (1 >= t20)
          throw $.ioore(1);
        cp2 = t16[1];
        t16 = cp1.get$normalImpulse();
        t19 = cp2.get$normalImpulse();
        a = new $.Vector2(new Float32Array(2));
        t20 = a.storage;
        t22 = t20.length;
        if (0 >= t22)
          throw $.ioore(0);
        t20[0] = t16;
        if (1 >= t22)
          throw $.ioore(1);
        t20[1] = t19;
        t19 = cp1.get$rB().storage;
        if (1 >= t19.length)
          throw $.ioore(1);
        t19 = t19[1];
        t22 = t17.length;
        if (0 >= t22)
          throw $.ioore(0);
        t16 = t17[0];
        t23 = t18.length;
        if (0 >= t23)
          throw $.ioore(0);
        t24 = t18[0];
        t25 = cp1.get$rA().storage;
        if (1 >= t25.length)
          throw $.ioore(1);
        t25 = t25[1];
        t26 = t14.length;
        if (0 >= t26)
          throw $.ioore(0);
        t14[0] = t21 * t19 + t16 - t24 + wA * t25;
        t25 = cp1.get$rB().storage;
        if (0 >= t25.length)
          throw $.ioore(0);
        t25 = t25[0];
        if (1 >= t22)
          throw $.ioore(1);
        t22 = t17[1];
        if (1 >= t23)
          throw $.ioore(1);
        t23 = t18[1];
        t24 = cp1.get$rA().storage;
        if (0 >= t24.length)
          throw $.ioore(0);
        t24 = t24[0];
        if (1 >= t26)
          throw $.ioore(1);
        t14[1] = wB * t25 + t22 - t23 - wA * t24;
        t24 = cp2.get$rB().storage;
        if (1 >= t24.length)
          throw $.ioore(1);
        t24 = t24[1];
        t23 = t17[0];
        t22 = t18[0];
        t25 = cp2.get$rA().storage;
        if (1 >= t25.length)
          throw $.ioore(1);
        t25 = t25[1];
        t26 = t15.length;
        if (0 >= t26)
          throw $.ioore(0);
        t15[0] = t21 * t24 + t23 - t22 + wA * t25;
        t25 = cp2.get$rB().storage;
        if (0 >= t25.length)
          throw $.ioore(0);
        t25 = t25[0];
        t22 = t17[1];
        t23 = t18[1];
        t24 = cp2.get$rA().storage;
        if (0 >= t24.length)
          throw $.ioore(0);
        t24 = t24[0];
        if (1 >= t26)
          throw $.ioore(1);
        t15[1] = wB * t25 + t22 - t23 - wA * t24;
        t24 = t14[0];
        t23 = c.get$normal().storage;
        t22 = t23.length;
        if (0 >= t22)
          throw $.ioore(0);
        t25 = t23[0];
        t26 = t14[1];
        if (1 >= t22)
          throw $.ioore(1);
        t23 = t23[1];
        t22 = t15[0];
        t21 = t15[1];
        t16 = cp1.get$velocityBias();
        if (typeof t16 !== "number")
          throw $.iae(t16);
        t19 = cp2.get$velocityBias();
        if (typeof t19 !== "number")
          throw $.iae(t19);
        b = new $.Vector2(new Float32Array(2));
        t27 = b.storage;
        t28 = t27.length;
        if (0 >= t28)
          throw $.ioore(0);
        t27[0] = t24 * t25 + t26 * t23 - t16;
        if (1 >= t28)
          throw $.ioore(1);
        t27[1] = t22 * t25 + t21 * t23 - t19;
        t19 = c.get$K().storage;
        t23 = t19.length;
        if (0 >= t23)
          throw $.ioore(0);
        t21 = t19[0];
        t25 = t20.length;
        if (0 >= t25)
          throw $.ioore(0);
        t22 = t20[0];
        if (2 >= t23)
          throw $.ioore(2);
        t19 = t19[2];
        if (1 >= t25)
          throw $.ioore(1);
        t25 = t20[1];
        t23 = t13.length;
        if (0 >= t23)
          throw $.ioore(0);
        t13[0] = t21 * t22 + t19 * t25;
        t25 = c.get$K().storage;
        t19 = t25.length;
        if (1 >= t19)
          throw $.ioore(1);
        t22 = t25[1];
        t21 = t20[0];
        if (3 >= t19)
          throw $.ioore(3);
        t25 = t25[3];
        t20 = t20[1];
        if (1 >= t23)
          throw $.ioore(1);
        t13[1] = t22 * t21 + t25 * t20;
        t27[0] = t27[0] - t13[0];
        t27[1] = t27[1] - t13[1];
        $loop$1: {
          c.get$normalMass().transformed$2(b, t4);
          if (1 >= t6.length)
            throw $.ioore(1);
          t6[1] = t6[1] * -1;
          t6[0] = t6[0] * -1;
          if (t6[0] >= 0 && t6[1] >= 0) {
            t16 = t6[1];
            if (1 >= t5.length)
              throw $.ioore(1);
            t5[1] = t16;
            t5[0] = t6[0];
            t3.sub$1(a);
            t16 = c.get$normal().storage;
            if (1 >= t16.length)
              throw $.ioore(1);
            t19 = t16[1];
            if (1 >= t7.length)
              throw $.ioore(1);
            t7[1] = t19;
            t7[0] = t16[0];
            t16 = t5.length;
            if (0 >= t16)
              throw $.ioore(0);
            t19 = t5[0];
            t7[1] = t7[1] * t19;
            t7[0] = t7[0] * t19;
            t19 = c.get$normal().storage;
            if (1 >= t19.length)
              throw $.ioore(1);
            t20 = t19[1];
            if (1 >= t9.length)
              throw $.ioore(1);
            t9[1] = t20;
            t9[0] = t19[0];
            if (1 >= t16)
              throw $.ioore(1);
            t16 = t5[1];
            t9[1] = t9[1] * t16;
            t9[0] = t9[0] * t16;
            t16 = t7[1];
            if (1 >= t11.length)
              throw $.ioore(1);
            t11[1] = t16;
            t11[0] = t7[0];
            t10.add$1(t10, t8);
            if (1 >= t11.length)
              throw $.ioore(1);
            t16 = t11[1];
            if (1 >= t13.length)
              throw $.ioore(1);
            t13[1] = t16;
            t13[0] = t11[0];
            t13[1] = t13[1] * invMassA;
            t13[0] = t13[0] * invMassA;
            vA.sub$1(t12);
            if (1 >= t11.length)
              throw $.ioore(1);
            t16 = t11[1];
            if (1 >= t13.length)
              throw $.ioore(1);
            t13[1] = t16;
            t13[0] = t11[0];
            t13[1] = t13[1] * invMassB;
            t13[0] = t13[0] * invMassB;
            vB.add$1(vB, t12);
            t16 = cp1.get$rA().storage;
            t19 = t16.length;
            if (0 >= t19)
              throw $.ioore(0);
            t20 = t16[0];
            if (1 >= t7.length)
              throw $.ioore(1);
            t21 = t7[1];
            if (1 >= t19)
              throw $.ioore(1);
            t16 = t16[1];
            t19 = t7[0];
            t22 = cp2.get$rA().storage;
            t23 = t22.length;
            if (0 >= t23)
              throw $.ioore(0);
            t24 = t22[0];
            if (1 >= t9.length)
              throw $.ioore(1);
            t25 = t9[1];
            if (1 >= t23)
              throw $.ioore(1);
            t22 = t22[1];
            t23 = t9[0];
            wA -= invIA * (t20 * t21 - t16 * t19 + (t24 * t25 - t22 * t23));
            t22 = cp1.get$rB().storage;
            t24 = t22.length;
            if (0 >= t24)
              throw $.ioore(0);
            t16 = t22[0];
            if (1 >= t24)
              throw $.ioore(1);
            t22 = t22[1];
            t24 = cp2.get$rB().storage;
            t20 = t24.length;
            if (0 >= t20)
              throw $.ioore(0);
            t26 = t24[0];
            if (1 >= t20)
              throw $.ioore(1);
            wB += invIB * (t16 * t21 - t22 * t19 + (t26 * t25 - t24[1] * t23));
            if (0 >= t6.length)
              throw $.ioore(0);
            cp1.set$normalImpulse(t6[0]);
            if (1 >= t6.length)
              throw $.ioore(1);
            cp2.set$normalImpulse(t6[1]);
            break $loop$1;
          }
          t16 = cp1.get$normalMass();
          if (typeof t16 !== "number")
            return this.solveVelocityConstraints$0$bailout(10, t10, t11, t2, t14, i, t15, t12, bodyA, t13, wA, t9, bodyB, c, t3, t5, t6, t4, t1, t8, t7, wB, 0, t16, vA, invMassA, invIA, invIB, invMassB, vB, t17, t18, 0, 0, 0, 0, C.JSNumber_methods, 0, 0, 0, C.JSNumber_methods, 0, 0, cp2, a, t27, cp1);
          t19 = t27.length;
          if (0 >= t19)
            throw $.ioore(0);
          t6[0] = -t16 * t27[0];
          t6[1] = 0;
          t16 = c.get$K().storage;
          if (1 >= t16.length)
            throw $.ioore(1);
          t16 = t16[1];
          t20 = t6[0];
          if (1 >= t19)
            throw $.ioore(1);
          t19 = t27[1];
          if (t20 >= 0 && t16 * t20 + t19 >= 0) {
            t16 = t6[1];
            if (1 >= t5.length)
              throw $.ioore(1);
            t5[1] = t16;
            t5[0] = t6[0];
            t3.sub$1(a);
            t16 = c.get$normal().storage;
            if (1 >= t16.length)
              throw $.ioore(1);
            t19 = t16[1];
            if (1 >= t7.length)
              throw $.ioore(1);
            t7[1] = t19;
            t7[0] = t16[0];
            t16 = t5.length;
            if (0 >= t16)
              throw $.ioore(0);
            t19 = t5[0];
            t7[1] = t7[1] * t19;
            t7[0] = t7[0] * t19;
            t19 = c.get$normal().storage;
            if (1 >= t19.length)
              throw $.ioore(1);
            t20 = t19[1];
            if (1 >= t9.length)
              throw $.ioore(1);
            t9[1] = t20;
            t9[0] = t19[0];
            if (1 >= t16)
              throw $.ioore(1);
            t16 = t5[1];
            t9[1] = t9[1] * t16;
            t9[0] = t9[0] * t16;
            t16 = t7[1];
            if (1 >= t11.length)
              throw $.ioore(1);
            t11[1] = t16;
            t11[0] = t7[0];
            t10.add$1(t10, t8);
            if (1 >= t11.length)
              throw $.ioore(1);
            t16 = t11[1];
            if (1 >= t13.length)
              throw $.ioore(1);
            t13[1] = t16;
            t13[0] = t11[0];
            t13[1] = t13[1] * invMassA;
            t13[0] = t13[0] * invMassA;
            vA.sub$1(t12);
            if (1 >= t11.length)
              throw $.ioore(1);
            t16 = t11[1];
            if (1 >= t13.length)
              throw $.ioore(1);
            t13[1] = t16;
            t13[0] = t11[0];
            t13[1] = t13[1] * invMassB;
            t13[0] = t13[0] * invMassB;
            vB.add$1(vB, t12);
            t16 = cp1.get$rA().storage;
            t19 = t16.length;
            if (0 >= t19)
              throw $.ioore(0);
            t20 = t16[0];
            if (1 >= t7.length)
              throw $.ioore(1);
            t21 = t7[1];
            if (1 >= t19)
              throw $.ioore(1);
            t16 = t16[1];
            t19 = t7[0];
            t22 = cp2.get$rA().storage;
            t23 = t22.length;
            if (0 >= t23)
              throw $.ioore(0);
            t24 = t22[0];
            if (1 >= t9.length)
              throw $.ioore(1);
            t25 = t9[1];
            if (1 >= t23)
              throw $.ioore(1);
            t22 = t22[1];
            t23 = t9[0];
            wA -= invIA * (t20 * t21 - t16 * t19 + (t24 * t25 - t22 * t23));
            t22 = cp1.get$rB().storage;
            t24 = t22.length;
            if (0 >= t24)
              throw $.ioore(0);
            t16 = t22[0];
            if (1 >= t24)
              throw $.ioore(1);
            t22 = t22[1];
            t24 = cp2.get$rB().storage;
            t20 = t24.length;
            if (0 >= t20)
              throw $.ioore(0);
            t26 = t24[0];
            if (1 >= t20)
              throw $.ioore(1);
            wB += invIB * (t16 * t21 - t22 * t19 + (t26 * t25 - t24[1] * t23));
            if (0 >= t6.length)
              throw $.ioore(0);
            cp1.set$normalImpulse(t6[0]);
            if (1 >= t6.length)
              throw $.ioore(1);
            cp2.set$normalImpulse(t6[1]);
            break $loop$1;
          }
          t6[0] = 0;
          t16 = cp2.get$normalMass();
          if (typeof t16 !== "number")
            return this.solveVelocityConstraints$0$bailout(11, t10, t11, t2, t14, i, t15, t12, bodyA, t13, wA, t9, bodyB, c, t3, t5, t6, t4, t1, t8, t7, wB, 0, t16, vA, invMassA, invIA, invIB, invMassB, vB, t17, t18, 0, 0, 0, 0, C.JSNumber_methods, 0, 0, 0, C.JSNumber_methods, 0, 0, cp2, a, t27, cp1);
          t6[1] = -t16 * t27[1];
          t16 = c.get$K().storage;
          if (2 >= t16.length)
            throw $.ioore(2);
          t16 = t16[2];
          t19 = t6[1];
          t20 = t27[0];
          if (t19 >= 0 && t16 * t19 + t20 >= 0) {
            if (1 >= t5.length)
              throw $.ioore(1);
            t5[1] = t19;
            t5[0] = t6[0];
            t3.sub$1(a);
            t16 = c.get$normal().storage;
            if (1 >= t16.length)
              throw $.ioore(1);
            t19 = t16[1];
            if (1 >= t7.length)
              throw $.ioore(1);
            t7[1] = t19;
            t7[0] = t16[0];
            t16 = t5.length;
            if (0 >= t16)
              throw $.ioore(0);
            t19 = t5[0];
            t7[1] = t7[1] * t19;
            t7[0] = t7[0] * t19;
            t19 = c.get$normal().storage;
            if (1 >= t19.length)
              throw $.ioore(1);
            t20 = t19[1];
            if (1 >= t9.length)
              throw $.ioore(1);
            t9[1] = t20;
            t9[0] = t19[0];
            if (1 >= t16)
              throw $.ioore(1);
            t16 = t5[1];
            t9[1] = t9[1] * t16;
            t9[0] = t9[0] * t16;
            t16 = t7[1];
            if (1 >= t11.length)
              throw $.ioore(1);
            t11[1] = t16;
            t11[0] = t7[0];
            t10.add$1(t10, t8);
            if (1 >= t11.length)
              throw $.ioore(1);
            t16 = t11[1];
            if (1 >= t13.length)
              throw $.ioore(1);
            t13[1] = t16;
            t13[0] = t11[0];
            t13[1] = t13[1] * invMassA;
            t13[0] = t13[0] * invMassA;
            vA.sub$1(t12);
            if (1 >= t11.length)
              throw $.ioore(1);
            t16 = t11[1];
            if (1 >= t13.length)
              throw $.ioore(1);
            t13[1] = t16;
            t13[0] = t11[0];
            t13[1] = t13[1] * invMassB;
            t13[0] = t13[0] * invMassB;
            vB.add$1(vB, t12);
            t16 = cp1.get$rA().storage;
            t19 = t16.length;
            if (0 >= t19)
              throw $.ioore(0);
            t20 = t16[0];
            if (1 >= t7.length)
              throw $.ioore(1);
            t21 = t7[1];
            if (1 >= t19)
              throw $.ioore(1);
            t16 = t16[1];
            t19 = t7[0];
            t22 = cp2.get$rA().storage;
            t23 = t22.length;
            if (0 >= t23)
              throw $.ioore(0);
            t24 = t22[0];
            if (1 >= t9.length)
              throw $.ioore(1);
            t25 = t9[1];
            if (1 >= t23)
              throw $.ioore(1);
            t22 = t22[1];
            t23 = t9[0];
            wA -= invIA * (t20 * t21 - t16 * t19 + (t24 * t25 - t22 * t23));
            t22 = cp1.get$rB().storage;
            t24 = t22.length;
            if (0 >= t24)
              throw $.ioore(0);
            t16 = t22[0];
            if (1 >= t24)
              throw $.ioore(1);
            t22 = t22[1];
            t24 = cp2.get$rB().storage;
            t20 = t24.length;
            if (0 >= t20)
              throw $.ioore(0);
            t26 = t24[0];
            if (1 >= t20)
              throw $.ioore(1);
            wB += invIB * (t16 * t21 - t22 * t19 + (t26 * t25 - t24[1] * t23));
            if (0 >= t6.length)
              throw $.ioore(0);
            cp1.set$normalImpulse(t6[0]);
            if (1 >= t6.length)
              throw $.ioore(1);
            cp2.set$normalImpulse(t6[1]);
            break $loop$1;
          }
          t6[0] = 0;
          t6[1] = 0;
          vn1 = t27[0];
          vn2 = t27[1];
          if (vn1 >= 0 && vn2 >= 0) {
            t16 = t6[1];
            if (1 >= t5.length)
              throw $.ioore(1);
            t5[1] = t16;
            t5[0] = t6[0];
            t3.sub$1(a);
            t16 = c.get$normal().storage;
            if (1 >= t16.length)
              throw $.ioore(1);
            t19 = t16[1];
            if (1 >= t7.length)
              throw $.ioore(1);
            t7[1] = t19;
            t7[0] = t16[0];
            t16 = t5.length;
            if (0 >= t16)
              throw $.ioore(0);
            t19 = t5[0];
            t7[1] = t7[1] * t19;
            t7[0] = t7[0] * t19;
            t19 = c.get$normal().storage;
            if (1 >= t19.length)
              throw $.ioore(1);
            t20 = t19[1];
            if (1 >= t9.length)
              throw $.ioore(1);
            t9[1] = t20;
            t9[0] = t19[0];
            if (1 >= t16)
              throw $.ioore(1);
            t16 = t5[1];
            t9[1] = t9[1] * t16;
            t9[0] = t9[0] * t16;
            t16 = t7[1];
            if (1 >= t11.length)
              throw $.ioore(1);
            t11[1] = t16;
            t11[0] = t7[0];
            t10.add$1(t10, t8);
            if (1 >= t11.length)
              throw $.ioore(1);
            t16 = t11[1];
            if (1 >= t13.length)
              throw $.ioore(1);
            t13[1] = t16;
            t13[0] = t11[0];
            t13[1] = t13[1] * invMassA;
            t13[0] = t13[0] * invMassA;
            vA.sub$1(t12);
            if (1 >= t11.length)
              throw $.ioore(1);
            t16 = t11[1];
            if (1 >= t13.length)
              throw $.ioore(1);
            t13[1] = t16;
            t13[0] = t11[0];
            t13[1] = t13[1] * invMassB;
            t13[0] = t13[0] * invMassB;
            vB.add$1(vB, t12);
            t16 = cp1.get$rA().storage;
            t19 = t16.length;
            if (0 >= t19)
              throw $.ioore(0);
            t20 = t16[0];
            if (1 >= t7.length)
              throw $.ioore(1);
            t21 = t7[1];
            if (1 >= t19)
              throw $.ioore(1);
            t16 = t16[1];
            t19 = t7[0];
            t22 = cp2.get$rA().storage;
            t23 = t22.length;
            if (0 >= t23)
              throw $.ioore(0);
            t24 = t22[0];
            if (1 >= t9.length)
              throw $.ioore(1);
            t25 = t9[1];
            if (1 >= t23)
              throw $.ioore(1);
            t22 = t22[1];
            t23 = t9[0];
            wA -= invIA * (t20 * t21 - t16 * t19 + (t24 * t25 - t22 * t23));
            t16 = cp2.get$rB().storage;
            t20 = t16.length;
            if (0 >= t20)
              throw $.ioore(0);
            t26 = t16[0];
            if (1 >= t20)
              throw $.ioore(1);
            wB += invIB * (t24 * t21 - t22 * t19 + (t26 * t25 - t16[1] * t23));
            if (0 >= t6.length)
              throw $.ioore(0);
            cp1.set$normalImpulse(t6[0]);
            if (1 >= t6.length)
              throw $.ioore(1);
            cp2.set$normalImpulse(t6[1]);
            break $loop$1;
          }
          break $loop$1;
        }
      }
      t16 = bodyA.get$linearVelocity().storage;
      if (1 >= t18.length)
        throw $.ioore(1);
      t19 = t18[1];
      if (1 >= t16.length)
        throw $.ioore(1);
      t16[1] = t19;
      t16[0] = t18[0];
      bodyA.set$angularVelocity(wA);
      t18 = bodyB.get$linearVelocity().storage;
      if (1 >= t17.length)
        throw $.ioore(1);
      t16 = t17[1];
      if (1 >= t18.length)
        throw $.ioore(1);
      t18[1] = t16;
      t18[0] = t17[0];
      bodyB.set$angularVelocity(wB);
      ++i;
    }
  },
  solveVelocityConstraints$0$bailout: function(state0, t10, t11, t2, t14, i, t15, t12, bodyA, t13, wA, t9, bodyB, c, t3, t5, t6, t4, t1, t8, t7, wB, t19, t16, vA, invMassA, invIA, invIB, invMassB, vB, t17, t18, friction, j, ccp, t22, t21, lambda, maxFriction, newImpulse, t20, vn, t24, cp2, a, t29, cp1) {
    switch (state0) {
      case 0:
        t1 = this.dv.storage;
        t2 = this.tangent.storage;
        t3 = this.d;
        t4 = this.x;
        t5 = t3.storage;
        t6 = t4.storage;
        t7 = this.P1.storage;
        t8 = this.P2;
        t9 = t8.storage;
        t10 = this.temp1;
        t11 = t10.storage;
        t12 = this.temp2;
        t13 = t12.storage;
        t14 = this.dv1.storage;
        t15 = this.dv2.storage;
        i = 0;
      default:
        var t23, Px, Py, a1, b, t25, t26, t27, t28, t30, vn1, vn2;
        L0:
          while (true)
            switch (state0) {
              case 0:
                t16 = this.constraintCount;
                if (t16 == null)
                  throw $.iae(t16);
                if (!(i < t16))
                  break L0;
                t16 = this.constraints;
                if (i >= t16.length)
                  throw $.ioore(i);
                c = t16[i];
                bodyA = c.get$bodyA();
                bodyB = c.get$bodyB();
                wA = bodyA.get$angularVelocity();
              case 1:
                state0 = 0;
                wB = bodyB.get$angularVelocity();
              case 2:
                state0 = 0;
                vA = bodyA.get$linearVelocity();
                vB = bodyB.get$linearVelocity();
                invMassA = bodyA.get$invMass();
                invIA = bodyA.get$invInertia();
                invMassB = bodyB.get$invMass();
                invIB = bodyB.get$invInertia();
                t16 = c.get$normal().storage;
                if (1 >= t16.length)
                  throw $.ioore(1);
                t16 = t16[1];
                t17 = t2.length;
                if (0 >= t17)
                  throw $.ioore(0);
                t2[0] = 1 * t16;
                t16 = c.get$normal().storage;
                if (0 >= t16.length)
                  throw $.ioore(0);
                t16 = t16[0];
                if (1 >= t17)
                  throw $.ioore(1);
                t2[1] = -1 * t16;
                friction = c.get$friction();
                t16 = $.getInterceptor$x(c);
                t17 = vB.storage;
                t18 = vA.storage;
                j = 0;
              default:
                L1:
                  while (true)
                    switch (state0) {
                      case 0:
                        t19 = c.get$pointCount();
                        if (typeof t19 !== "number")
                          throw $.iae(t19);
                        if (!(j < t19))
                          break L1;
                        t19 = t16.get$points(c);
                      case 3:
                        state0 = 0;
                        ccp = $.$index$asx(t19, j);
                        a = ccp.get$rA();
                        t19 = $.getInterceptor$n(wB);
                        t20 = t19.$negate(wB);
                        t21 = ccp.get$rB().storage;
                        if (1 >= t21.length)
                          throw $.ioore(1);
                        t21 = $.$mul$n(t20, t21[1]);
                        if (0 >= t17.length)
                          throw $.ioore(0);
                        t21 = $.$add$ns(t21, t17[0]);
                        if (0 >= t18.length)
                          throw $.ioore(0);
                        t21 = $.$sub$n(t21, t18[0]);
                        t20 = a.storage;
                        if (1 >= t20.length)
                          throw $.ioore(1);
                        t22 = $.getInterceptor$n(wA);
                        t21 = $.$add$ns(t21, t22.$mul(wA, t20[1]));
                        if (0 >= t1.length)
                          throw $.ioore(0);
                        t1[0] = t21;
                        t21 = ccp.get$rB().storage;
                        if (0 >= t21.length)
                          throw $.ioore(0);
                        t21 = t19.$mul(wB, t21[0]);
                        if (1 >= t17.length)
                          throw $.ioore(1);
                        t21 = $.$add$ns(t21, t17[1]);
                        if (1 >= t18.length)
                          throw $.ioore(1);
                        t21 = $.$sub$n(t21, t18[1]);
                        if (0 >= t20.length)
                          throw $.ioore(0);
                        t20 = $.$sub$n(t21, t22.$mul(wA, t20[0]));
                        if (1 >= t1.length)
                          throw $.ioore(1);
                        t1[1] = t20;
                        t20 = t1[0];
                        t21 = t2.length;
                        if (0 >= t21)
                          throw $.ioore(0);
                        t23 = t2[0];
                        t24 = t1[1];
                        if (1 >= t21)
                          throw $.ioore(1);
                        t21 = t2[1];
                        lambda = ccp.get$tangentMass() * -(t20 * t23 + t24 * t21);
                        t21 = ccp.get$normalImpulse();
                        if (friction == null)
                          throw friction.$mul();
                        if (typeof t21 !== "number")
                          throw $.iae(t21);
                        maxFriction = friction * t21;
                        t21 = ccp.get$tangentImpulse();
                      case 4:
                        state0 = 0;
                        newImpulse = $.max(-maxFriction, $.min($.$add$ns(t21, lambda), maxFriction));
                      case 5:
                        state0 = 0;
                        t21 = ccp.get$tangentImpulse();
                      case 6:
                        state0 = 0;
                        lambda = $.$sub$n(newImpulse, t21);
                        t21 = t2.length;
                        if (0 >= t21)
                          throw $.ioore(0);
                        t24 = t2[0];
                        if (typeof lambda !== "number")
                          throw $.iae(lambda);
                        Px = t24 * lambda;
                        if (1 >= t21)
                          throw $.ioore(1);
                        Py = t2[1] * lambda;
                        t21 = t18.length;
                        if (0 >= t21)
                          throw $.ioore(0);
                        t18[0] = t18[0] - Px * invMassA;
                        if (1 >= t21)
                          throw $.ioore(1);
                        t18[1] = t18[1] - Py * invMassA;
                        t21 = ccp.get$rA().storage;
                        t24 = t21.length;
                        if (0 >= t24)
                          throw $.ioore(0);
                        t23 = t21[0];
                        if (1 >= t24)
                          throw $.ioore(1);
                        wA = t22.$sub(wA, invIA * (t23 * Py - t21[1] * Px));
                        t21 = t17.length;
                        if (0 >= t21)
                          throw $.ioore(0);
                        t17[0] = t17[0] + Px * invMassB;
                        if (1 >= t21)
                          throw $.ioore(1);
                        t17[1] = t17[1] + Py * invMassB;
                        t21 = ccp.get$rB().storage;
                        t23 = t21.length;
                        if (0 >= t23)
                          throw $.ioore(0);
                        t22 = t21[0];
                        if (1 >= t23)
                          throw $.ioore(1);
                        wB = t19.$add(wB, invIB * (t22 * Py - t21[1] * Px));
                        ccp.set$tangentImpulse(newImpulse);
                        ++j;
                    }
                t19 = t19 === 1;
                t20 = $.getInterceptor$n(wA);
                t16 = t16.get$points(c);
              case 7:
                state0 = 0;
                t21 = $.getInterceptor$ns(wB);
              case 8:
              case 9:
              case 10:
              case 11:
                if (state0 === 9 || state0 === 8 || state0 === 0 && t19)
                  switch (state0) {
                    case 0:
                      ccp = $.$index$asx(t16, 0);
                      a1 = ccp.get$rA();
                      t16 = t21.$negate(wB);
                      t19 = ccp.get$rB().storage;
                      if (1 >= t19.length)
                        throw $.ioore(1);
                      t19 = $.$mul$n(t16, t19[1]);
                      if (0 >= t17.length)
                        throw $.ioore(0);
                      t19 = $.$add$ns(t19, t17[0]);
                      if (0 >= t18.length)
                        throw $.ioore(0);
                      t19 = $.$sub$n(t19, t18[0]);
                      t16 = a1.storage;
                      if (1 >= t16.length)
                        throw $.ioore(1);
                      t19 = $.$add$ns(t19, t20.$mul(wA, t16[1]));
                      if (0 >= t1.length)
                        throw $.ioore(0);
                      t1[0] = t19;
                      t19 = ccp.get$rB().storage;
                      if (0 >= t19.length)
                        throw $.ioore(0);
                      t19 = t21.$mul(wB, t19[0]);
                      if (1 >= t17.length)
                        throw $.ioore(1);
                      t19 = $.$add$ns(t19, t17[1]);
                      if (1 >= t18.length)
                        throw $.ioore(1);
                      t19 = $.$sub$n(t19, t18[1]);
                      if (0 >= t16.length)
                        throw $.ioore(0);
                      t16 = $.$sub$n(t19, t20.$mul(wA, t16[0]));
                      if (1 >= t1.length)
                        throw $.ioore(1);
                      t1[1] = t16;
                      b = c.get$normal();
                      t16 = t1[0];
                      t19 = b.storage;
                      t22 = t19.length;
                      if (0 >= t22)
                        throw $.ioore(0);
                      t23 = t19[0];
                      t24 = t1[1];
                      if (1 >= t22)
                        throw $.ioore(1);
                      vn = t16 * t23 + t24 * t19[1];
                      t19 = ccp.get$normalMass();
                    case 8:
                      state0 = 0;
                      t19 = $.$negate$n(t19);
                      t24 = ccp.get$velocityBias();
                      if (typeof t24 !== "number")
                        throw $.iae(t24);
                      lambda = $.$mul$n(t19, vn - t24);
                      t24 = ccp.get$normalImpulse();
                    case 9:
                      state0 = 0;
                      a = $.$add$ns(t24, lambda);
                      newImpulse = $.$gt$n(a, 0) ? a : 0;
                      t16 = ccp.get$normalImpulse();
                      if (typeof t16 !== "number")
                        throw $.iae(t16);
                      lambda = $.$sub$n(newImpulse, t16);
                      t16 = c.get$normal().storage;
                      t19 = t16.length;
                      if (0 >= t19)
                        throw $.ioore(0);
                      t22 = t16[0];
                      if (typeof lambda !== "number")
                        throw $.iae(lambda);
                      Px = t22 * lambda;
                      if (1 >= t19)
                        throw $.ioore(1);
                      Py = t16[1] * lambda;
                      t16 = t18.length;
                      if (0 >= t16)
                        throw $.ioore(0);
                      t18[0] = t18[0] - Px * invMassA;
                      if (1 >= t16)
                        throw $.ioore(1);
                      t18[1] = t18[1] - Py * invMassA;
                      t16 = ccp.get$rA().storage;
                      t19 = t16.length;
                      if (0 >= t19)
                        throw $.ioore(0);
                      t22 = t16[0];
                      if (1 >= t19)
                        throw $.ioore(1);
                      wA = t20.$sub(wA, invIA * (t22 * Py - t16[1] * Px));
                      t16 = t17.length;
                      if (0 >= t16)
                        throw $.ioore(0);
                      t17[0] = t17[0] + Px * invMassB;
                      if (1 >= t16)
                        throw $.ioore(1);
                      t17[1] = t17[1] + Py * invMassB;
                      t16 = ccp.get$rB().storage;
                      t22 = t16.length;
                      if (0 >= t22)
                        throw $.ioore(0);
                      t20 = t16[0];
                      if (1 >= t22)
                        throw $.ioore(1);
                      wB = t21.$add(wB, invIB * (t20 * Py - t16[1] * Px));
                      ccp.set$normalImpulse(newImpulse);
                  }
                else
                  switch (state0) {
                    case 0:
                      t19 = $.getInterceptor$asx(t16);
                      cp1 = t19.$index(t16, 0);
                      cp2 = t19.$index(t16, 1);
                      t16 = cp1.get$normalImpulse();
                      t19 = cp2.get$normalImpulse();
                      a = new $.Vector2(new Float32Array(2));
                      t22 = a.storage;
                      t23 = t22.length;
                      if (0 >= t23)
                        throw $.ioore(0);
                      t22[0] = t16;
                      if (1 >= t23)
                        throw $.ioore(1);
                      t22[1] = t19;
                      t19 = t21.$negate(wB);
                      t23 = cp1.get$rB().storage;
                      if (1 >= t23.length)
                        throw $.ioore(1);
                      t23 = $.$mul$n(t19, t23[1]);
                      if (0 >= t17.length)
                        throw $.ioore(0);
                      t23 = $.$add$ns(t23, t17[0]);
                      if (0 >= t18.length)
                        throw $.ioore(0);
                      t23 = $.$sub$n(t23, t18[0]);
                      t19 = cp1.get$rA().storage;
                      if (1 >= t19.length)
                        throw $.ioore(1);
                      t19 = $.$add$ns(t23, t20.$mul(wA, t19[1]));
                      if (0 >= t14.length)
                        throw $.ioore(0);
                      t14[0] = t19;
                      t19 = cp1.get$rB().storage;
                      if (0 >= t19.length)
                        throw $.ioore(0);
                      t19 = t21.$mul(wB, t19[0]);
                      if (1 >= t17.length)
                        throw $.ioore(1);
                      t19 = $.$add$ns(t19, t17[1]);
                      if (1 >= t18.length)
                        throw $.ioore(1);
                      t19 = $.$sub$n(t19, t18[1]);
                      t23 = cp1.get$rA().storage;
                      if (0 >= t23.length)
                        throw $.ioore(0);
                      t23 = $.$sub$n(t19, t20.$mul(wA, t23[0]));
                      if (1 >= t14.length)
                        throw $.ioore(1);
                      t14[1] = t23;
                      t23 = t21.$negate(wB);
                      t19 = cp2.get$rB().storage;
                      if (1 >= t19.length)
                        throw $.ioore(1);
                      t19 = $.$mul$n(t23, t19[1]);
                      if (0 >= t17.length)
                        throw $.ioore(0);
                      t19 = $.$add$ns(t19, t17[0]);
                      if (0 >= t18.length)
                        throw $.ioore(0);
                      t19 = $.$sub$n(t19, t18[0]);
                      t23 = cp2.get$rA().storage;
                      if (1 >= t23.length)
                        throw $.ioore(1);
                      t23 = $.$add$ns(t19, t20.$mul(wA, t23[1]));
                      if (0 >= t15.length)
                        throw $.ioore(0);
                      t15[0] = t23;
                      t23 = cp2.get$rB().storage;
                      if (0 >= t23.length)
                        throw $.ioore(0);
                      t23 = t21.$mul(wB, t23[0]);
                      if (1 >= t17.length)
                        throw $.ioore(1);
                      t23 = $.$add$ns(t23, t17[1]);
                      if (1 >= t18.length)
                        throw $.ioore(1);
                      t23 = $.$sub$n(t23, t18[1]);
                      t19 = cp2.get$rA().storage;
                      if (0 >= t19.length)
                        throw $.ioore(0);
                      t19 = $.$sub$n(t23, t20.$mul(wA, t19[0]));
                      if (1 >= t15.length)
                        throw $.ioore(1);
                      t15[1] = t19;
                      t19 = t14.length;
                      if (0 >= t19)
                        throw $.ioore(0);
                      t23 = t14[0];
                      t16 = c.get$normal().storage;
                      t24 = t16.length;
                      if (0 >= t24)
                        throw $.ioore(0);
                      t25 = t16[0];
                      if (1 >= t19)
                        throw $.ioore(1);
                      t19 = t14[1];
                      if (1 >= t24)
                        throw $.ioore(1);
                      t16 = t16[1];
                      t24 = t15[0];
                      t26 = t15[1];
                      t27 = cp1.get$velocityBias();
                      if (typeof t27 !== "number")
                        throw $.iae(t27);
                      t28 = cp2.get$velocityBias();
                      if (typeof t28 !== "number")
                        throw $.iae(t28);
                      b = new $.Vector2(new Float32Array(2));
                      t29 = b.storage;
                      t30 = t29.length;
                      if (0 >= t30)
                        throw $.ioore(0);
                      t29[0] = t23 * t25 + t19 * t16 - t27;
                      if (1 >= t30)
                        throw $.ioore(1);
                      t29[1] = t24 * t25 + t26 * t16 - t28;
                      t28 = c.get$K().storage;
                      t16 = t28.length;
                      if (0 >= t16)
                        throw $.ioore(0);
                      t26 = t28[0];
                      t25 = t22.length;
                      if (0 >= t25)
                        throw $.ioore(0);
                      t24 = t22[0];
                      if (2 >= t16)
                        throw $.ioore(2);
                      t28 = t28[2];
                      if (1 >= t25)
                        throw $.ioore(1);
                      t25 = t22[1];
                      t16 = t13.length;
                      if (0 >= t16)
                        throw $.ioore(0);
                      t13[0] = t26 * t24 + t28 * t25;
                      t25 = c.get$K().storage;
                      t28 = t25.length;
                      if (1 >= t28)
                        throw $.ioore(1);
                      t24 = t25[1];
                      t26 = t22[0];
                      if (3 >= t28)
                        throw $.ioore(3);
                      t25 = t25[3];
                      t22 = t22[1];
                      if (1 >= t16)
                        throw $.ioore(1);
                      t13[1] = t24 * t26 + t25 * t22;
                      t29[0] = t29[0] - t13[0];
                      t29[1] = t29[1] - t13[1];
                    default:
                      $loop$1: {
                        switch (state0) {
                          case 0:
                            c.get$normalMass().transformed$2(b, t4);
                            if (1 >= t6.length)
                              throw $.ioore(1);
                            t6[1] = t6[1] * -1;
                            t6[0] = t6[0] * -1;
                            if (t6[0] >= 0 && t6[1] >= 0) {
                              t16 = t6[1];
                              if (1 >= t5.length)
                                throw $.ioore(1);
                              t5[1] = t16;
                              t5[0] = t6[0];
                              t3.sub$1(a);
                              t16 = c.get$normal().storage;
                              if (1 >= t16.length)
                                throw $.ioore(1);
                              t19 = t16[1];
                              if (1 >= t7.length)
                                throw $.ioore(1);
                              t7[1] = t19;
                              t7[0] = t16[0];
                              t16 = t5.length;
                              if (0 >= t16)
                                throw $.ioore(0);
                              t19 = t5[0];
                              t7[1] = t7[1] * t19;
                              t7[0] = t7[0] * t19;
                              t19 = c.get$normal().storage;
                              if (1 >= t19.length)
                                throw $.ioore(1);
                              t22 = t19[1];
                              if (1 >= t9.length)
                                throw $.ioore(1);
                              t9[1] = t22;
                              t9[0] = t19[0];
                              if (1 >= t16)
                                throw $.ioore(1);
                              t16 = t5[1];
                              t9[1] = t9[1] * t16;
                              t9[0] = t9[0] * t16;
                              t16 = t7[1];
                              if (1 >= t11.length)
                                throw $.ioore(1);
                              t11[1] = t16;
                              t11[0] = t7[0];
                              t10.add$1(t10, t8);
                              if (1 >= t11.length)
                                throw $.ioore(1);
                              t16 = t11[1];
                              if (1 >= t13.length)
                                throw $.ioore(1);
                              t13[1] = t16;
                              t13[0] = t11[0];
                              t13[1] = t13[1] * invMassA;
                              t13[0] = t13[0] * invMassA;
                              vA.sub$1(t12);
                              if (1 >= t11.length)
                                throw $.ioore(1);
                              t16 = t11[1];
                              if (1 >= t13.length)
                                throw $.ioore(1);
                              t13[1] = t16;
                              t13[0] = t11[0];
                              t13[1] = t13[1] * invMassB;
                              t13[0] = t13[0] * invMassB;
                              vB.add$1(vB, t12);
                              t16 = cp1.get$rA().storage;
                              t19 = t16.length;
                              if (0 >= t19)
                                throw $.ioore(0);
                              t22 = t16[0];
                              if (1 >= t7.length)
                                throw $.ioore(1);
                              t23 = t7[1];
                              if (1 >= t19)
                                throw $.ioore(1);
                              t16 = t16[1];
                              t19 = t7[0];
                              t24 = cp2.get$rA().storage;
                              t25 = t24.length;
                              if (0 >= t25)
                                throw $.ioore(0);
                              t26 = t24[0];
                              if (1 >= t9.length)
                                throw $.ioore(1);
                              t27 = t9[1];
                              if (1 >= t25)
                                throw $.ioore(1);
                              wA = t20.$sub(wA, invIA * (t22 * t23 - t16 * t19 + (t26 * t27 - t24[1] * t9[0])));
                              t24 = cp1.get$rB().storage;
                              t27 = t24.length;
                              if (0 >= t27)
                                throw $.ioore(0);
                              t26 = t24[0];
                              if (1 >= t7.length)
                                throw $.ioore(1);
                              t19 = t7[1];
                              if (1 >= t27)
                                throw $.ioore(1);
                              t24 = t24[1];
                              t27 = t7[0];
                              t16 = cp2.get$rB().storage;
                              t23 = t16.length;
                              if (0 >= t23)
                                throw $.ioore(0);
                              t22 = t16[0];
                              if (1 >= t9.length)
                                throw $.ioore(1);
                              t20 = t9[1];
                              if (1 >= t23)
                                throw $.ioore(1);
                              wB = t21.$add(wB, invIB * (t26 * t19 - t24 * t27 + (t22 * t20 - t16[1] * t9[0])));
                              if (0 >= t6.length)
                                throw $.ioore(0);
                              cp1.set$normalImpulse(t6[0]);
                              if (1 >= t6.length)
                                throw $.ioore(1);
                              cp2.set$normalImpulse(t6[1]);
                              break $loop$1;
                            }
                            t16 = cp1.get$normalMass();
                          case 10:
                            state0 = 0;
                            t16 = $.$negate$n(t16);
                            if (0 >= t29.length)
                              throw $.ioore(0);
                            t16 = $.$mul$n(t16, t29[0]);
                            t19 = t6.length;
                            if (0 >= t19)
                              throw $.ioore(0);
                            t6[0] = t16;
                            if (1 >= t19)
                              throw $.ioore(1);
                            t6[1] = 0;
                            t19 = c.get$K().storage;
                            if (1 >= t19.length)
                              throw $.ioore(1);
                            t19 = t19[1];
                            t16 = t6[0];
                            if (1 >= t29.length)
                              throw $.ioore(1);
                            t22 = t29[1];
                            if (t16 >= 0 && t19 * t16 + t22 >= 0) {
                              t16 = t6[1];
                              if (1 >= t5.length)
                                throw $.ioore(1);
                              t5[1] = t16;
                              t5[0] = t6[0];
                              t3.sub$1(a);
                              t16 = c.get$normal().storage;
                              if (1 >= t16.length)
                                throw $.ioore(1);
                              t19 = t16[1];
                              if (1 >= t7.length)
                                throw $.ioore(1);
                              t7[1] = t19;
                              t7[0] = t16[0];
                              t16 = t5.length;
                              if (0 >= t16)
                                throw $.ioore(0);
                              t19 = t5[0];
                              t7[1] = t7[1] * t19;
                              t7[0] = t7[0] * t19;
                              t19 = c.get$normal().storage;
                              if (1 >= t19.length)
                                throw $.ioore(1);
                              t22 = t19[1];
                              if (1 >= t9.length)
                                throw $.ioore(1);
                              t9[1] = t22;
                              t9[0] = t19[0];
                              if (1 >= t16)
                                throw $.ioore(1);
                              t16 = t5[1];
                              t9[1] = t9[1] * t16;
                              t9[0] = t9[0] * t16;
                              t16 = t7[1];
                              if (1 >= t11.length)
                                throw $.ioore(1);
                              t11[1] = t16;
                              t11[0] = t7[0];
                              t10.add$1(t10, t8);
                              if (1 >= t11.length)
                                throw $.ioore(1);
                              t16 = t11[1];
                              if (1 >= t13.length)
                                throw $.ioore(1);
                              t13[1] = t16;
                              t13[0] = t11[0];
                              t13[1] = t13[1] * invMassA;
                              t13[0] = t13[0] * invMassA;
                              vA.sub$1(t12);
                              if (1 >= t11.length)
                                throw $.ioore(1);
                              t16 = t11[1];
                              if (1 >= t13.length)
                                throw $.ioore(1);
                              t13[1] = t16;
                              t13[0] = t11[0];
                              t13[1] = t13[1] * invMassB;
                              t13[0] = t13[0] * invMassB;
                              vB.add$1(vB, t12);
                              t16 = cp1.get$rA().storage;
                              t19 = t16.length;
                              if (0 >= t19)
                                throw $.ioore(0);
                              t22 = t16[0];
                              if (1 >= t7.length)
                                throw $.ioore(1);
                              t23 = t7[1];
                              if (1 >= t19)
                                throw $.ioore(1);
                              t16 = t16[1];
                              t19 = t7[0];
                              t24 = cp2.get$rA().storage;
                              t25 = t24.length;
                              if (0 >= t25)
                                throw $.ioore(0);
                              t26 = t24[0];
                              if (1 >= t9.length)
                                throw $.ioore(1);
                              t27 = t9[1];
                              if (1 >= t25)
                                throw $.ioore(1);
                              wA = t20.$sub(wA, invIA * (t22 * t23 - t16 * t19 + (t26 * t27 - t24[1] * t9[0])));
                              t24 = cp1.get$rB().storage;
                              t27 = t24.length;
                              if (0 >= t27)
                                throw $.ioore(0);
                              t26 = t24[0];
                              if (1 >= t7.length)
                                throw $.ioore(1);
                              t19 = t7[1];
                              if (1 >= t27)
                                throw $.ioore(1);
                              t24 = t24[1];
                              t27 = t7[0];
                              t16 = cp2.get$rB().storage;
                              t23 = t16.length;
                              if (0 >= t23)
                                throw $.ioore(0);
                              t22 = t16[0];
                              if (1 >= t9.length)
                                throw $.ioore(1);
                              t20 = t9[1];
                              if (1 >= t23)
                                throw $.ioore(1);
                              wB = t21.$add(wB, invIB * (t26 * t19 - t24 * t27 + (t22 * t20 - t16[1] * t9[0])));
                              if (0 >= t6.length)
                                throw $.ioore(0);
                              cp1.set$normalImpulse(t6[0]);
                              if (1 >= t6.length)
                                throw $.ioore(1);
                              cp2.set$normalImpulse(t6[1]);
                              break $loop$1;
                            }
                            t6[0] = 0;
                            t16 = cp2.get$normalMass();
                          case 11:
                            state0 = 0;
                            t16 = $.$negate$n(t16);
                            if (1 >= t29.length)
                              throw $.ioore(1);
                            t16 = $.$mul$n(t16, t29[1]);
                            if (1 >= t6.length)
                              throw $.ioore(1);
                            t6[1] = t16;
                            t16 = c.get$K().storage;
                            if (2 >= t16.length)
                              throw $.ioore(2);
                            t16 = t16[2];
                            t19 = t6[1];
                            t22 = t29.length;
                            if (0 >= t22)
                              throw $.ioore(0);
                            t23 = t29[0];
                            if (t19 >= 0 && t16 * t19 + t23 >= 0) {
                              if (1 >= t5.length)
                                throw $.ioore(1);
                              t5[1] = t19;
                              t5[0] = t6[0];
                              t3.sub$1(a);
                              t16 = c.get$normal().storage;
                              if (1 >= t16.length)
                                throw $.ioore(1);
                              t19 = t16[1];
                              if (1 >= t7.length)
                                throw $.ioore(1);
                              t7[1] = t19;
                              t7[0] = t16[0];
                              t16 = t5.length;
                              if (0 >= t16)
                                throw $.ioore(0);
                              t19 = t5[0];
                              t7[1] = t7[1] * t19;
                              t7[0] = t7[0] * t19;
                              t19 = c.get$normal().storage;
                              if (1 >= t19.length)
                                throw $.ioore(1);
                              t22 = t19[1];
                              if (1 >= t9.length)
                                throw $.ioore(1);
                              t9[1] = t22;
                              t9[0] = t19[0];
                              if (1 >= t16)
                                throw $.ioore(1);
                              t16 = t5[1];
                              t9[1] = t9[1] * t16;
                              t9[0] = t9[0] * t16;
                              t16 = t7[1];
                              if (1 >= t11.length)
                                throw $.ioore(1);
                              t11[1] = t16;
                              t11[0] = t7[0];
                              t10.add$1(t10, t8);
                              if (1 >= t11.length)
                                throw $.ioore(1);
                              t16 = t11[1];
                              if (1 >= t13.length)
                                throw $.ioore(1);
                              t13[1] = t16;
                              t13[0] = t11[0];
                              t13[1] = t13[1] * invMassA;
                              t13[0] = t13[0] * invMassA;
                              vA.sub$1(t12);
                              if (1 >= t11.length)
                                throw $.ioore(1);
                              t16 = t11[1];
                              if (1 >= t13.length)
                                throw $.ioore(1);
                              t13[1] = t16;
                              t13[0] = t11[0];
                              t13[1] = t13[1] * invMassB;
                              t13[0] = t13[0] * invMassB;
                              vB.add$1(vB, t12);
                              t16 = cp1.get$rA().storage;
                              t19 = t16.length;
                              if (0 >= t19)
                                throw $.ioore(0);
                              t22 = t16[0];
                              if (1 >= t7.length)
                                throw $.ioore(1);
                              t23 = t7[1];
                              if (1 >= t19)
                                throw $.ioore(1);
                              t16 = t16[1];
                              t19 = t7[0];
                              t24 = cp2.get$rA().storage;
                              t25 = t24.length;
                              if (0 >= t25)
                                throw $.ioore(0);
                              t26 = t24[0];
                              if (1 >= t9.length)
                                throw $.ioore(1);
                              t27 = t9[1];
                              if (1 >= t25)
                                throw $.ioore(1);
                              wA = t20.$sub(wA, invIA * (t22 * t23 - t16 * t19 + (t26 * t27 - t24[1] * t9[0])));
                              t24 = cp1.get$rB().storage;
                              t27 = t24.length;
                              if (0 >= t27)
                                throw $.ioore(0);
                              t26 = t24[0];
                              if (1 >= t7.length)
                                throw $.ioore(1);
                              t19 = t7[1];
                              if (1 >= t27)
                                throw $.ioore(1);
                              t24 = t24[1];
                              t27 = t7[0];
                              t16 = cp2.get$rB().storage;
                              t23 = t16.length;
                              if (0 >= t23)
                                throw $.ioore(0);
                              t22 = t16[0];
                              if (1 >= t9.length)
                                throw $.ioore(1);
                              t20 = t9[1];
                              if (1 >= t23)
                                throw $.ioore(1);
                              wB = t21.$add(wB, invIB * (t26 * t19 - t24 * t27 + (t22 * t20 - t16[1] * t9[0])));
                              if (0 >= t6.length)
                                throw $.ioore(0);
                              cp1.set$normalImpulse(t6[0]);
                              if (1 >= t6.length)
                                throw $.ioore(1);
                              cp2.set$normalImpulse(t6[1]);
                              break $loop$1;
                            }
                            t6[0] = 0;
                            t6[1] = 0;
                            vn1 = t29[0];
                            if (1 >= t22)
                              throw $.ioore(1);
                            vn2 = t29[1];
                            if (vn1 >= 0 && vn2 >= 0) {
                              t16 = t6[1];
                              if (1 >= t5.length)
                                throw $.ioore(1);
                              t5[1] = t16;
                              t5[0] = t6[0];
                              t3.sub$1(a);
                              t16 = c.get$normal().storage;
                              if (1 >= t16.length)
                                throw $.ioore(1);
                              t19 = t16[1];
                              if (1 >= t7.length)
                                throw $.ioore(1);
                              t7[1] = t19;
                              t7[0] = t16[0];
                              t16 = t5.length;
                              if (0 >= t16)
                                throw $.ioore(0);
                              t19 = t5[0];
                              t7[1] = t7[1] * t19;
                              t7[0] = t7[0] * t19;
                              t19 = c.get$normal().storage;
                              if (1 >= t19.length)
                                throw $.ioore(1);
                              t22 = t19[1];
                              if (1 >= t9.length)
                                throw $.ioore(1);
                              t9[1] = t22;
                              t9[0] = t19[0];
                              if (1 >= t16)
                                throw $.ioore(1);
                              t16 = t5[1];
                              t9[1] = t9[1] * t16;
                              t9[0] = t9[0] * t16;
                              t16 = t7[1];
                              if (1 >= t11.length)
                                throw $.ioore(1);
                              t11[1] = t16;
                              t11[0] = t7[0];
                              t10.add$1(t10, t8);
                              if (1 >= t11.length)
                                throw $.ioore(1);
                              t16 = t11[1];
                              if (1 >= t13.length)
                                throw $.ioore(1);
                              t13[1] = t16;
                              t13[0] = t11[0];
                              t13[1] = t13[1] * invMassA;
                              t13[0] = t13[0] * invMassA;
                              vA.sub$1(t12);
                              if (1 >= t11.length)
                                throw $.ioore(1);
                              t16 = t11[1];
                              if (1 >= t13.length)
                                throw $.ioore(1);
                              t13[1] = t16;
                              t13[0] = t11[0];
                              t13[1] = t13[1] * invMassB;
                              t13[0] = t13[0] * invMassB;
                              vB.add$1(vB, t12);
                              t16 = cp1.get$rA().storage;
                              t19 = t16.length;
                              if (0 >= t19)
                                throw $.ioore(0);
                              t22 = t16[0];
                              if (1 >= t7.length)
                                throw $.ioore(1);
                              t23 = t7[1];
                              if (1 >= t19)
                                throw $.ioore(1);
                              t16 = t16[1];
                              t19 = t7[0];
                              t24 = cp2.get$rA().storage;
                              t25 = t24.length;
                              if (0 >= t25)
                                throw $.ioore(0);
                              t26 = t24[0];
                              if (1 >= t9.length)
                                throw $.ioore(1);
                              t27 = t9[1];
                              if (1 >= t25)
                                throw $.ioore(1);
                              wA = t20.$sub(wA, invIA * (t22 * t23 - t16 * t19 + (t26 * t27 - t24[1] * t9[0])));
                              t24 = cp2.get$rA().storage;
                              t27 = t24.length;
                              if (0 >= t27)
                                throw $.ioore(0);
                              t26 = t24[0];
                              if (1 >= t7.length)
                                throw $.ioore(1);
                              t19 = t7[1];
                              if (1 >= t27)
                                throw $.ioore(1);
                              t24 = t24[1];
                              t27 = t7[0];
                              t16 = cp2.get$rB().storage;
                              t23 = t16.length;
                              if (0 >= t23)
                                throw $.ioore(0);
                              t22 = t16[0];
                              if (1 >= t9.length)
                                throw $.ioore(1);
                              t20 = t9[1];
                              if (1 >= t23)
                                throw $.ioore(1);
                              wB = t21.$add(wB, invIB * (t26 * t19 - t24 * t27 + (t22 * t20 - t16[1] * t9[0])));
                              if (0 >= t6.length)
                                throw $.ioore(0);
                              cp1.set$normalImpulse(t6[0]);
                              if (1 >= t6.length)
                                throw $.ioore(1);
                              cp2.set$normalImpulse(t6[1]);
                              break $loop$1;
                            }
                            break $loop$1;
                        }
                      }
                  }
                t16 = bodyA.get$linearVelocity().storage;
                if (1 >= t18.length)
                  throw $.ioore(1);
                t19 = t18[1];
                if (1 >= t16.length)
                  throw $.ioore(1);
                t16[1] = t19;
                t16[0] = t18[0];
                bodyA.set$angularVelocity(wA);
                t18 = bodyB.get$linearVelocity().storage;
                if (1 >= t17.length)
                  throw $.ioore(1);
                t16 = t17[1];
                if (1 >= t18.length)
                  throw $.ioore(1);
                t18[1] = t16;
                t18[0] = t17[0];
                bodyB.set$angularVelocity(wB);
                ++i;
            }
    }
  },
  storeImpulses$0: function() {
    var i, t1, c, m, t2, j, t3;
    i = 0;
    while (true) {
      t1 = this.constraintCount;
      if (t1 == null)
        throw $.iae(t1);
      if (!(i < t1))
        break;
      t1 = this.constraints;
      if (i >= t1.length)
        throw $.ioore(i);
      c = t1[i];
      m = c.get$manifold();
      t1 = $.getInterceptor$x(m);
      t2 = $.getInterceptor$x(c);
      j = 0;
      while (true) {
        t3 = c.get$pointCount();
        if (typeof t3 !== "number")
          throw $.iae(t3);
        if (!(j < t3))
          break;
        $.$index$asx(t1.get$points(m), j).set$normalImpulse($.$index$asx(t2.get$points(c), j).get$normalImpulse());
        $.$index$asx(t1.get$points(m), j).set$tangentImpulse($.$index$asx(t2.get$points(c), j).get$tangentImpulse());
        ++j;
      }
      ++i;
    }
  },
  solvePositionConstraints$1: function(baumgarte) {
    var t1, t2, t3, t4, t5, t6, t7, psm, t8, t9, minSeparation, i, t10, c, bodyA, bodyB, invMassA, invIA, invMassB, invIB, j, t11, separation, $C, t12, t13, t14, rnA, rnB, K, impulse, t15;
    t1 = this.P.storage;
    t2 = this.temp1;
    t3 = t2.storage;
    t4 = this.rA;
    t5 = t4.storage;
    t6 = this.rB;
    t7 = t6.storage;
    psm = this.psolver;
    t8 = psm.point.storage;
    t9 = psm.normal.storage;
    minSeparation = 0;
    i = 0;
    while (true) {
      t10 = this.constraintCount;
      if (t10 == null)
        throw $.iae(t10);
      if (!(i < t10))
        break;
      t10 = this.constraints;
      if (i >= t10.length)
        throw $.ioore(i);
      c = t10[i];
      bodyA = c.get$bodyA();
      bodyB = c.get$bodyB();
      t10 = bodyA.get$mass();
      invMassA = t10 * bodyA.get$invMass();
      invIA = t10 * bodyA.get$invInertia();
      t10 = bodyB.get$mass();
      invMassB = t10 * bodyB.get$invMass();
      invIB = t10 * bodyB.get$invInertia();
      t10 = invMassA + invMassB;
      j = 0;
      while (true) {
        t11 = c.get$pointCount();
        if (typeof t11 !== "number")
          throw $.iae(t11);
        if (!(j < t11))
          break;
        psm.initialize$2(psm, c, j);
        separation = psm.separation;
        if (1 >= t8.length)
          throw $.ioore(1);
        t11 = t8[1];
        if (1 >= t5.length)
          throw $.ioore(1);
        t5[1] = t11;
        t5[0] = t8[0];
        t4.sub$1(bodyA.get$sweep().center);
        if (1 >= t8.length)
          throw $.ioore(1);
        t11 = t8[1];
        if (1 >= t7.length)
          throw $.ioore(1);
        t7[1] = t11;
        t7[0] = t8[0];
        t6.sub$1(bodyB.get$sweep().center);
        minSeparation = $.min(minSeparation, separation);
        if (typeof minSeparation !== "number")
          return this.solvePositionConstraints$1$bailout(1, baumgarte, t10, t1, t6, t4, t7, t5, i, c, t9, j, bodyA, bodyB, t2, t3, psm, invMassA, invIA, invMassB, invIB, separation, t8, minSeparation);
        $C = $.max(-0.2, $.min(baumgarte * (separation + 0.005), 0));
        if (typeof $C !== "number")
          return this.solvePositionConstraints$1$bailout(2, baumgarte, t10, t1, t6, t4, t7, t5, i, c, t9, j, bodyA, bodyB, t2, t3, psm, invMassA, invIA, invMassB, invIB, 0, t8, minSeparation, $C);
        t11 = t5.length;
        if (0 >= t11)
          throw $.ioore(0);
        t12 = t5[0];
        if (1 >= t9.length)
          throw $.ioore(1);
        t13 = t9[1];
        if (1 >= t11)
          throw $.ioore(1);
        t11 = t5[1];
        t14 = t9[0];
        rnA = t12 * t13 - t11 * t14;
        t11 = t7.length;
        if (0 >= t11)
          throw $.ioore(0);
        t12 = t7[0];
        if (1 >= t11)
          throw $.ioore(1);
        rnB = t12 * t13 - t7[1] * t14;
        K = t10 + invIA * rnA * rnA + invIB * rnB * rnB;
        impulse = K > 0 ? -$C / K : 0;
        if (1 >= t1.length)
          throw $.ioore(1);
        t1[1] = t13;
        t1[0] = t9[0];
        t1[1] = t1[1] * impulse;
        t1[0] = t1[0] * impulse;
        t11 = t1[1];
        if (1 >= t3.length)
          throw $.ioore(1);
        t3[1] = t11;
        t3[0] = t1[0];
        t3[1] = t3[1] * invMassA;
        t3[0] = t3[0] * invMassA;
        bodyA.get$sweep().center.sub$1(t2);
        t11 = bodyA.get$sweep();
        t12 = t11.angle;
        if (typeof t12 !== "number")
          return this.solvePositionConstraints$1$bailout(3, baumgarte, t10, t1, t6, t4, t7, t5, i, c, t9, j, bodyA, bodyB, t2, t3, psm, invMassA, invIA, invMassB, invIB, 0, t8, minSeparation, 0, t11, t12);
        t13 = t5.length;
        if (0 >= t13)
          throw $.ioore(0);
        t14 = t5[0];
        if (1 >= t1.length)
          throw $.ioore(1);
        t15 = t1[1];
        if (1 >= t13)
          throw $.ioore(1);
        t11.angle = t12 - invIA * (t14 * t15 - t5[1] * t1[0]);
        bodyA.synchronizeTransform$0();
        if (1 >= t1.length)
          throw $.ioore(1);
        t15 = t1[1];
        if (1 >= t3.length)
          throw $.ioore(1);
        t3[1] = t15;
        t3[0] = t1[0];
        t3[1] = t3[1] * invMassB;
        t3[0] = t3[0] * invMassB;
        t15 = bodyB.get$sweep().center;
        t15.add$1(t15, t2);
        t15 = bodyB.get$sweep();
        t14 = t15.angle;
        if (typeof t14 !== "number")
          return this.solvePositionConstraints$1$bailout(4, baumgarte, t10, t1, t6, t4, t7, t5, i, c, t9, j, bodyA, bodyB, t2, t3, psm, invMassA, invIA, invMassB, invIB, 0, t8, minSeparation, 0, 0, 0, t15, t14);
        t12 = t7.length;
        if (0 >= t12)
          throw $.ioore(0);
        t11 = t7[0];
        if (1 >= t1.length)
          throw $.ioore(1);
        t13 = t1[1];
        if (1 >= t12)
          throw $.ioore(1);
        t15.angle = t14 + invIB * (t11 * t13 - t7[1] * t1[0]);
        bodyB.synchronizeTransform$0();
        ++j;
      }
      ++i;
    }
    return minSeparation >= -0.0075;
  },
  solvePositionConstraints$1$bailout: function(state0, baumgarte, t10, t1, t6, t4, t7, t5, i, c, t9, j, bodyA, bodyB, t2, t3, psm, invMassA, invIA, invMassB, invIB, separation, t8, minSeparation, $C, t11, t12, t15, t14) {
    switch (state0) {
      case 0:
        t1 = this.P.storage;
        t2 = this.temp1;
        t3 = t2.storage;
        t4 = this.rA;
        t5 = t4.storage;
        t6 = this.rB;
        t7 = t6.storage;
        psm = this.psolver;
        t8 = psm.point.storage;
        t9 = psm.normal.storage;
        minSeparation = 0;
        i = 0;
      default:
        var t13, rnA, rnB, K, impulse;
        L0:
          while (true)
            switch (state0) {
              case 0:
                t10 = this.constraintCount;
                if (t10 == null)
                  throw $.iae(t10);
                if (!(i < t10))
                  break L0;
                t10 = this.constraints;
                if (i >= t10.length)
                  throw $.ioore(i);
                c = t10[i];
                bodyA = c.get$bodyA();
                bodyB = c.get$bodyB();
                t10 = bodyA.get$mass();
                invMassA = t10 * bodyA.get$invMass();
                invIA = t10 * bodyA.get$invInertia();
                t10 = bodyB.get$mass();
                invMassB = t10 * bodyB.get$invMass();
                invIB = t10 * bodyB.get$invInertia();
                t10 = invMassA + invMassB;
                j = 0;
              default:
                L1:
                  while (true)
                    switch (state0) {
                      case 0:
                        t11 = c.get$pointCount();
                        if (typeof t11 !== "number")
                          throw $.iae(t11);
                        if (!(j < t11))
                          break L1;
                        psm.initialize$2(psm, c, j);
                        separation = psm.separation;
                        if (1 >= t8.length)
                          throw $.ioore(1);
                        t11 = t8[1];
                        if (1 >= t5.length)
                          throw $.ioore(1);
                        t5[1] = t11;
                        t5[0] = t8[0];
                        t4.sub$1(bodyA.get$sweep().center);
                        if (1 >= t8.length)
                          throw $.ioore(1);
                        t11 = t8[1];
                        if (1 >= t7.length)
                          throw $.ioore(1);
                        t7[1] = t11;
                        t7[0] = t8[0];
                        t6.sub$1(bodyB.get$sweep().center);
                        minSeparation = $.min(minSeparation, separation);
                      case 1:
                        state0 = 0;
                        $C = $.max(-0.2, $.min(baumgarte * (separation + 0.005), 0));
                      case 2:
                        state0 = 0;
                        t11 = t5.length;
                        if (0 >= t11)
                          throw $.ioore(0);
                        t12 = t5[0];
                        if (1 >= t9.length)
                          throw $.ioore(1);
                        t13 = t9[1];
                        if (1 >= t11)
                          throw $.ioore(1);
                        t11 = t5[1];
                        t14 = t9[0];
                        rnA = t12 * t13 - t11 * t14;
                        t11 = t7.length;
                        if (0 >= t11)
                          throw $.ioore(0);
                        t12 = t7[0];
                        if (1 >= t11)
                          throw $.ioore(1);
                        rnB = t12 * t13 - t7[1] * t14;
                        K = t10 + invIA * rnA * rnA + invIB * rnB * rnB;
                        impulse = K > 0 ? $.$div$n($.$negate$n($C), K) : 0;
                        if (1 >= t9.length)
                          throw $.ioore(1);
                        t11 = t9[1];
                        if (1 >= t1.length)
                          throw $.ioore(1);
                        t1[1] = t11;
                        t1[0] = t9[0];
                        t11 = t1[1];
                        if (typeof impulse !== "number")
                          throw $.iae(impulse);
                        t1[1] = t11 * impulse;
                        t1[0] = t1[0] * impulse;
                        t11 = t1[1];
                        if (1 >= t3.length)
                          throw $.ioore(1);
                        t3[1] = t11;
                        t3[0] = t1[0];
                        t3[1] = t3[1] * invMassA;
                        t3[0] = t3[0] * invMassA;
                        bodyA.get$sweep().center.sub$1(t2);
                        t11 = bodyA.get$sweep();
                        t12 = t11.angle;
                      case 3:
                        state0 = 0;
                        t13 = t5.length;
                        if (0 >= t13)
                          throw $.ioore(0);
                        t14 = t5[0];
                        if (1 >= t1.length)
                          throw $.ioore(1);
                        t15 = t1[1];
                        if (1 >= t13)
                          throw $.ioore(1);
                        t11.angle = $.$sub$n(t12, invIA * (t14 * t15 - t5[1] * t1[0]));
                        bodyA.synchronizeTransform$0();
                        if (1 >= t1.length)
                          throw $.ioore(1);
                        t15 = t1[1];
                        if (1 >= t3.length)
                          throw $.ioore(1);
                        t3[1] = t15;
                        t3[0] = t1[0];
                        t3[1] = t3[1] * invMassB;
                        t3[0] = t3[0] * invMassB;
                        t15 = bodyB.get$sweep().center;
                        t15.add$1(t15, t2);
                        t15 = bodyB.get$sweep();
                        t14 = t15.angle;
                      case 4:
                        state0 = 0;
                        t12 = t7.length;
                        if (0 >= t12)
                          throw $.ioore(0);
                        t11 = t7[0];
                        if (1 >= t1.length)
                          throw $.ioore(1);
                        t13 = t1[1];
                        if (1 >= t12)
                          throw $.ioore(1);
                        t15.angle = $.$add$ns(t14, invIB * (t11 * t13 - t7[1] * t1[0]));
                        bodyB.synchronizeTransform$0();
                        ++j;
                    }
                ++i;
            }
        return $.$ge$n(minSeparation, -0.0075);
    }
  },
  static: {
"": "ContactSolver_INITIAL_NUM_CONSTRAINTS,ContactSolver_K_MAX_CONDITION_NUMBER",
ContactSolver$: function() {
  return new $.ContactSolver($.List_List$generate(256, new $.ContactSolver_closure(), true), null, $.WorldManifold$(), new $.Vector2(new Float32Array(2)), new $.Vector2(new Float32Array(2)), new $.Vector2(new Float32Array(2)), new $.Vector2(new Float32Array(2)), new $.Vector2(new Float32Array(2)), new $.Vector2(new Float32Array(2)), new $.Vector2(new Float32Array(2)), new $.Vector2(new Float32Array(2)), new $.Vector2(new Float32Array(2)), new $.Vector2(new Float32Array(2)), new $.Vector2(new Float32Array(2)), $.PositionSolverManifold$(), new $.Vector2(new Float32Array(2)), new $.Vector2(new Float32Array(2)));
}}

},

ContactSolver_closure: {"": "Closure;",
  call$1: function(i) {
    return $.ContactConstraint$();
  }
},

PositionSolverManifold: {"": "Object;normal<,point,separation,pointA<,pointB<,temp,planePoint,clipPoint",
  initialize$2: function(_, cc, index) {
    var t1, t2, t3, t4, t5, t6;
    t1 = $.getInterceptor$x(cc);
    switch (t1.get$type(cc)) {
      case 0:
        t2 = this.pointA;
        cc.get$bodyA().getWorldPointToOut$2(cc.get$localPoint(), t2);
        t3 = this.pointB;
        cc.get$bodyB().getWorldPointToOut$2($.$index$asx(t1.get$points(cc), 0).get$localPoint(), t3);
        t1 = this.normal;
        if ($.MathBox_distanceSquared(t2, t3) > 1.4208639999999999e-14) {
          t4 = t1.storage;
          t5 = t3.storage;
          if (1 >= t5.length)
            throw $.ioore(1);
          t6 = t5[1];
          if (1 >= t4.length)
            throw $.ioore(1);
          t4[1] = t6;
          t4[0] = t5[0];
          t1.sub$1(t2);
          t1.normalize$0();
        } else {
          t1 = t1.storage;
          t4 = t1.length;
          if (0 >= t4)
            throw $.ioore(0);
          t1[0] = 1;
          if (1 >= t4)
            throw $.ioore(1);
          t1[1] = 0;
        }
        t1 = this.point;
        t4 = t1.storage;
        t5 = t2.storage;
        if (1 >= t5.length)
          throw $.ioore(1);
        t6 = t5[1];
        if (1 >= t4.length)
          throw $.ioore(1);
        t4[1] = t6;
        t4[0] = t5[0];
        t1 = t1.add$1(t1, t3).storage;
        if (1 >= t1.length)
          throw $.ioore(1);
        t1[1] = t1[1] * 0.5;
        t1[0] = t1[0] * 0.5;
        t1 = this.temp;
        t5 = t1.storage;
        t3 = t3.storage;
        if (1 >= t3.length)
          throw $.ioore(1);
        t4 = t3[1];
        if (1 >= t5.length)
          throw $.ioore(1);
        t5[1] = t4;
        t5[0] = t3[0];
        t1.sub$1(t2);
        t1 = t1.dot$1(this.normal);
        t2 = cc.get$radius();
        if (typeof t2 !== "number")
          throw $.iae(t2);
        this.separation = t1 - t2;
        break;
      case 1:
        t2 = this.normal;
        cc.get$bodyA().getWorldVectorToOut$2(cc.get$localNormal(), t2);
        t3 = this.planePoint;
        cc.get$bodyA().getWorldPointToOut$2(cc.get$localPoint(), t3);
        t4 = this.clipPoint;
        cc.get$bodyB().getWorldPointToOut$2($.$index$asx(t1.get$points(cc), index).get$localPoint(), t4);
        t1 = this.temp;
        t5 = t1.storage;
        t4 = t4.storage;
        if (1 >= t4.length)
          throw $.ioore(1);
        t6 = t4[1];
        if (1 >= t5.length)
          throw $.ioore(1);
        t5[1] = t6;
        t5[0] = t4[0];
        t1.sub$1(t3);
        t2 = t1.dot$1(t2);
        t1 = cc.get$radius();
        if (typeof t1 !== "number")
          throw $.iae(t1);
        this.separation = t2 - t1;
        t1 = this.point.storage;
        if (1 >= t4.length)
          throw $.ioore(1);
        t2 = t4[1];
        if (1 >= t1.length)
          throw $.ioore(1);
        t1[1] = t2;
        t1[0] = t4[0];
        break;
      case 2:
        t2 = this.normal;
        cc.get$bodyB().getWorldVectorToOut$2(cc.get$localNormal(), t2);
        t3 = this.planePoint;
        cc.get$bodyB().getWorldPointToOut$2(cc.get$localPoint(), t3);
        t4 = this.clipPoint;
        cc.get$bodyA().getWorldPointToOut$2($.$index$asx(t1.get$points(cc), index).get$localPoint(), t4);
        t1 = this.temp;
        t5 = t1.storage;
        t4 = t4.storage;
        if (1 >= t4.length)
          throw $.ioore(1);
        t6 = t4[1];
        if (1 >= t5.length)
          throw $.ioore(1);
        t5[1] = t6;
        t5[0] = t4[0];
        t1.sub$1(t3);
        t1 = t1.dot$1(t2);
        t3 = cc.get$radius();
        if (typeof t3 !== "number")
          throw $.iae(t3);
        this.separation = t1 - t3;
        t3 = this.point.storage;
        if (1 >= t4.length)
          throw $.ioore(1);
        t1 = t4[1];
        if (1 >= t3.length)
          throw $.ioore(1);
        t3[1] = t1;
        t3[0] = t4[0];
        t2 = t2.storage;
        if (1 >= t2.length)
          throw $.ioore(1);
        t2[1] = -t2[1];
        t2[0] = -t2[0];
        break;
      default:
    }
  },
  static: {
PositionSolverManifold$: function() {
  return new $.PositionSolverManifold(new $.Vector2(new Float32Array(2)), new $.Vector2(new Float32Array(2)), 0, new $.Vector2(new Float32Array(2)), new $.Vector2(new Float32Array(2)), new $.Vector2(new Float32Array(2)), new $.Vector2(new Float32Array(2)), new $.Vector2(new Float32Array(2)));
}}

},

PolygonAndCircleContact: {"": "Contact;flags,prev,next,edge1,edge2,fixtureA,fixtureB,manifold,toiCount,pool,_oldManifold",
  init$2: function(fA, fB) {
    $.Contact.prototype.init$2.call(this, fA, fB);
  },
  evaluate$3: function(argManifold, xfA, xfB) {
    this.pool.collision.collidePolygonAndCircle$5(argManifold, $.get$shape$x(this.fixtureA), xfA, $.get$shape$x(this.fixtureB), xfB);
  }
},

PolygonContact: {"": "Contact;flags,prev,next,edge1,edge2,fixtureA,fixtureB,manifold,toiCount,pool,_oldManifold",
  init$2: function(fA, fB) {
    $.Contact.prototype.init$2.call(this, fA, fB);
  },
  evaluate$3: function(argManifold, xfA, xfB) {
    this.pool.collision.collidePolygons$5(argManifold, $.get$shape$x(this.fixtureA), xfA, $.get$shape$x(this.fixtureB), xfB);
  }
},

TimeOfImpactConstraint: {"": "Object;localPoints<,localNormal<,localPoint<,type*,radius@,pointCount@,bodyA@,bodyB@",
  setFrom$1: function(argOther) {
    var t1, i, t2, t3;
    for (t1 = this.localPoints, i = 0; i < t1.length; ++i) {
      t2 = t1[i];
      t3 = argOther.get$localPoints();
      if (i >= t3.length)
        throw $.ioore(i);
      t2.setFrom$1(t3[i]);
    }
    t1 = this.localNormal.storage;
    t2 = argOther.get$localNormal().storage;
    if (1 >= t2.length)
      throw $.ioore(1);
    t3 = t2[1];
    if (1 >= t1.length)
      throw $.ioore(1);
    t1[1] = t3;
    t1[0] = t2[0];
    t2 = this.localPoint.storage;
    t1 = argOther.get$localPoint().storage;
    if (1 >= t1.length)
      throw $.ioore(1);
    t3 = t1[1];
    if (1 >= t2.length)
      throw $.ioore(1);
    t2[1] = t3;
    t2[0] = t1[0];
    this.type = $.get$type$x(argOther);
    this.radius = argOther.get$radius();
    this.pointCount = argOther.get$pointCount();
    this.bodyA = argOther.get$bodyA();
    this.bodyB = argOther.get$bodyB();
  },
  static: {
TimeOfImpactConstraint$: function() {
  return new $.TimeOfImpactConstraint($.List_List$generate(2, new $.TimeOfImpactConstraint_closure(), true), new $.Vector2(new Float32Array(2)), new $.Vector2(new Float32Array(2)), 0, 0, 0, null, null);
}}

},

TimeOfImpactConstraint_closure: {"": "Closure;",
  call$1: function(i) {
    return new $.Vector2(new Float32Array(2));
  }
},

TimeOfImpactSolver: {"": "Object;constraints,count@,toiBody,psm,rA<,rB<,P,temp",
  initialize$3: function(_, contacts, argCount, argToiBody) {
    var t1, t2, t3, i, contact, fixtureA, fixtureB, shapeA, shapeB, radiusA, radiusB, bodyA, bodyB, manifold, constraint, t4, j, cp;
    this.count = argCount;
    this.toiBody = argToiBody;
    t1 = this.count;
    t2 = this.constraints;
    t3 = t2.length;
    if ($.$ge$n(t1, t3)) {
      this.constraints = $.List_List($.max(t1, t3 * 2));
      t1 = this.constraints;
      t3 = t2.length;
      $.IterableMixinWorkaround_setRangeList(t1, 0, t3, t2, 0);
      for (i = t2.length; t1 = this.constraints, i < t1.length; ++i) {
        t2 = $.TimeOfImpactConstraint$();
        if (i >= t1.length)
          throw $.ioore(i);
        t1[i] = t2;
      }
    }
    t1 = contacts.length;
    i = 0;
    while (true) {
      t2 = this.count;
      if (typeof t2 !== "number")
        throw $.iae(t2);
      if (!(i < t2))
        break;
      if (i >= t1)
        throw $.ioore(i);
      contact = contacts[i];
      fixtureA = contact.get$fixtureA();
      fixtureB = contact.get$fixtureB();
      t2 = $.getInterceptor$x(fixtureA);
      shapeA = t2.get$shape(fixtureA);
      t3 = $.getInterceptor$x(fixtureB);
      shapeB = t3.get$shape(fixtureB);
      radiusA = shapeA.get$radius();
      radiusB = shapeB.get$radius();
      bodyA = t2.get$body(fixtureA);
      bodyB = t3.get$body(fixtureB);
      manifold = contact.get$manifold();
      t3 = this.constraints;
      if (i >= t3.length)
        throw $.ioore(i);
      constraint = t3[i];
      constraint.set$bodyA(bodyA);
      constraint.set$bodyB(bodyB);
      t3 = constraint.get$localNormal();
      t3 = t3.storage;
      t2 = manifold.get$localNormal().storage;
      if (1 >= t2.length)
        throw $.ioore(1);
      t4 = t2[1];
      if (1 >= t3.length)
        throw $.ioore(1);
      t3[1] = t4;
      t3[0] = t2[0];
      t2 = constraint.get$localPoint();
      t2 = t2.storage;
      t3 = manifold.get$localPoint().storage;
      if (1 >= t3.length)
        throw $.ioore(1);
      t4 = t3[1];
      if (1 >= t2.length)
        throw $.ioore(1);
      t2[1] = t4;
      t2[0] = t3[0];
      t3 = $.getInterceptor$x(manifold);
      $.set$type$x(constraint, t3.get$type(manifold));
      constraint.set$pointCount(manifold.get$pointCount());
      constraint.set$radius($.$add$ns(radiusA, radiusB));
      j = 0;
      while (true) {
        t2 = constraint.get$pointCount();
        if (typeof t2 !== "number")
          throw $.iae(t2);
        if (!(j < t2))
          break;
        cp = $.$index$asx(t3.get$points(manifold), j);
        t2 = constraint.get$localPoints();
        t4 = cp.get$localPoint();
        if (j >= t2.length)
          throw $.ioore(j);
        t2[j] = t4;
        ++j;
      }
      ++i;
    }
  },
  solve$1: function(baumgarte) {
    var t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, minSeparation, i, t11, c, bodyA, bodyB, massA, massB, invMassA, invIA, invMassB, invIB, j, t12, separation, $C, t13, t14, t15, rnA, rnB, K, impulse, t16;
    t1 = this.P.storage;
    t2 = this.temp;
    t3 = t2.storage;
    t4 = this.rA;
    t5 = t4.storage;
    t6 = this.rB;
    t7 = t6.storage;
    t8 = this.psm;
    t9 = t8.point.storage;
    t10 = t8.normal.storage;
    minSeparation = 0;
    i = 0;
    while (true) {
      t11 = this.count;
      if (typeof t11 !== "number")
        throw $.iae(t11);
      if (!(i < t11))
        break;
      t11 = this.constraints;
      if (i >= t11.length)
        throw $.ioore(i);
      c = t11[i];
      bodyA = c.get$bodyA();
      bodyB = c.get$bodyB();
      massA = bodyA.get$mass();
      massB = bodyB.get$mass();
      if ($.$eq(bodyA, this.toiBody))
        massB = 0;
      else
        massA = 0;
      invMassA = massA * bodyA.get$invMass();
      invIA = massA * bodyA.get$invInertia();
      invMassB = massB * bodyB.get$invMass();
      invIB = massB * bodyB.get$invInertia();
      t11 = invMassA + invMassB;
      j = 0;
      while (true) {
        t12 = c.get$pointCount();
        if (typeof t12 !== "number")
          throw $.iae(t12);
        if (!(j < t12))
          break;
        t8.initialize$2(t8, c, j);
        separation = t8.separation;
        if (1 >= t9.length)
          throw $.ioore(1);
        t12 = t9[1];
        if (1 >= t5.length)
          throw $.ioore(1);
        t5[1] = t12;
        t5[0] = t9[0];
        t4.sub$1(bodyA.get$sweep().center);
        if (1 >= t9.length)
          throw $.ioore(1);
        t12 = t9[1];
        if (1 >= t7.length)
          throw $.ioore(1);
        t7[1] = t12;
        t7[0] = t9[0];
        t6.sub$1(bodyB.get$sweep().center);
        minSeparation = $.min(minSeparation, separation);
        if (typeof minSeparation !== "number")
          return this.solve$1$bailout(1, baumgarte, c, t8, t2, t3, invMassA, invIA, invMassB, invIB, minSeparation, separation, t9, i, t11, bodyA, bodyB, t1, t6, t4, t7, t5, j, t10);
        $C = $.max(-0.2, $.min(baumgarte * (separation + 0.005), 0));
        if (typeof $C !== "number")
          return this.solve$1$bailout(2, baumgarte, c, t8, t2, t3, invMassA, invIA, invMassB, invIB, minSeparation, 0, t9, i, t11, bodyA, bodyB, t1, t6, t4, t7, t5, j, t10, $C);
        t12 = t5.length;
        if (0 >= t12)
          throw $.ioore(0);
        t13 = t5[0];
        if (1 >= t10.length)
          throw $.ioore(1);
        t14 = t10[1];
        if (1 >= t12)
          throw $.ioore(1);
        t12 = t5[1];
        t15 = t10[0];
        rnA = t13 * t14 - t12 * t15;
        t12 = t7.length;
        if (0 >= t12)
          throw $.ioore(0);
        t13 = t7[0];
        if (1 >= t12)
          throw $.ioore(1);
        rnB = t13 * t14 - t7[1] * t15;
        K = t11 + invIA * rnA * rnA + invIB * rnB * rnB;
        impulse = K > 0 ? -$C / K : 0;
        if (1 >= t1.length)
          throw $.ioore(1);
        t1[1] = t14;
        t1[0] = t10[0];
        t1[1] = t1[1] * impulse;
        t1[0] = t1[0] * impulse;
        t12 = t1[1];
        if (1 >= t3.length)
          throw $.ioore(1);
        t3[1] = t12;
        t3[0] = t1[0];
        t3[1] = t3[1] * invMassA;
        t3[0] = t3[0] * invMassA;
        bodyA.get$sweep().center.sub$1(t2);
        t12 = bodyA.get$sweep();
        t13 = t12.angle;
        if (typeof t13 !== "number")
          return this.solve$1$bailout(3, baumgarte, c, t8, t2, t3, invMassA, invIA, invMassB, invIB, minSeparation, 0, t9, i, t11, bodyA, bodyB, t1, t6, t4, t7, t5, j, t10, 0, t12, t13);
        t14 = t5.length;
        if (0 >= t14)
          throw $.ioore(0);
        t15 = t5[0];
        if (1 >= t1.length)
          throw $.ioore(1);
        t16 = t1[1];
        if (1 >= t14)
          throw $.ioore(1);
        t12.angle = t13 - invIA * (t15 * t16 - t5[1] * t1[0]);
        bodyA.synchronizeTransform$0();
        if (1 >= t1.length)
          throw $.ioore(1);
        t16 = t1[1];
        if (1 >= t3.length)
          throw $.ioore(1);
        t3[1] = t16;
        t3[0] = t1[0];
        t3[1] = t3[1] * invMassB;
        t3[0] = t3[0] * invMassB;
        t16 = bodyB.get$sweep().center;
        t16.add$1(t16, t2);
        t16 = bodyB.get$sweep();
        t15 = t16.angle;
        if (typeof t15 !== "number")
          return this.solve$1$bailout(4, baumgarte, c, t8, t2, t3, invMassA, invIA, invMassB, invIB, minSeparation, 0, t9, i, t11, bodyA, bodyB, t1, t6, t4, t7, t5, j, t10, 0, 0, 0, t15, t16);
        t13 = t7.length;
        if (0 >= t13)
          throw $.ioore(0);
        t12 = t7[0];
        if (1 >= t1.length)
          throw $.ioore(1);
        t14 = t1[1];
        if (1 >= t13)
          throw $.ioore(1);
        t16.angle = t15 + invIB * (t12 * t14 - t7[1] * t1[0]);
        bodyB.synchronizeTransform$0();
        ++j;
      }
      ++i;
    }
    return minSeparation >= -0.0075;
  },
  solve$1$bailout: function(state0, baumgarte, c, t8, t2, t3, invMassA, invIA, invMassB, invIB, minSeparation, separation, t9, i, t11, bodyA, bodyB, t1, t6, t4, t7, t5, j, t10, $C, t12, t13, t15, t16) {
    switch (state0) {
      case 0:
        t1 = this.P.storage;
        t2 = this.temp;
        t3 = t2.storage;
        t4 = this.rA;
        t5 = t4.storage;
        t6 = this.rB;
        t7 = t6.storage;
        t8 = this.psm;
        t9 = t8.point.storage;
        t10 = t8.normal.storage;
        minSeparation = 0;
        i = 0;
      default:
        var massA, massB, t14, rnA, rnB, K, impulse;
        L0:
          while (true)
            switch (state0) {
              case 0:
                t11 = this.count;
                if (typeof t11 !== "number")
                  throw $.iae(t11);
                if (!(i < t11))
                  break L0;
                t11 = this.constraints;
                if (i >= t11.length)
                  throw $.ioore(i);
                c = t11[i];
                bodyA = c.get$bodyA();
                bodyB = c.get$bodyB();
                massA = bodyA.get$mass();
                massB = bodyB.get$mass();
                if ($.$eq(bodyA, this.toiBody))
                  massB = 0;
                else
                  massA = 0;
                invMassA = massA * bodyA.get$invMass();
                invIA = massA * bodyA.get$invInertia();
                invMassB = massB * bodyB.get$invMass();
                invIB = massB * bodyB.get$invInertia();
                t11 = invMassA + invMassB;
                j = 0;
              default:
                L1:
                  while (true)
                    switch (state0) {
                      case 0:
                        t12 = c.get$pointCount();
                        if (typeof t12 !== "number")
                          throw $.iae(t12);
                        if (!(j < t12))
                          break L1;
                        t8.initialize$2(t8, c, j);
                        separation = t8.separation;
                        if (1 >= t9.length)
                          throw $.ioore(1);
                        t12 = t9[1];
                        if (1 >= t5.length)
                          throw $.ioore(1);
                        t5[1] = t12;
                        t5[0] = t9[0];
                        t4.sub$1(bodyA.get$sweep().center);
                        if (1 >= t9.length)
                          throw $.ioore(1);
                        t12 = t9[1];
                        if (1 >= t7.length)
                          throw $.ioore(1);
                        t7[1] = t12;
                        t7[0] = t9[0];
                        t6.sub$1(bodyB.get$sweep().center);
                        minSeparation = $.min(minSeparation, separation);
                      case 1:
                        state0 = 0;
                        $C = $.max(-0.2, $.min(baumgarte * (separation + 0.005), 0));
                      case 2:
                        state0 = 0;
                        t12 = t5.length;
                        if (0 >= t12)
                          throw $.ioore(0);
                        t13 = t5[0];
                        if (1 >= t10.length)
                          throw $.ioore(1);
                        t14 = t10[1];
                        if (1 >= t12)
                          throw $.ioore(1);
                        t12 = t5[1];
                        t15 = t10[0];
                        rnA = t13 * t14 - t12 * t15;
                        t12 = t7.length;
                        if (0 >= t12)
                          throw $.ioore(0);
                        t13 = t7[0];
                        if (1 >= t12)
                          throw $.ioore(1);
                        rnB = t13 * t14 - t7[1] * t15;
                        K = t11 + invIA * rnA * rnA + invIB * rnB * rnB;
                        impulse = K > 0 ? $.$div$n($.$negate$n($C), K) : 0;
                        if (1 >= t10.length)
                          throw $.ioore(1);
                        t12 = t10[1];
                        if (1 >= t1.length)
                          throw $.ioore(1);
                        t1[1] = t12;
                        t1[0] = t10[0];
                        t12 = t1[1];
                        if (typeof impulse !== "number")
                          throw $.iae(impulse);
                        t1[1] = t12 * impulse;
                        t1[0] = t1[0] * impulse;
                        t12 = t1[1];
                        if (1 >= t3.length)
                          throw $.ioore(1);
                        t3[1] = t12;
                        t3[0] = t1[0];
                        t3[1] = t3[1] * invMassA;
                        t3[0] = t3[0] * invMassA;
                        bodyA.get$sweep().center.sub$1(t2);
                        t12 = bodyA.get$sweep();
                        t13 = t12.angle;
                      case 3:
                        state0 = 0;
                        t14 = t5.length;
                        if (0 >= t14)
                          throw $.ioore(0);
                        t15 = t5[0];
                        if (1 >= t1.length)
                          throw $.ioore(1);
                        t16 = t1[1];
                        if (1 >= t14)
                          throw $.ioore(1);
                        t12.angle = $.$sub$n(t13, invIA * (t15 * t16 - t5[1] * t1[0]));
                        bodyA.synchronizeTransform$0();
                        if (1 >= t1.length)
                          throw $.ioore(1);
                        t16 = t1[1];
                        if (1 >= t3.length)
                          throw $.ioore(1);
                        t3[1] = t16;
                        t3[0] = t1[0];
                        t3[1] = t3[1] * invMassB;
                        t3[0] = t3[0] * invMassB;
                        t16 = bodyB.get$sweep().center;
                        t16.add$1(t16, t2);
                        t16 = bodyB.get$sweep();
                        t15 = t16.angle;
                      case 4:
                        state0 = 0;
                        t13 = t7.length;
                        if (0 >= t13)
                          throw $.ioore(0);
                        t12 = t7[0];
                        if (1 >= t1.length)
                          throw $.ioore(1);
                        t14 = t1[1];
                        if (1 >= t13)
                          throw $.ioore(1);
                        t16.angle = $.$add$ns(t15, invIB * (t12 * t14 - t7[1] * t1[0]));
                        bodyB.synchronizeTransform$0();
                        ++j;
                    }
                ++i;
            }
        return $.$ge$n(minSeparation, -0.0075);
    }
  },
  static: {
TimeOfImpactSolver$: function() {
  return new $.TimeOfImpactSolver($.List_List$generate(4, new $.TimeOfImpactSolver_closure(), true), 0, null, $.TimeOfImpactSolverManifold$(), new $.Vector2(new Float32Array(2)), new $.Vector2(new Float32Array(2)), new $.Vector2(new Float32Array(2)), new $.Vector2(new Float32Array(2)));
}}

},

TimeOfImpactSolver_closure: {"": "Closure;",
  call$1: function(i) {
    return $.TimeOfImpactConstraint$();
  }
},

TimeOfImpactSolverManifold: {"": "Object;normal<,point,separation,pointA<,pointB<,temp,planePoint,clipPoint",
  initialize$2: function(_, cc, index) {
    var t1, t2, t3, t4, t5, t6, t7;
    switch ($.get$type$x(cc)) {
      case 0:
        t1 = this.pointA;
        t2 = t1.storage;
        t3 = cc.get$bodyA().getWorldPoint$1(cc.get$localPoint()).storage;
        if (1 >= t3.length)
          throw $.ioore(1);
        t4 = t3[1];
        if (1 >= t2.length)
          throw $.ioore(1);
        t2[1] = t4;
        t2[0] = t3[0];
        t3 = this.pointB;
        t4 = cc.get$bodyB();
        t5 = cc.get$localPoints();
        if (0 >= t5.length)
          throw $.ioore(0);
        t6 = t3.storage;
        t5 = t4.getWorldPoint$1(t5[0]).storage;
        if (1 >= t5.length)
          throw $.ioore(1);
        t4 = t5[1];
        if (1 >= t6.length)
          throw $.ioore(1);
        t6[1] = t4;
        t6[0] = t5[0];
        t4 = this.normal;
        if ($.MathBox_distanceSquared(t1, t3) > 1.4208639999999999e-14) {
          t5 = t4.storage;
          if (1 >= t6.length)
            throw $.ioore(1);
          t7 = t6[1];
          if (1 >= t5.length)
            throw $.ioore(1);
          t5[1] = t7;
          t5[0] = t6[0];
          t4.sub$1(t1);
          t4.normalize$0();
        } else {
          t4 = t4.storage;
          t5 = t4.length;
          if (0 >= t5)
            throw $.ioore(0);
          t4[0] = 1;
          if (1 >= t5)
            throw $.ioore(1);
          t4[1] = 0;
        }
        t4 = this.point;
        t5 = t4.storage;
        if (1 >= t2.length)
          throw $.ioore(1);
        t7 = t2[1];
        if (1 >= t5.length)
          throw $.ioore(1);
        t5[1] = t7;
        t5[0] = t2[0];
        t3 = t4.add$1(t4, t3).storage;
        if (1 >= t3.length)
          throw $.ioore(1);
        t3[1] = t3[1] * 0.5;
        t3[0] = t3[0] * 0.5;
        t3 = this.temp;
        t4 = t3.storage;
        if (1 >= t6.length)
          throw $.ioore(1);
        t2 = t6[1];
        if (1 >= t4.length)
          throw $.ioore(1);
        t4[1] = t2;
        t4[0] = t6[0];
        t3.sub$1(t1);
        t3 = t3.dot$1(this.normal);
        t1 = cc.get$radius();
        if (typeof t1 !== "number")
          throw $.iae(t1);
        this.separation = t3 - t1;
        break;
      case 1:
        t1 = this.normal;
        t2 = t1.storage;
        t3 = cc.get$bodyA().getWorldVector2$1(cc.get$localNormal()).storage;
        if (1 >= t3.length)
          throw $.ioore(1);
        t4 = t3[1];
        if (1 >= t2.length)
          throw $.ioore(1);
        t2[1] = t4;
        t2[0] = t3[0];
        t3 = this.planePoint;
        t2 = t3.storage;
        t4 = cc.get$bodyA().getWorldPoint$1(cc.get$localPoint()).storage;
        if (1 >= t4.length)
          throw $.ioore(1);
        t5 = t4[1];
        if (1 >= t2.length)
          throw $.ioore(1);
        t2[1] = t5;
        t2[0] = t4[0];
        t4 = cc.get$bodyB();
        t2 = cc.get$localPoints();
        if (index < 0 || index >= t2.length)
          throw $.ioore(index);
        t5 = this.clipPoint.storage;
        t2 = t4.getWorldPoint$1(t2[index]).storage;
        if (1 >= t2.length)
          throw $.ioore(1);
        t4 = t2[1];
        if (1 >= t5.length)
          throw $.ioore(1);
        t5[1] = t4;
        t5[0] = t2[0];
        t2 = this.temp;
        t4 = t2.storage;
        t6 = t5[1];
        if (1 >= t4.length)
          throw $.ioore(1);
        t4[1] = t6;
        t4[0] = t5[0];
        t2.sub$1(t3);
        t1 = t2.dot$1(t1);
        t2 = cc.get$radius();
        if (typeof t2 !== "number")
          throw $.iae(t2);
        this.separation = t1 - t2;
        t2 = this.point.storage;
        if (1 >= t5.length)
          throw $.ioore(1);
        t1 = t5[1];
        if (1 >= t2.length)
          throw $.ioore(1);
        t2[1] = t1;
        t2[0] = t5[0];
        break;
      case 2:
        t1 = this.normal;
        t2 = t1.storage;
        t3 = cc.get$bodyB().getWorldVector2$1(cc.get$localNormal()).storage;
        if (1 >= t3.length)
          throw $.ioore(1);
        t4 = t3[1];
        if (1 >= t2.length)
          throw $.ioore(1);
        t2[1] = t4;
        t2[0] = t3[0];
        t3 = this.planePoint;
        t4 = t3.storage;
        t5 = cc.get$bodyB().getWorldPoint$1(cc.get$localPoint()).storage;
        if (1 >= t5.length)
          throw $.ioore(1);
        t6 = t5[1];
        if (1 >= t4.length)
          throw $.ioore(1);
        t4[1] = t6;
        t4[0] = t5[0];
        t5 = cc.get$bodyA();
        t4 = cc.get$localPoints();
        if (index < 0 || index >= t4.length)
          throw $.ioore(index);
        t6 = this.clipPoint.storage;
        t4 = t5.getWorldPoint$1(t4[index]).storage;
        if (1 >= t4.length)
          throw $.ioore(1);
        t5 = t4[1];
        if (1 >= t6.length)
          throw $.ioore(1);
        t6[1] = t5;
        t6[0] = t4[0];
        t4 = this.temp;
        t5 = t4.storage;
        t7 = t6[1];
        if (1 >= t5.length)
          throw $.ioore(1);
        t5[1] = t7;
        t5[0] = t6[0];
        t4.sub$1(t3);
        t1 = t4.dot$1(t1);
        t4 = cc.get$radius();
        if (typeof t4 !== "number")
          throw $.iae(t4);
        this.separation = t1 - t4;
        t4 = this.point.storage;
        if (1 >= t6.length)
          throw $.ioore(1);
        t1 = t6[1];
        if (1 >= t4.length)
          throw $.ioore(1);
        t4[1] = t1;
        t4[0] = t6[0];
        if (1 >= t2.length)
          throw $.ioore(1);
        t2[1] = -t2[1];
        t2[0] = -t2[0];
        break;
      default:
    }
  },
  static: {
TimeOfImpactSolverManifold$: function() {
  return new $.TimeOfImpactSolverManifold(new $.Vector2(new Float32Array(2)), new $.Vector2(new Float32Array(2)), 0, new $.Vector2(new Float32Array(2)), new $.Vector2(new Float32Array(2)), new $.Vector2(new Float32Array(2)), new $.Vector2(new Float32Array(2)), new $.Vector2(new Float32Array(2)));
}}

},

Filter: {"": "Object;categoryBits<,maskBits<,groupIndex<",
  setFrom$1: function(other) {
    this.categoryBits = other.get$categoryBits();
    this.maskBits = other.get$maskBits();
    this.groupIndex = other.get$groupIndex();
  }
},

Fixture: {"": "Object;box<,density<,next@,body>,shape>,friction@,restitution@,proxy<,filter<,isSensor<,userData@,_poolOne,_poolTwo",
  create$2: function(b, def) {
    var t1;
    this.userData = def.userData;
    this.friction = def.friction;
    this.restitution = def.restitution;
    this.body = b;
    this.next = null;
    this.filter.setFrom$1(def.filter);
    this.isSensor = def.isSensor;
    t1 = def.shape;
    this.shape = t1.clone$0(t1);
    this.density = def.density;
  },
  createProxy$2: function(broadPhase, xf) {
    var t1 = this.box;
    this.shape.computeAxisAlignedBox$2(t1, xf);
    this.proxy = broadPhase.createProxy$2(t1, this);
  },
  synchronize$3: function(broadPhase, transformOne, transformTwo) {
    var t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13;
    if (this.proxy == null)
      return;
    t1 = this._poolOne;
    this.shape.computeAxisAlignedBox$2(t1, transformOne);
    t2 = this._poolTwo;
    this.shape.computeAxisAlignedBox$2(t2, transformTwo);
    t3 = this.box;
    t4 = t3.lowerBound;
    t5 = t1.lowerBound;
    t5.get$x;
    t6 = t5.storage;
    t7 = t6.length;
    if (0 >= t7)
      throw $.ioore(0);
    t8 = t6[0];
    t9 = t2.lowerBound;
    t9.get$x;
    t10 = t9.storage;
    t11 = t10.length;
    if (0 >= t11)
      throw $.ioore(0);
    t12 = t10[0];
    t8 = t8 < t12 ? t8 : t12;
    t4.set$x;
    t12 = t4.storage;
    t13 = t12.length;
    if (0 >= t13)
      throw $.ioore(0);
    t12[0] = t8;
    t5.get$y;
    if (1 >= t7)
      throw $.ioore(1);
    t7 = t6[1];
    t9.get$y;
    if (1 >= t11)
      throw $.ioore(1);
    t10 = t10[1];
    t7 = t7 < t10 ? t7 : t10;
    t4.set$y;
    if (1 >= t13)
      throw $.ioore(1);
    t12[1] = t7;
    t7 = t3.upperBound;
    t1 = t1.upperBound;
    t1.get$x;
    t4 = t1.storage;
    t8 = t4.length;
    if (0 >= t8)
      throw $.ioore(0);
    t9 = t4[0];
    t2 = t2.upperBound;
    t2.get$x;
    t10 = t2.storage;
    t11 = t10.length;
    if (0 >= t11)
      throw $.ioore(0);
    t12 = t10[0];
    t9 = t9 > t12 ? t9 : t12;
    t7.set$x;
    t12 = t7.storage;
    t13 = t12.length;
    if (0 >= t13)
      throw $.ioore(0);
    t12[0] = t9;
    t1.get$y;
    if (1 >= t8)
      throw $.ioore(1);
    t1 = t4[1];
    t2.get$y;
    if (1 >= t11)
      throw $.ioore(1);
    t10 = t10[1];
    t1 = t1 > t10 ? t1 : t10;
    t7.set$y;
    if (1 >= t13)
      throw $.ioore(1);
    t12[1] = t1;
    t1 = transformTwo.position.storage;
    t12 = t1.length;
    if (0 >= t12)
      throw $.ioore(0);
    t13 = t1[0];
    t7 = transformOne.position.storage;
    t2 = t7.length;
    if (0 >= t2)
      throw $.ioore(0);
    t4 = t7[0];
    t5.set$x;
    t6[0] = t13 - t4;
    if (1 >= t12)
      throw $.ioore(1);
    t1 = t1[1];
    if (1 >= t2)
      throw $.ioore(1);
    t7 = t7[1];
    t5.set$y;
    t6[1] = t1 - t7;
    t7 = this.proxy;
    if (broadPhase._tree.moveProxy$3(t7, t3, t5))
      broadPhase.moveBuffer.push(t7);
  },
  getMassData$1: function(massData) {
    this.shape.computeMass$2(massData, this.density);
  },
  get$type: function(_) {
    return this.shape.type;
  },
  static: {
Fixture$: function() {
  return new $.Fixture($.AxisAlignedBox$(null, null), null, null, null, null, null, null, null, new $.Filter(0, 0, 0), null, null, $.AxisAlignedBox$(null, null), $.AxisAlignedBox$(null, null));
}}

},

FixtureDef: {"": "Object;shape>,userData@,friction@,restitution@,density<,isSensor<,filter<",
  FixtureDef$0: function() {
    var t1 = this.filter;
    t1.categoryBits = 1;
    t1.maskBits = 65535;
    t1.groupIndex = 0;
  },
  static: {
FixtureDef$: function() {
  var t1 = new $.FixtureDef(null, null, 0.2, 0, 0, false, new $.Filter(0, 0, 0));
  t1.FixtureDef$0();
  return t1;
}}

},

Island: {"": "Object;listener,bodies,contacts,joints,positions,velocities,bodyCount,jointCount,contactCount,bodyCapacity,contactCapacity,jointCapacity,positionIterationCount,_contactSolver,_translation,impulse<",
  init$4: function(argBodyCapacity, argContactCapacity, argJointCapacity, argListener) {
    var t1, t2, old, t3, i;
    this.bodyCapacity = argBodyCapacity;
    this.contactCapacity = argContactCapacity;
    this.jointCapacity = argJointCapacity;
    this.bodyCount = 0;
    this.contactCount = 0;
    this.listener = argListener;
    t1 = this.bodies;
    if (t1 != null) {
      t2 = this.bodyCapacity;
      t1 = t1.length;
      if (t2 == null)
        throw t2.$gt();
      t1 = t2 > t1;
    } else
      t1 = true;
    if (t1)
      this.bodies = $.List_List(this.bodyCapacity);
    t1 = this.contacts;
    if (t1 != null) {
      t2 = this.contactCapacity;
      t1 = t1.length;
      if (t2 == null)
        throw t2.$gt();
      t1 = t2 > t1;
    } else
      t1 = true;
    if (t1)
      this.contacts = $.List_List(this.contactCapacity);
    t1 = this.joints;
    if (t1 != null) {
      t2 = this.jointCapacity;
      t1 = t1.length;
      if (t2 == null)
        throw t2.$gt();
      t1 = t2 > t1;
    } else
      t1 = true;
    if (t1)
      this.joints = $.List_List(this.jointCapacity);
    old = this.velocities;
    t1 = old == null;
    if (!t1) {
      t2 = this.bodyCapacity;
      t3 = old.length;
      if (t2 == null)
        throw t2.$gt();
      t3 = t2 > t3;
      t2 = t3;
    } else
      t2 = true;
    if (t2) {
      if (t1)
        old = $.List_List(0);
      this.velocities = $.List_List(this.bodyCapacity);
      t1 = this.velocities;
      i = old.length;
      t1.setRange$4;
      if (typeof t1 !== "object" || t1 === null || !!t1.immutable$list)
        $.throwExpression(new $.UnsupportedError("set range"));
      $.IterableMixinWorkaround_setRangeList(t1, 0, i, old, 0);
      for (; t1 = this.velocities, i < t1.length; ++i) {
        t2 = new $.Velocity(null, null);
        t2.v = new $.Vector2(new Float32Array(2));
        t2.a = 0;
        t1[i] = t2;
      }
    }
    old = this.positions;
    t1 = old == null;
    if (!t1) {
      t2 = this.bodyCapacity;
      t3 = old.length;
      if (t2 == null)
        throw t2.$gt();
      t3 = t2 > t3;
      t2 = t3;
    } else
      t2 = true;
    if (t2) {
      if (t1)
        old = $.List_List(0);
      this.positions = $.List_List(this.bodyCapacity);
      t1 = this.positions;
      i = old.length;
      t1.setRange$4;
      if (typeof t1 !== "object" || t1 === null || !!t1.immutable$list)
        $.throwExpression(new $.UnsupportedError("set range"));
      $.IterableMixinWorkaround_setRangeList(t1, 0, i, old, 0);
      for (; t1 = this.positions, i < t1.length; ++i) {
        t2 = new $.Position(null, null);
        t2.x = new $.Vector2(new Float32Array(2));
        t2.a = 0;
        t1[i] = t2;
      }
    }
  },
  solve$3: function(step, gravity, allowSleep) {
    var t1, i, t2, b, t3, t4, t5, t6, t7, t8, velocityDelta, t9, a, a1, a2, b1, i1, i2, fixtureA, fixtureB, bodyA, bodyB, nonStatic, temp, j, ratio, rotation, contactsOkay, jointsOkay, jointOkay, minSleepTime;
    t1 = gravity.storage;
    i = 0;
    while (true) {
      t2 = this.bodyCount;
      if (t2 == null)
        throw $.iae(t2);
      if (!(i < t2))
        break;
      c$0: {
        t2 = this.bodies;
        if (i >= t2.length)
          throw $.ioore(i);
        b = t2[i];
        t2 = $.get$type$x(b);
        if (typeof t2 !== "number")
          return this.solve$3$bailout(1, step, allowSleep, i, t2, b, t1);
        if (t2 !== 2)
          break c$0;
        t2 = b.get$_force().storage;
        t3 = t2.length;
        if (0 >= t3)
          throw $.ioore(0);
        t4 = t2[0];
        t5 = b.get$invMass();
        t6 = t1.length;
        if (0 >= t6)
          throw $.ioore(0);
        t7 = t1[0];
        t8 = step.dt;
        if (1 >= t3)
          throw $.ioore(1);
        t2 = t2[1];
        if (1 >= t6)
          throw $.ioore(1);
        t6 = t1[1];
        velocityDelta = new $.Vector2(new Float32Array(2));
        t3 = velocityDelta.storage;
        t9 = t3.length;
        if (0 >= t9)
          throw $.ioore(0);
        t3[0] = (t4 * t5 + t7) * t8;
        if (1 >= t9)
          throw $.ioore(1);
        t3[1] = (t2 * t5 + t6) * t8;
        t8 = b.get$linearVelocity();
        t8.add$1(t8, velocityDelta);
        t8 = b.get$angularVelocity();
        if (typeof t8 !== "number")
          return this.solve$3$bailout(2, step, allowSleep, i, 0, b, t1, t8);
        b.set$angularVelocity(t8 + step.dt * b.get$invInertia() * b.get$_torque());
        a = 1 - step.dt * b.get$linearDamping();
        t2 = a < 1;
        if (0 > (t2 ? a : 1))
          a1 = 0;
        else
          a1 = t2 ? a : 1;
        t2 = b.get$linearVelocity().storage;
        if (1 >= t2.length)
          throw $.ioore(1);
        t2[1] = t2[1] * a1;
        t2[0] = t2[0] * a1;
        a2 = 1 - step.dt * b.get$angularDamping();
        b1 = a2 < 1 ? a2 : 1;
        t2 = b.get$angularVelocity();
        if (typeof t2 !== "number")
          return this.solve$3$bailout(3, step, allowSleep, i, t2, b, t1, 0, b1);
        b.set$angularVelocity(t2 * (0 > b1 ? 0 : b1));
      }
      ++i;
    }
    i1 = -1;
    i2 = 0;
    while (true) {
      t1 = this.contactCount;
      if (t1 == null)
        throw $.iae(t1);
      t2 = this.contacts;
      if (!(i2 < t1))
        break;
      if (i2 >= t2.length)
        throw $.ioore(i2);
      t1 = t2[i2];
      fixtureA = t1.get$fixtureA();
      fixtureB = t1.get$fixtureB();
      bodyA = $.get$body$x(fixtureA);
      bodyB = $.get$body$x(fixtureB);
      t1 = bodyA.get$type(bodyA);
      if (typeof t1 !== "number")
        return this.solve$3$bailout(4, step, allowSleep, 0, 0, 0, t1, 0, 0, i2, bodyB, i1);
      if (t1 !== 0) {
        t1 = bodyB.get$type(bodyB);
        if (typeof t1 !== "number")
          return this.solve$3$bailout(5, step, allowSleep, 0, 0, 0, t1, 0, 0, i2, 0, i1);
        nonStatic = t1 !== 0;
      } else
        nonStatic = false;
      if (nonStatic) {
        ++i1;
        t1 = this.contacts;
        t2 = t1.length;
        if (i1 >= t2)
          throw $.ioore(i1);
        temp = t1[i1];
        if (i2 >= t2)
          throw $.ioore(i2);
        t1[i1] = t1[i2];
        t1[i2] = temp;
      }
      ++i2;
    }
    t3 = this._contactSolver;
    t3.init$3(t2, t1, step.dtRatio);
    t3.warmStart$0();
    t1 = this.jointCount;
    if (t1 == null)
      throw $.iae(t1);
    t2 = this.joints;
    i = 0;
    for (; i < t1; ++i) {
      if (i >= t2.length)
        throw $.ioore(i);
      t2[i].initVelocityConstraints$1(step);
    }
    for (i = 0; i < step.velocityIterations; ++i) {
      t1 = this.jointCount;
      if (t1 == null)
        throw $.iae(t1);
      t2 = this.joints;
      j = 0;
      for (; j < t1; ++j) {
        if (j >= t2.length)
          throw $.ioore(j);
        t2[j].solveVelocityConstraints$1(step);
      }
      t3.solveVelocityConstraints$0();
    }
    t3.storeImpulses$0();
    temp = new $.Vector2(new Float32Array(2));
    t1 = temp.storage;
    t2 = this._translation;
    t4 = t2.storage;
    i = 0;
    while (true) {
      t5 = this.bodyCount;
      if (t5 == null)
        throw $.iae(t5);
      if (!(i < t5))
        break;
      c$0: {
        t5 = this.bodies;
        if (i >= t5.length)
          throw $.ioore(i);
        b = t5[i];
        t5 = $.get$type$x(b);
        if (typeof t5 !== "number")
          return this.solve$3$bailout(6, step, allowSleep, i, t2, b, t1, 0, 0, 0, 0, 0, t4, t3, temp, t5);
        if (t5 === 0)
          break c$0;
        t5 = b.get$linearVelocity().storage;
        if (1 >= t5.length)
          throw $.ioore(1);
        t6 = t5[1];
        if (1 >= t4.length)
          throw $.ioore(1);
        t4[1] = t6;
        t4[0] = t5[0];
        t5 = step.dt;
        t4[1] = t4[1] * t5;
        t4[0] = t4[0] * t5;
        if (t2.dot$1(t2) > 4) {
          ratio = 2 / t2.get$length(t2);
          t5 = b.get$linearVelocity().storage;
          if (1 >= t5.length)
            throw $.ioore(1);
          t5[1] = t5[1] * ratio;
          t5[0] = t5[0] * ratio;
        }
        t5 = step.dt;
        t6 = b.get$angularVelocity();
        if (typeof t6 !== "number")
          throw $.iae(t6);
        rotation = t5 * t6;
        if (rotation * rotation > 2.4674011002723395) {
          ratio = 1.5707963267948966 / Math.abs(rotation);
          t5 = b.get$angularVelocity();
          if (typeof t5 !== "number")
            return this.solve$3$bailout(7, step, allowSleep, i, t2, b, t1, 0, 0, 0, 0, 0, t4, t3, temp, t5, ratio);
          b.set$angularVelocity(t5 * ratio);
        }
        t5 = b.get$sweep();
        t6 = t5.centerZero.storage;
        t5 = t5.center.storage;
        if (1 >= t5.length)
          throw $.ioore(1);
        t7 = t5[1];
        if (1 >= t6.length)
          throw $.ioore(1);
        t6[1] = t7;
        t6[0] = t5[0];
        t5 = b.get$sweep();
        t5.angleZero = t5.angle;
        t5 = b.get$linearVelocity().storage;
        if (1 >= t5.length)
          throw $.ioore(1);
        t6 = t5[1];
        if (1 >= t1.length)
          throw $.ioore(1);
        t1[1] = t6;
        t1[0] = t5[0];
        t5 = step.dt;
        t1[1] = t1[1] * t5;
        t1[0] = t1[0] * t5;
        t5 = b.get$sweep().center;
        t5.add$1(t5, temp);
        t5 = b.get$sweep();
        t6 = t5.angle;
        if (typeof t6 !== "number")
          return this.solve$3$bailout(8, step, allowSleep, i, t2, b, t1, 0, 0, 0, 0, 0, t4, t3, temp, t5, 0, t6);
        t7 = step.dt;
        t8 = b.get$angularVelocity();
        if (typeof t8 !== "number")
          throw $.iae(t8);
        t5.angle = t6 + t7 * t8;
        b.synchronizeTransform$0();
      }
      ++i;
    }
    for (i = 0; i < step.positionIterations; ++i) {
      contactsOkay = t3.solvePositionConstraints$1(0.2);
      jointsOkay = true;
      j = 0;
      while (true) {
        t1 = this.jointCount;
        if (t1 == null)
          throw $.iae(t1);
        if (!(j < t1))
          break;
        t1 = this.joints;
        if (j >= t1.length)
          throw $.ioore(j);
        jointOkay = t1[j].solvePositionConstraints$1(0.2);
        jointsOkay = jointsOkay && jointOkay;
        ++j;
      }
      if (contactsOkay && jointsOkay)
        break;
    }
    this.report$1(t3.constraints);
    if (allowSleep) {
      minSleepTime = 99999999999999;
      i = 0;
      while (true) {
        t1 = this.bodyCount;
        if (t1 == null)
          throw $.iae(t1);
        if (!(i < t1))
          break;
        c$0: {
          t1 = this.bodies;
          if (i >= t1.length)
            throw $.ioore(i);
          b = t1[i];
          t1 = $.get$type$x(b);
          if (typeof t1 !== "number")
            return this.solve$3$bailout(9, step, 0, i, 0, b, t1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, minSleepTime);
          if (t1 === 0)
            break c$0;
          t1 = b.get$flags();
          if (t1 == null)
            return this.solve$3$bailout(10, step, 0, i, 0, b, t1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, minSleepTime);
          if ((t1 & 4) === 0) {
            b.set$sleepTime(0);
            minSleepTime = 0;
          }
          t1 = b.get$flags();
          if (t1 == null)
            return this.solve$3$bailout(11, step, 0, i, 0, b, t1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, minSleepTime);
          if ((t1 & 4) !== 0) {
            t1 = b.get$angularVelocity();
            if (typeof t1 !== "number")
              return this.solve$3$bailout(12, step, 0, i, 0, b, t1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, minSleepTime);
            t2 = b.get$angularVelocity();
            if (typeof t2 !== "number")
              return this.solve$3$bailout(13, step, 0, i, t2, b, t1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, minSleepTime);
            t1 = t1 * t2 > 0.0012184696791468343 || b.get$linearVelocity().dot$1(b.get$linearVelocity()) > 0.0001;
          } else
            t1 = true;
          if (t1) {
            b.set$sleepTime(0);
            minSleepTime = 0;
          } else {
            b.set$sleepTime(b.get$sleepTime() + step.dt);
            minSleepTime = $.min(minSleepTime, b.get$sleepTime());
            if (typeof minSleepTime !== "number")
              return this.solve$3$bailout(14, step, 0, i, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, minSleepTime);
          }
          if (typeof minSleepTime !== "number")
            return this.solve$3$bailout(15, step, 0, i, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, minSleepTime);
        }
        ++i;
      }
      if (minSleepTime >= 0.5) {
        i = 0;
        while (true) {
          t1 = this.bodyCount;
          if (t1 == null)
            throw $.iae(t1);
          if (!(i < t1))
            break;
          t1 = this.bodies;
          if (i >= t1.length)
            throw $.ioore(i);
          t1[i].set$awake(false);
          ++i;
        }
      }
    }
  },
  solve$3$bailout: function(state0, step, allowSleep, i, t2, b, t1, t8, b1, i2, bodyB, i1, t4, t3, temp, t5, ratio, t6, minSleepTime) {
    switch (state0) {
      case 0:
        t1 = gravity.storage;
        i = 0;
      default:
        L0:
          while (true)
            switch (state0) {
              case 0:
                t2 = this.bodyCount;
                if (t2 == null)
                  throw $.iae(t2);
                if (!(i < t2))
                  break L0;
              default:
                c$0: {
                  switch (state0) {
                    case 0:
                      t2 = this.bodies;
                      if (i >= t2.length)
                        throw $.ioore(i);
                      b = t2[i];
                      t2 = $.get$type$x(b);
                    case 1:
                      state0 = 0;
                      if (!$.$eq(t2, 2))
                        break c$0;
                      t2 = b.get$_force().storage;
                      t3 = t2.length;
                      if (0 >= t3)
                        throw $.ioore(0);
                      t4 = t2[0];
                      t5 = b.get$invMass();
                      t6 = t1.length;
                      if (0 >= t6)
                        throw $.ioore(0);
                      t7 = t1[0];
                      t8 = step.dt;
                      if (1 >= t3)
                        throw $.ioore(1);
                      t2 = t2[1];
                      if (1 >= t6)
                        throw $.ioore(1);
                      t6 = t1[1];
                      velocityDelta = new $.Vector2(new Float32Array(2));
                      t3 = velocityDelta.storage;
                      t9 = t3.length;
                      if (0 >= t9)
                        throw $.ioore(0);
                      t3[0] = (t4 * t5 + t7) * t8;
                      if (1 >= t9)
                        throw $.ioore(1);
                      t3[1] = (t2 * t5 + t6) * t8;
                      t8 = b.get$linearVelocity();
                      t8.add$1(t8, velocityDelta);
                      t8 = b.get$angularVelocity();
                    case 2:
                      state0 = 0;
                      b.set$angularVelocity($.$add$ns(t8, step.dt * b.get$invInertia() * b.get$_torque()));
                      a = 1 - step.dt * b.get$linearDamping();
                      t2 = a < 1;
                      if (0 > (t2 ? a : 1))
                        a1 = 0;
                      else
                        a1 = t2 ? a : 1;
                      t2 = b.get$linearVelocity().storage;
                      if (1 >= t2.length)
                        throw $.ioore(1);
                      t2[1] = t2[1] * a1;
                      t2[0] = t2[0] * a1;
                      a2 = 1 - step.dt * b.get$angularDamping();
                      b1 = a2 < 1 ? a2 : 1;
                      t2 = b.get$angularVelocity();
                    case 3:
                      state0 = 0;
                      b.set$angularVelocity($.$mul$n(t2, 0 > b1 ? 0 : b1));
                  }
                }
                ++i;
            }
        i1 = -1;
        i2 = 0;
      case 4:
      case 5:
        L1:
          while (true)
            switch (state0) {
              case 0:
                t1 = this.contactCount;
                if (t1 == null)
                  throw $.iae(t1);
                t2 = this.contacts;
                if (!(i2 < t1))
                  break L1;
                if (i2 >= t2.length)
                  throw $.ioore(i2);
                t1 = t2[i2];
                fixtureA = t1.get$fixtureA();
                fixtureB = t1.get$fixtureB();
                bodyA = $.get$body$x(fixtureA);
                bodyB = $.get$body$x(fixtureB);
                t1 = bodyA.get$type(bodyA);
              case 4:
                state0 = 0;
              case 5:
                if (state0 === 5 || state0 === 0 && !$.$eq(t1, 0))
                  switch (state0) {
                    case 0:
                      t1 = bodyB.get$type(bodyB);
                    case 5:
                      state0 = 0;
                      nonStatic = !$.$eq(t1, 0);
                  }
                else
                  nonStatic = false;
                if (nonStatic) {
                  ++i1;
                  t1 = this.contacts;
                  t2 = t1.length;
                  if (i1 >= t2)
                    throw $.ioore(i1);
                  temp = t1[i1];
                  if (i2 >= t2)
                    throw $.ioore(i2);
                  t1[i1] = t1[i2];
                  t1[i2] = temp;
                }
                ++i2;
            }
        t3 = this._contactSolver;
        t3.init$3(t2, t1, step.dtRatio);
        t3.warmStart$0();
        t1 = this.jointCount;
        if (t1 == null)
          throw $.iae(t1);
        t2 = this.joints;
        i = 0;
        for (; i < t1; ++i) {
          if (i >= t2.length)
            throw $.ioore(i);
          t2[i].initVelocityConstraints$1(step);
        }
        for (i = 0; i < step.velocityIterations; ++i) {
          t1 = this.jointCount;
          if (t1 == null)
            throw $.iae(t1);
          t2 = this.joints;
          j = 0;
          for (; j < t1; ++j) {
            if (j >= t2.length)
              throw $.ioore(j);
            t2[j].solveVelocityConstraints$1(step);
          }
          t3.solveVelocityConstraints$0();
        }
        t3.storeImpulses$0();
        temp = new $.Vector2(new Float32Array(2));
        t1 = temp.storage;
        t2 = this._translation;
        t4 = t2.storage;
        i = 0;
      case 6:
      case 7:
      case 8:
        L2:
          while (true)
            switch (state0) {
              case 0:
                t5 = this.bodyCount;
                if (t5 == null)
                  throw $.iae(t5);
                if (!(i < t5))
                  break L2;
              default:
                c$0: {
                  switch (state0) {
                    case 0:
                      t5 = this.bodies;
                      if (i >= t5.length)
                        throw $.ioore(i);
                      b = t5[i];
                      t5 = $.get$type$x(b);
                    case 6:
                      state0 = 0;
                      if ($.$eq(t5, 0))
                        break c$0;
                      t5 = b.get$linearVelocity().storage;
                      if (1 >= t5.length)
                        throw $.ioore(1);
                      t6 = t5[1];
                      if (1 >= t4.length)
                        throw $.ioore(1);
                      t4[1] = t6;
                      t4[0] = t5[0];
                      t5 = step.dt;
                      t4[1] = t4[1] * t5;
                      t4[0] = t4[0] * t5;
                      if (t2.dot$1(t2) > 4) {
                        ratio = 2 / t2.get$length(t2);
                        t5 = b.get$linearVelocity().storage;
                        if (1 >= t5.length)
                          throw $.ioore(1);
                        t5[1] = t5[1] * ratio;
                        t5[0] = t5[0] * ratio;
                      }
                      t5 = step.dt;
                      t6 = b.get$angularVelocity();
                      if (typeof t6 !== "number")
                        throw $.iae(t6);
                      rotation = t5 * t6;
                    case 7:
                      if (state0 === 7 || state0 === 0 && rotation * rotation > 2.4674011002723395)
                        switch (state0) {
                          case 0:
                            ratio = 1.5707963267948966 / Math.abs(rotation);
                            t5 = b.get$angularVelocity();
                          case 7:
                            state0 = 0;
                            b.set$angularVelocity($.$mul$n(t5, ratio));
                        }
                      t5 = b.get$sweep();
                      t6 = t5.centerZero.storage;
                      t5 = t5.center.storage;
                      if (1 >= t5.length)
                        throw $.ioore(1);
                      t7 = t5[1];
                      if (1 >= t6.length)
                        throw $.ioore(1);
                      t6[1] = t7;
                      t6[0] = t5[0];
                      t5 = b.get$sweep();
                      t5.angleZero = t5.angle;
                      t5 = b.get$linearVelocity().storage;
                      if (1 >= t5.length)
                        throw $.ioore(1);
                      t6 = t5[1];
                      if (1 >= t1.length)
                        throw $.ioore(1);
                      t1[1] = t6;
                      t1[0] = t5[0];
                      t5 = step.dt;
                      t1[1] = t1[1] * t5;
                      t1[0] = t1[0] * t5;
                      t5 = b.get$sweep().center;
                      t5.add$1(t5, temp);
                      t5 = b.get$sweep();
                      t6 = t5.angle;
                    case 8:
                      state0 = 0;
                      t7 = step.dt;
                      t8 = b.get$angularVelocity();
                      if (typeof t8 !== "number")
                        throw $.iae(t8);
                      t5.angle = $.$add$ns(t6, t7 * t8);
                      b.synchronizeTransform$0();
                  }
                }
                ++i;
            }
        for (i = 0; i < step.positionIterations; ++i) {
          contactsOkay = t3.solvePositionConstraints$1(0.2);
          jointsOkay = true;
          j = 0;
          while (true) {
            t1 = this.jointCount;
            if (t1 == null)
              throw $.iae(t1);
            if (!(j < t1))
              break;
            t1 = this.joints;
            if (j >= t1.length)
              throw $.ioore(j);
            jointOkay = t1[j].solvePositionConstraints$1(0.2);
            jointsOkay = jointsOkay && jointOkay;
            ++j;
          }
          if (contactsOkay && jointsOkay)
            break;
        }
        this.report$1(t3.constraints);
      case 9:
      case 10:
      case 11:
      case 12:
      case 13:
      case 14:
      case 15:
        var t7, velocityDelta, t9, a, a1, a2, fixtureA, fixtureB, bodyA, nonStatic, j, rotation, contactsOkay, jointsOkay, jointOkay;
        if (state0 === 15 || state0 === 14 || state0 === 13 || state0 === 12 || state0 === 11 || state0 === 10 || state0 === 9 || state0 === 0 && allowSleep)
          switch (state0) {
            case 0:
              minSleepTime = 99999999999999;
              i = 0;
            default:
              L3:
                while (true)
                  switch (state0) {
                    case 0:
                      t1 = this.bodyCount;
                      if (t1 == null)
                        throw $.iae(t1);
                      if (!(i < t1))
                        break L3;
                    default:
                      c$0: {
                        switch (state0) {
                          case 0:
                            t1 = this.bodies;
                            if (i >= t1.length)
                              throw $.ioore(i);
                            b = t1[i];
                            t1 = $.get$type$x(b);
                          case 9:
                            state0 = 0;
                            if ($.$eq(t1, 0))
                              break c$0;
                            t1 = b.get$flags();
                          case 10:
                            state0 = 0;
                            if (t1 == null)
                              throw t1.$and();
                            if ((t1 & 4) === 0) {
                              b.set$sleepTime(0);
                              minSleepTime = 0;
                            }
                            t1 = b.get$flags();
                          case 11:
                            state0 = 0;
                            if (t1 == null)
                              throw t1.$and();
                          default:
                            if (state0 === 13 || state0 === 12 || state0 === 0 && (t1 & 4) !== 0)
                              switch (state0) {
                                case 0:
                                  t1 = b.get$angularVelocity();
                                case 12:
                                  state0 = 0;
                                  t2 = b.get$angularVelocity();
                                case 13:
                                  state0 = 0;
                                  t1 = $.$gt$n($.$mul$n(t1, t2), 0.0012184696791468343) || b.get$linearVelocity().dot$1(b.get$linearVelocity()) > 0.0001;
                              }
                            else
                              t1 = true;
                          case 14:
                            if (state0 === 0 && t1) {
                              b.set$sleepTime(0);
                              minSleepTime = 0;
                            } else
                              switch (state0) {
                                case 0:
                                  b.set$sleepTime(b.get$sleepTime() + step.dt);
                                  minSleepTime = $.min(minSleepTime, b.get$sleepTime());
                                case 14:
                                  state0 = 0;
                              }
                          case 15:
                            state0 = 0;
                        }
                      }
                      ++i;
                  }
              if ($.$ge$n(minSleepTime, 0.5)) {
                i = 0;
                while (true) {
                  t1 = this.bodyCount;
                  if (t1 == null)
                    throw $.iae(t1);
                  if (!(i < t1))
                    break;
                  t1 = this.bodies;
                  if (i >= t1.length)
                    throw $.ioore(i);
                  t1[i].set$awake(false);
                  ++i;
                }
              }
          }
    }
  },
  report$1: function(constraints) {
    var t1, t2, t3, t4, t5, t6, t7, t8, i, cc, t9, j, t10;
    t1 = this.listener;
    if (t1 == null)
      return;
    t2 = this.contactCount;
    if (t2 == null)
      throw $.iae(t2);
    t3 = this.impulse;
    t4 = t3.normalImpulses;
    t5 = t4.length;
    t3 = t3.tangentImpulses;
    t6 = t3.length;
    t7 = this.contacts;
    t8 = constraints.length;
    i = 0;
    for (; i < t2; ++i) {
      if (i >= t7.length)
        throw $.ioore(i);
      if (i >= t8)
        throw $.ioore(i);
      cc = constraints[i];
      t9 = $.getInterceptor$x(cc);
      j = 0;
      while (true) {
        t10 = cc.get$pointCount();
        if (typeof t10 !== "number")
          throw $.iae(t10);
        if (!(j < t10))
          break;
        t10 = $.$index$asx(t9.get$points(cc), j).get$normalImpulse();
        if (j >= t5)
          throw $.ioore(j);
        t4[j] = t10;
        t10 = $.$index$asx(t9.get$points(cc), j).get$tangentImpulse();
        if (j >= t6)
          throw $.ioore(j);
        t3[j] = t10;
        ++j;
      }
      t1.postSolve$2;
    }
  },
  static: {
Island$: function() {
  return new $.Island(null, null, null, null, null, null, null, null, null, null, null, null, null, $.ContactSolver$(), new $.Vector2(new Float32Array(2)), $.ContactImpulse$());
}}

},

Position: {"": "Object;x*,a>"},

Velocity: {"": "Object;v<,a>"},

Joint: {"": "Object;"},

TimeStep: {"": "Object;dt,inv_dt,dtRatio,velocityIterations,positionIterations,warmStarting", static: {
TimeStep$: function() {
  return new $.TimeStep(0, 0, 0, 0, 0, true);
}}
},

World: {"": "Object;_flags,_contactManager,_bodyList,_jointList,_bodyCount,_jointCount,_gravity,_allowSleep,_debugDraw,_fixtureDestructionListener,_jointDestructionListener,_pool,_inverseTimestep,_warmStarting,_continuousPhysics,_contactStacks,center<,axis,timestep,cA,cB,wqwrapper,toiInput,toiOutput,backup,toiSolver,contacts,island,stack",
  _addType$3: function(creatorStack, type1, type2) {
    var register, t1, t2, t3, register2;
    register = new $.ContactRegister(null, false);
    register.creator = creatorStack;
    register.primary = true;
    t1 = this._contactStacks;
    t2 = t1.length;
    if (type1 < 0 || type1 >= t2)
      throw $.ioore(type1);
    t3 = t1[type1];
    if (type2 < 0 || type2 >= t3.length)
      throw $.ioore(type2);
    t3[type2] = register;
    if (type1 !== type2) {
      register2 = new $.ContactRegister(null, false);
      register2.creator = creatorStack;
      register2.primary = false;
      if (type2 >= t2)
        throw $.ioore(type2);
      t1 = t1[type2];
      if (type1 >= t1.length)
        throw $.ioore(type1);
      t1[type1] = register2;
    }
  },
  _initializeRegisters$0: function() {
    var t1 = this._pool;
    this._addType$3(t1.getCircleContactStack$0(), 0, 0);
    this._addType$3(t1.getPolyCircleContactStack$0(), 1, 0);
    this._addType$3(t1.getPolyContactStack$0(), 1, 1);
  },
  popContact$2: function(fixtureA, fixtureB) {
    var type1, type2, t1, reg, creator, c;
    type1 = $.get$type$x(fixtureA);
    type2 = $.get$type$x(fixtureB);
    t1 = this._contactStacks;
    if (type1 >>> 0 !== type1 || type1 >= t1.length)
      throw $.ioore(type1);
    t1 = t1[type1];
    if (type2 >>> 0 !== type2 || type2 >= t1.length)
      throw $.ioore(type2);
    reg = t1[type2];
    creator = reg.get$creator();
    if (creator != null) {
      creator.get$isEmpty;
      if (creator._head === creator._tail)
        creator = this._getFreshContactStack$2(type1, type2);
      if (reg.get$primary()) {
        c = creator.removeFirst$0();
        c.init$2(fixtureA, fixtureB);
        return c;
      } else {
        c = creator.removeFirst$0();
        c.init$2(fixtureB, fixtureA);
        return c;
      }
    } else
      return;
  },
  _getFreshContactStack$2: function(type1, type2) {
    var t1, t2;
    t1 = $.getInterceptor(type1);
    if (t1.$eq(type1, 0) && $.$eq(type2, 0))
      return this._pool.getCircleContactStack$0();
    else {
      t1 = t1.$eq(type1, 1) && $.$eq(type2, 1);
      t2 = this._pool;
      if (t1)
        return t2.getPolyContactStack$0();
      else
        return t2.getPolyCircleContactStack$0();
    }
  },
  pushContact$1: function(contact) {
    var type1, type2, t1;
    if ($.$gt$n(contact.get$manifold().get$pointCount(), 0)) {
      $.get$body$x(contact.get$fixtureA()).set$awake(true);
      $.get$body$x(contact.get$fixtureB()).set$awake(true);
    }
    type1 = $.get$type$x(contact.get$fixtureA());
    type2 = $.get$type$x(contact.get$fixtureB());
    t1 = this._contactStacks;
    if (type1 >>> 0 !== type1 || type1 >= t1.length)
      throw $.ioore(type1);
    t1 = t1[type1];
    if (type2 >>> 0 !== type2 || type2 >= t1.length)
      throw $.ioore(type2);
    t1[type2].get$creator().addFirst$1(contact);
  },
  createBody$1: function(def) {
    var b, t1;
    if ((this._flags & 2) === 2)
      return;
    b = $.Body$(def, this);
    b.prev = null;
    b.next = this._bodyList;
    t1 = this._bodyList;
    if (t1 != null)
      t1.prev = b;
    this._bodyList = b;
    this._bodyCount = this._bodyCount + 1;
    return b;
  },
  step$3: function(_, dt, velocityIterations, positionIterations) {
    var t1;
    if ((this._flags & 1) === 1) {
      t1 = this._contactManager;
      t1.findNewContacts$0;
      t1.broadPhase.updatePairs$1(t1.get$_addPair());
      this._flags = (this._flags & 4294967294) >>> 0;
    }
    this._flags = (this._flags | 2) >>> 0;
    t1 = this.timestep;
    t1.dt = dt;
    t1.velocityIterations = velocityIterations;
    t1.positionIterations = positionIterations;
    if (dt > 0)
      t1.inv_dt = 1 / dt;
    else
      t1.inv_dt = 0;
    t1.dtRatio = this._inverseTimestep * dt;
    t1.warmStarting = this._warmStarting;
    this._contactManager.collide$0();
    if (t1.dt > 0) {
      this.solve$1(t1);
      if (this._continuousPhysics)
        this.solveTimeOfImpact$0();
      this._inverseTimestep = t1.inv_dt;
    }
    if ((this._flags & 4) === 4)
      this.clearForces$0();
    this._flags = (this._flags & 4294967293) >>> 0;
  },
  clearForces$0: function() {
    var body, t1, t2;
    for (body = this._bodyList; body != null; body = body.get$next()) {
      t1 = body.get$_force().storage;
      t2 = t1.length;
      if (0 >= t2)
        throw $.ioore(0);
      t1[0] = 0;
      if (1 >= t2)
        throw $.ioore(1);
      t1[1] = 0;
      body.set$_torque(0);
    }
  },
  drawDebugData$0: function() {
    var t1, drawFlags, xf, color, b, t2, t3, t4, t5, f, j, c, fixtureA, fixtureB, c0, t6, t7, t8, aabb, vs, i;
    t1 = this._debugDraw;
    if (t1 == null)
      return;
    drawFlags = t1.flags;
    if ((drawFlags & 1) === 1) {
      xf = $.Transform$();
      color = new $.Color3(0, 0, 0);
      for (b = this._bodyList, t1 = xf.position.storage, t2 = xf.rotation; b != null; b = b.get$next()) {
        t3 = b.get$originTransform();
        t4 = t3.position.storage;
        if (1 >= t4.length)
          throw $.ioore(1);
        t5 = t4[1];
        if (1 >= t1.length)
          throw $.ioore(1);
        t1[1] = t5;
        t1[0] = t4[0];
        t2.setFrom$1(t3.rotation);
        for (f = b.get$fixtureList(), t3 = $.getInterceptor$x(b); f != null; f = f.get$next())
          if (!b.get$active()) {
            color.setFromRGBF$3(0.5, 0.5, 0.3);
            this.drawShape$3(f, xf, color);
          } else if ($.$eq(t3.get$type(b), 0)) {
            color.setFromRGBF$3(0.5, 0.9, 0.3);
            this.drawShape$3(f, xf, color);
          } else if ($.$eq(t3.get$type(b), 1)) {
            color.setFromRGBF$3(0.5, 0.5, 0.9);
            this.drawShape$3(f, xf, color);
          } else if (!b.get$awake()) {
            color.setFromRGBF$3(0.9, 0.9, 0.9);
            this.drawShape$3(f, xf, color);
          } else {
            color.setFromRGBF$3(0.9, 0.7, 0.7);
            this.drawShape$3(f, xf, color);
          }
      }
    }
    if ((drawFlags & 2) === 2)
      for (j = this._jointList; j != null; j = j.get$_next())
        this.drawJoint$1(j);
    if ((drawFlags & 8) === 8) {
      color = $.Color3$fromRGBF(0.3, 0.9, 0.9);
      for (c = this._contactManager.contactList, t1 = this.cA, t2 = t1.storage, t3 = this.cB, t4 = t3.storage; c != null; c = c.get$next()) {
        fixtureA = c.get$fixtureA();
        fixtureB = c.get$fixtureB();
        t5 = fixtureA.get$box();
        c0 = new $.Vector2(new Float32Array(2));
        t6 = c0.storage;
        t7 = t5.lowerBound.storage;
        if (1 >= t7.length)
          throw $.ioore(1);
        t8 = t7[1];
        if (1 >= t6.length)
          throw $.ioore(1);
        t6[1] = t8;
        t6[0] = t7[0];
        c0.add$1(c0, t5.upperBound);
        if (1 >= t6.length)
          throw $.ioore(1);
        t6[1] = t6[1] * 0.5;
        t6[0] = t6[0] * 0.5;
        t5 = t6[1];
        if (1 >= t2.length)
          throw $.ioore(1);
        t2[1] = t5;
        t2[0] = t6[0];
        t6 = fixtureB.get$box();
        c0 = new $.Vector2(new Float32Array(2));
        t5 = c0.storage;
        t7 = t6.lowerBound.storage;
        if (1 >= t7.length)
          throw $.ioore(1);
        t8 = t7[1];
        if (1 >= t5.length)
          throw $.ioore(1);
        t5[1] = t8;
        t5[0] = t7[0];
        c0.add$1(c0, t6.upperBound);
        if (1 >= t5.length)
          throw $.ioore(1);
        t5[1] = t5[1] * 0.5;
        t5[0] = t5[0] * 0.5;
        t6 = t5[1];
        if (1 >= t4.length)
          throw $.ioore(1);
        t4[1] = t6;
        t4[0] = t5[0];
        this._debugDraw.drawSegment$3(t1, t3, color);
      }
    }
    if ((drawFlags & 4) === 4) {
      color = $.Color3$fromRGBF(0.9, 0.3, 0.9);
      for (b = this._bodyList, t1 = 0 !== (drawFlags & 64); b != null; b = b.get$next()) {
        if (!b.get$active())
          continue;
        for (f = b.get$fixtureList(); f != null; f = f.get$next()) {
          aabb = f.get$proxy().get$box();
          vs = $.List_List(4);
          for (i = 0; i < 4; ++i)
            vs[i] = new $.Vector2(new Float32Array(2));
          t2 = vs[0];
          t3 = aabb.lowerBound;
          t3.get$x;
          t4 = t3.storage;
          t5 = t4.length;
          if (0 >= t5)
            throw $.ioore(0);
          t6 = t4[0];
          t3.get$y;
          if (1 >= t5)
            throw $.ioore(1);
          t2.setValues$2(t6, t4[1]);
          t4 = vs[1];
          t6 = aabb.upperBound;
          t6.get$x;
          t6 = t6.storage;
          if (0 >= t6.length)
            throw $.ioore(0);
          t6 = t6[0];
          t2 = aabb.lowerBound;
          t2.get$y;
          t2 = t2.storage;
          if (1 >= t2.length)
            throw $.ioore(1);
          t4.setValues$2(t6, t2[1]);
          t2 = vs[2];
          t6 = aabb.upperBound;
          t6.get$x;
          t4 = t6.storage;
          t5 = t4.length;
          if (0 >= t5)
            throw $.ioore(0);
          t3 = t4[0];
          t6.get$y;
          if (1 >= t5)
            throw $.ioore(1);
          t2.setValues$2(t3, t4[1]);
          t4 = vs[3];
          t3 = aabb.lowerBound;
          t3.get$x;
          t3 = t3.storage;
          if (0 >= t3.length)
            throw $.ioore(0);
          t3 = t3[0];
          t2 = aabb.upperBound;
          t2.get$y;
          t2 = t2.storage;
          if (1 >= t2.length)
            throw $.ioore(1);
          t4.setValues$2(t3, t2[1]);
          t2 = this._debugDraw;
          if (t1) {
            t2.drawPolygon$3;
            t2._pathPolygon$3(vs, 4, color);
            $.stroke$0$x(t2.ctx);
          } else {
            t2.drawSolidPolygon$3;
            t2._pathPolygon$3(vs, 4, color);
            $.fill$0$x(t2.ctx);
          }
        }
      }
    }
    if ((drawFlags & 16) === 16) {
      xf = $.Transform$();
      color = new $.Color3(1, 0, 0);
      for (b = this._bodyList, t1 = xf.position, t2 = t1.storage, t3 = xf.rotation; b != null; b = b.get$next()) {
        t4 = b.get$originTransform();
        t5 = t4.position.storage;
        if (1 >= t5.length)
          throw $.ioore(1);
        t6 = t5[1];
        if (1 >= t2.length)
          throw $.ioore(1);
        t2[1] = t6;
        t2[0] = t5[0];
        t3.setFrom$1(t4.rotation);
        t4 = b.get$worldCenter().storage;
        if (1 >= t4.length)
          throw $.ioore(1);
        t5 = t4[1];
        if (1 >= t2.length)
          throw $.ioore(1);
        t2[1] = t5;
        t2[0] = t4[0];
        t4 = this._debugDraw;
        t4.drawTransform$2;
        t5 = t4.viewportTransform;
        t6 = t5.scale;
        t4 = t4.ctx;
        t7 = $.getInterceptor$x(t4);
        t7.setStrokeColorRgb$4(t4, color.x, color.y, color.z, 0.9);
        t7.setFillColorRgb$4(t4, color.x, color.y, color.z, 0.8);
        t5.getWorldToScreen$2(t1, t1);
        t7.beginPath$0(t4);
        t5 = t2.length;
        if (0 >= t5)
          throw $.ioore(0);
        t8 = t2[0];
        if (1 >= t5)
          throw $.ioore(1);
        t7.arc$6(t4, t8, t2[1], 0.1 * t6, 0, 6.283185307179586, true);
        t7.closePath$0(t4);
        t7.stroke$0(t4);
      }
    }
  },
  get$contactList: function() {
    return this._contactManager.contactList;
  },
  get$jointList: function() {
    return this._jointList;
  },
  solve$1: function(timeStep) {
    var t1, t2, t3, b, c, j, stackSize, seed, t4, stackCount, t5, ce, contact, sensorA, sensorB, other, stackCount0, je, t6, i;
    t1 = this.island;
    t2 = this._bodyCount;
    t3 = this._contactManager;
    t1.init$4(t2, t3.contactCount, this._jointCount, t3.contactListener);
    for (b = this._bodyList; b != null; b = b.get$next()) {
      t2 = b.get$flags();
      if (t2 == null)
        throw t2.$and();
      b.set$flags((t2 & 4294967294) >>> 0);
    }
    for (c = this._contactManager.contactList; c != null; c = c.get$next()) {
      t2 = c.get$flags();
      if (t2 == null)
        throw t2.$and();
      c.set$flags((t2 & 4294967294) >>> 0);
    }
    for (j = this._jointList; j != null; j = j.get$_next())
      j.set$islandFlag(false);
    stackSize = this._bodyCount;
    if (this.stack.length < stackSize)
      this.stack = $.List_List(stackSize);
    for (seed = this._bodyList, t2 = this._gravity, t3 = this._allowSleep; seed != null; seed = seed.get$next()) {
      t4 = seed.get$flags();
      if (t4 == null)
        throw t4.$and();
      if ((t4 & 1) === 1)
        continue;
      if (!seed.get$awake() || !seed.get$active())
        continue;
      if ($.$eq($.get$type$x(seed), 0))
        continue;
      t1.bodyCount = 0;
      t1.contactCount = 0;
      t1.jointCount = 0;
      t4 = this.stack;
      if (0 >= t4.length)
        throw $.ioore(0);
      t4[0] = seed;
      t4 = seed.get$flags();
      if (t4 == null)
        throw t4.$or();
      seed.set$flags((t4 | 1) >>> 0);
      for (stackCount = 1; stackCount > 0;) {
        t4 = this.stack;
        --stackCount;
        if (stackCount >= t4.length)
          throw $.ioore(stackCount);
        b = t4[stackCount];
        b.set$islandIndex(t1.bodyCount);
        t4 = t1.bodies;
        t5 = t1.bodyCount;
        if (t5 == null)
          throw t5.$add();
        t1.bodyCount = t5 + 1;
        if (t5 >>> 0 !== t5 || t5 >= t4.length)
          throw $.ioore(t5);
        t4[t5] = b;
        b.set$awake(true);
        if ($.$eq($.get$type$x(b), 0))
          continue;
        for (ce = b.get$contactList(); ce != null; ce = ce.get$next()) {
          contact = ce.get$contact();
          t4 = contact.get$flags();
          if (t4 == null)
            throw t4.$and();
          if ((t4 & 1) === 1)
            continue;
          if (!contact.get$enabled() || !contact.get$touching())
            continue;
          sensorA = contact.get$fixtureA().get$isSensor();
          sensorB = contact.get$fixtureB().get$isSensor();
          if (sensorA === true || sensorB === true)
            continue;
          t4 = t1.contacts;
          t5 = t1.contactCount;
          if (t5 == null)
            throw t5.$add();
          t1.contactCount = t5 + 1;
          if (t5 >>> 0 !== t5 || t5 >= t4.length)
            throw $.ioore(t5);
          t4[t5] = contact;
          t5 = contact.get$flags();
          if (t5 == null)
            throw t5.$or();
          contact.set$flags((t5 | 1) >>> 0);
          other = ce.get$other();
          if ((other.get$flags() & 1) === 1)
            continue;
          t4 = this.stack;
          stackCount0 = stackCount + 1;
          if (stackCount >= t4.length)
            throw $.ioore(stackCount);
          t4[stackCount] = other;
          other.set$flags((other.get$flags() | 1) >>> 0);
          stackCount = stackCount0;
        }
        for (je = b.get$jointList(); je != null; je = je.get$next()) {
          t4 = je.get$joint();
          t4.get$islandFlag();
          other = je.get$other();
          if (!other.get$active())
            continue;
          t5 = t1.joints;
          t6 = t1.jointCount;
          if (t6 == null)
            throw t6.$add();
          t1.jointCount = t6 + 1;
          if (t6 >>> 0 !== t6 || t6 >= t5.length)
            throw $.ioore(t6);
          t5[t6] = t4;
          je.get$joint().set$islandFlag(true);
          if ((other.get$flags() & 1) === 1)
            continue;
          t4 = this.stack;
          stackCount0 = stackCount + 1;
          if (stackCount >= t4.length)
            throw $.ioore(stackCount);
          t4[stackCount] = other;
          other.set$flags((other.get$flags() | 1) >>> 0);
          stackCount = stackCount0;
        }
      }
      t1.solve$3(timeStep, t2, t3);
      i = 0;
      while (true) {
        t4 = t1.bodyCount;
        if (t4 == null)
          throw $.iae(t4);
        if (!(i < t4))
          break;
        t4 = t1.bodies;
        if (i >= t4.length)
          throw $.ioore(i);
        b = t4[i];
        if ($.$eq($.get$type$x(b), 0)) {
          t4 = b.get$flags();
          if (t4 == null)
            throw t4.$and();
          b.set$flags((t4 & 4294967294) >>> 0);
        }
        ++i;
      }
    }
    for (b = this._bodyList; b != null; b = b.get$next()) {
      t1 = b.get$flags();
      if (t1 == null)
        throw t1.$and();
      if ((t1 & 1) === 0)
        continue;
      if ($.$eq($.get$type$x(b), 0))
        continue;
      b.synchronizeFixtures$0();
    }
    t1 = this._contactManager;
    t1.findNewContacts$0;
    t1.broadPhase.updatePairs$1(t1.get$_addPair());
  },
  solveTimeOfImpact$0: function() {
    var c, t1, body, t2;
    for (c = this._contactManager.contactList; c != null; c = c.get$next()) {
      t1 = c.get$flags();
      if (t1 == null)
        throw t1.$or();
      c.set$flags((t1 | 4) >>> 0);
      c.set$toiCount(0);
    }
    for (body = this._bodyList; body != null; body = body.get$next()) {
      t1 = body.get$flags();
      if (t1 == null)
        throw t1.$and();
      if ((t1 & 1) !== 0) {
        t1 = $.getInterceptor$x(body);
        t1 = $.$eq(t1.get$type(body), 1) || $.$eq(t1.get$type(body), 0);
      } else
        t1 = true;
      t2 = body.get$flags();
      if (t1) {
        if (t2 == null)
          throw t2.$or();
        body.set$flags((t2 | 64) >>> 0);
      } else {
        if (t2 == null)
          throw t2.$and();
        body.set$flags((t2 & 4294967231) >>> 0);
      }
    }
    for (body = this._bodyList; body != null; body = body.get$next()) {
      t1 = body.get$flags();
      if (t1 == null)
        throw t1.$and();
      if ((t1 & 64) === 64 || body.get$bullet())
        continue;
      this.solveTimeOfImpactGivenBody$1(body);
      t1 = body.get$flags();
      if (t1 == null)
        throw t1.$or();
      body.set$flags((t1 | 64) >>> 0);
    }
    for (body = this._bodyList; body != null; body = body.get$next()) {
      t1 = body.get$flags();
      if (t1 == null)
        throw t1.$and();
      if ((t1 & 64) === 64 || !body.get$bullet())
        continue;
      this.solveTimeOfImpactGivenBody$1(body);
      t1 = body.get$flags();
      if (t1 == null)
        throw t1.$or();
      body.set$flags((t1 | 64) >>> 0);
    }
  },
  solveTimeOfImpactGivenBody$1: function(body) {
    var bullet, t1, t2, t3, t4, t5, t6, t7, toiContact, toi, toiOther, iter, ce, found, count, other, type, t8, contact, fixtureA, fixtureB, bodyA, t9, bodyB, i;
    bullet = body.get$bullet();
    t1 = this.toiOutput;
    t2 = this.toiInput;
    t3 = t2.proxyA;
    t4 = t2.proxyB;
    t5 = t2.sweepA;
    t6 = t2.sweepB;
    t7 = this._pool;
    toiContact = null;
    toi = 1;
    toiOther = null;
    iter = 0;
    do {
      for (ce = body.get$contactList(), found = false, count = 0; ce != null; ce = ce.get$next()) {
        if ($.$eq(ce.get$contact(), toiContact))
          continue;
        other = ce.get$other();
        type = other.get$type(other);
        if (bullet) {
          if ((other.get$flags() & 64) === 0)
            continue;
          if (!$.$eq(type, 0)) {
            t8 = ce.get$contact().get$flags();
            if (t8 == null)
              return this.solveTimeOfImpactGivenBody$1$bailout(1, t5, body, t6, t7, t8, bullet, other, t1, iter, toiContact, toi, toiOther, found, count, t2, ce, t3, t4);
            t8 = (t8 & 16) !== 0;
          } else
            t8 = false;
          if (t8)
            continue;
        } else if ($.$eq(type, 2))
          continue;
        contact = ce.get$contact();
        if (contact.get$enabled()) {
          t8 = contact.get$toiCount();
          if (t8 == null)
            throw t8.$gt();
          t8 = t8 > 10;
        } else
          t8 = true;
        if (t8)
          continue;
        fixtureA = contact.get$fixtureA();
        fixtureB = contact.get$fixtureB();
        if (fixtureA.get$isSensor() === true || fixtureB.get$isSensor() === true)
          continue;
        t8 = $.getInterceptor$x(fixtureA);
        bodyA = t8.get$body(fixtureA);
        t9 = $.getInterceptor$x(fixtureB);
        bodyB = t9.get$body(fixtureB);
        t3.setFromShape$1(t8.get$shape(fixtureA));
        t4.setFromShape$1(t9.get$shape(fixtureB));
        t5.setFrom$1(bodyA.get$sweep());
        t6.setFrom$1(bodyB.get$sweep());
        t2.tMax = toi;
        t7.timeOfImpact.timeOfImpact$2(t1, t2);
        if (t1.state === 3) {
          t8 = t1.t;
          if (typeof t8 !== "number")
            return this.solveTimeOfImpactGivenBody$1$bailout(2, t5, body, t6, t7, t8, bullet, other, t1, iter, toiContact, toi, toiOther, found, count, t2, ce, t3, t4, contact);
          t8 = t8 < toi;
        } else
          t8 = false;
        if (t8) {
          toi = t1.t;
          if (typeof toi !== "number")
            return this.solveTimeOfImpactGivenBody$1$bailout(3, t5, body, t6, t7, 0, bullet, other, t1, iter, 0, toi, 0, 0, count, t2, ce, t3, t4, contact);
          toiOther = other;
          toiContact = contact;
          found = true;
        }
        ++count;
      }
      ++iter;
    } while (found && count > 1 && iter < 50);
    if (toiContact == null) {
      body.advance$1(1);
      return;
    }
    t1 = this.backup;
    t1.setFrom$1(body.get$sweep());
    body.advance$1(toi);
    toiContact.update$1(this._contactManager.contactListener);
    if (!toiContact.get$enabled()) {
      body.get$sweep().setFrom$1(t1);
      this.solveTimeOfImpactGivenBody$1(body);
    }
    t1 = toiContact.get$toiCount();
    if (t1 == null)
      throw t1.$add();
    toiContact.set$toiCount(t1 + 1);
    if (this.contacts.length < 32)
      this.contacts = $.List_List(32);
    ce = body.get$contactList();
    count = 0;
    while (true) {
      if (!(ce != null && count < 32))
        break;
      c$0: {
        other = ce.get$other();
        type = other.get$type(other);
        if (typeof type !== "number")
          return this.solveTimeOfImpactGivenBody$1$bailout(4, 0, body, 0, 0, 0, 0, 0, 0, 0, toiContact, 0, toiOther, 0, count, 0, ce, 0, 0, 0, type);
        if (type === 2)
          break c$0;
        contact = ce.get$contact();
        if (!contact.get$enabled())
          break c$0;
        fixtureA = contact.get$fixtureA();
        fixtureB = contact.get$fixtureB();
        if (fixtureA.get$isSensor() === true || fixtureB.get$isSensor() === true)
          break c$0;
        if (!$.$eq(contact, toiContact))
          contact.update$1(this._contactManager.contactListener);
        if (!contact.get$enabled() || !contact.get$touching())
          break c$0;
        t1 = this.contacts;
        if (count >= t1.length)
          throw $.ioore(count);
        t1[count] = contact;
        ++count;
      }
      ce = ce.get$next();
    }
    t1 = this.toiSolver;
    t1.initialize$3(t1, this.contacts, count, body);
    for (i = 0; i < 20; ++i)
      if (t1.solve$1(0.75))
        break;
    if (!$.$eq(toiOther.get$type(toiOther), 0)) {
      t1 = toiContact.get$flags();
      if (t1 == null)
        throw t1.$or();
      toiContact.set$flags((t1 | 16) >>> 0);
    }
  },
  solveTimeOfImpactGivenBody$1$bailout: function(state0, t5, body, t6, t7, t8, bullet, other, t1, iter, toiContact, toi, toiOther, found, count, t2, ce, t3, t4, contact, type) {
    switch (state0) {
      case 0:
        bullet = body.get$bullet();
        t1 = this.toiOutput;
        t2 = this.toiInput;
        t3 = t2.proxyA;
        t4 = t2.proxyB;
        t5 = t2.sweepA;
        t6 = t2.sweepB;
        t7 = this._pool;
        toiContact = null;
        toi = 1;
        toiOther = null;
        iter = 0;
      default:
        L0:
          while (true)
            switch (state0) {
              case 0:
                ce = body.get$contactList();
                found = false;
                count = 0;
              default:
                L1:
                  while (true)
                    switch (state0) {
                      case 0:
                        if (!(ce != null))
                          break L1;
                      default:
                        c$1: {
                          switch (state0) {
                            case 0:
                              if ($.$eq(ce.get$contact(), toiContact))
                                break c$1;
                              other = ce.get$other();
                              type = other.get$type(other);
                            case 1:
                              if (state0 === 1 || state0 === 0 && bullet)
                                switch (state0) {
                                  case 0:
                                    if ((other.get$flags() & 64) === 0)
                                      break c$1;
                                  case 1:
                                    if (state0 === 1 || state0 === 0 && !$.$eq(type, 0))
                                      switch (state0) {
                                        case 0:
                                          t8 = ce.get$contact().get$flags();
                                        case 1:
                                          state0 = 0;
                                          if (t8 == null)
                                            throw t8.$and();
                                          t8 = (t8 & 16) !== 0;
                                      }
                                    else
                                      t8 = false;
                                    if (t8)
                                      break c$1;
                                }
                              else if ($.$eq(type, 2))
                                break c$1;
                              contact = ce.get$contact();
                              if (contact.get$enabled()) {
                                t8 = contact.get$toiCount();
                                if (t8 == null)
                                  throw t8.$gt();
                                t8 = t8 > 10;
                              } else
                                t8 = true;
                              if (t8)
                                break c$1;
                              fixtureA = contact.get$fixtureA();
                              fixtureB = contact.get$fixtureB();
                              if (fixtureA.get$isSensor() === true || fixtureB.get$isSensor() === true)
                                break c$1;
                              t8 = $.getInterceptor$x(fixtureA);
                              bodyA = t8.get$body(fixtureA);
                              t9 = $.getInterceptor$x(fixtureB);
                              bodyB = t9.get$body(fixtureB);
                              t3.setFromShape$1(t8.get$shape(fixtureA));
                              t4.setFromShape$1(t9.get$shape(fixtureB));
                              t5.setFrom$1(bodyA.get$sweep());
                              t6.setFrom$1(bodyB.get$sweep());
                              t2.tMax = toi;
                              t7.timeOfImpact.timeOfImpact$2(t1, t2);
                            case 2:
                              if (state0 === 2 || state0 === 0 && t1.state === 3)
                                switch (state0) {
                                  case 0:
                                    t8 = t1.t;
                                  case 2:
                                    state0 = 0;
                                    t8 = $.$lt$n(t8, toi);
                                }
                              else
                                t8 = false;
                            case 3:
                              if (state0 === 3 || state0 === 0 && t8)
                                switch (state0) {
                                  case 0:
                                    toi = t1.t;
                                  case 3:
                                    state0 = 0;
                                    toiOther = other;
                                    toiContact = contact;
                                    found = true;
                                }
                              ++count;
                          }
                        }
                        ce = ce.get$next();
                    }
                ++iter;
                if (!(found && count > 1 && iter < 50))
                  break L0;
            }
        if (toiContact == null) {
          body.advance$1(1);
          return;
        }
        t1 = this.backup;
        t1.setFrom$1(body.get$sweep());
        body.advance$1(toi);
        toiContact.update$1(this._contactManager.contactListener);
        if (!toiContact.get$enabled()) {
          body.get$sweep().setFrom$1(t1);
          this.solveTimeOfImpactGivenBody$1(body);
        }
        t1 = toiContact.get$toiCount();
        if (t1 == null)
          throw t1.$add();
        toiContact.set$toiCount(t1 + 1);
        if (this.contacts.length < 32)
          this.contacts = $.List_List(32);
        ce = body.get$contactList();
        count = 0;
      case 4:
        var fixtureA, fixtureB, bodyA, t9, bodyB, i;
        L2:
          while (true)
            switch (state0) {
              case 0:
                if (!(ce != null && count < 32))
                  break L2;
              case 4:
                c$0: {
                  switch (state0) {
                    case 0:
                      other = ce.get$other();
                      type = other.get$type(other);
                    case 4:
                      state0 = 0;
                      if ($.$eq(type, 2))
                        break c$0;
                      contact = ce.get$contact();
                      if (!contact.get$enabled())
                        break c$0;
                      fixtureA = contact.get$fixtureA();
                      fixtureB = contact.get$fixtureB();
                      if (fixtureA.get$isSensor() === true || fixtureB.get$isSensor() === true)
                        break c$0;
                      if (!$.$eq(contact, toiContact))
                        contact.update$1(this._contactManager.contactListener);
                      if (!contact.get$enabled() || !contact.get$touching())
                        break c$0;
                      t1 = this.contacts;
                      if (count >= t1.length)
                        throw $.ioore(count);
                      t1[count] = contact;
                      ++count;
                  }
                }
                ce = ce.get$next();
            }
        t1 = this.toiSolver;
        t1.initialize$3(t1, this.contacts, count, body);
        for (i = 0; i < 20; ++i)
          if (t1.solve$1(0.75))
            break;
        if (!$.$eq(toiOther.get$type(toiOther), 0)) {
          t1 = toiContact.get$flags();
          if (t1 == null)
            throw t1.$or();
          toiContact.set$flags((t1 | 16) >>> 0);
        }
    }
  },
  drawShape$3: function(fixture, xf, color) {
    var t1, circle, radius, t2, t3, t4, t5, t6, t7, poly, vertexCount, vertices, i;
    t1 = $.getInterceptor$x(fixture);
    switch (t1.get$type(fixture)) {
      case 0:
        circle = t1.get$shape(fixture);
        t1 = this.center;
        $.Transform_mulToOut(xf, $.get$position$x(circle), t1);
        radius = circle.get$radius();
        t2 = xf.rotation.storage;
        t3 = t2.length;
        if (0 >= t3)
          throw $.ioore(0);
        t4 = t2[0];
        if (1 >= t3)
          throw $.ioore(1);
        t2 = t2[1];
        t3 = this.axis.storage;
        t5 = t3.length;
        if (0 >= t5)
          throw $.ioore(0);
        t3[0] = t4;
        if (1 >= t5)
          throw $.ioore(1);
        t3[1] = t2;
        t2 = this._debugDraw;
        t3 = t2.flags;
        t4 = t1.storage;
        t5 = $.getInterceptor$n(radius);
        t6 = t2.viewportTransform;
        t7 = t2.ctx;
        if (0 !== (t3 & 64)) {
          t2.drawCircle$4;
          radius = t5.$mul(radius, t6.scale);
          t2 = $.getInterceptor$x(t7);
          t2.setStrokeColorRgb$4(t7, color.x, color.y, color.z, 0.9);
          t2.setFillColorRgb$4(t7, color.x, color.y, color.z, 0.8);
          t6.getWorldToScreen$2(t1, t1);
          t2.beginPath$0(t7);
          t1 = t4.length;
          if (0 >= t1)
            throw $.ioore(0);
          t6 = t4[0];
          if (1 >= t1)
            throw $.ioore(1);
          t2.arc$6(t7, t6, t4[1], radius, 0, 6.283185307179586, true);
          t2.closePath$0(t7);
          t2.stroke$0(t7);
        } else {
          t2.drawSolidCircle$4;
          radius = t5.$mul(radius, t6.scale);
          t2 = $.getInterceptor$x(t7);
          t2.setStrokeColorRgb$4(t7, color.x, color.y, color.z, 0.9);
          t2.setFillColorRgb$4(t7, color.x, color.y, color.z, 0.8);
          t6.getWorldToScreen$2(t1, t1);
          t2.beginPath$0(t7);
          t1 = t4.length;
          if (0 >= t1)
            throw $.ioore(0);
          t6 = t4[0];
          if (1 >= t1)
            throw $.ioore(1);
          t2.arc$6(t7, t6, t4[1], radius, 0, 6.283185307179586, true);
          t2.closePath$0(t7);
          t2.fill$0(t7);
        }
        break;
      case 1:
        poly = t1.get$shape(fixture);
        vertexCount = poly.get$vertexCount();
        vertices = $.List_List$generate(vertexCount, new $.World_drawShape_closure(), true);
        for (i = 0; i < vertexCount; ++i) {
          t1 = poly.get$vertices();
          if (i >= t1.length)
            throw $.ioore(i);
          t1 = t1[i];
          if (i >= vertices.length)
            throw $.ioore(i);
          $.Transform_mulToOut(xf, t1, vertices[i]);
        }
        t1 = this._debugDraw;
        if (0 !== (t1.flags & 64)) {
          t1.drawPolygon$3;
          t1._pathPolygon$3(vertices, vertexCount, color);
          $.stroke$0$x(t1.ctx);
        } else {
          t2 = t1.ctx;
          if (vertexCount > 2) {
            t1.drawSolidPolygon$3;
            t1._pathPolygon$3(vertices, vertexCount, color);
            $.fill$0$x(t2);
          } else {
            t1.drawPolygon$3;
            t1._pathPolygon$3(vertices, vertexCount, color);
            $.stroke$0$x(t2);
          }
        }
        break;
      default:
    }
  },
  drawJoint$1: function(joint) {
    var bodyA, bodyB, xf1, xf2, x1, t1, t2, t3, x2, p1, p2, truncated, color, p1t, p2t;
    bodyA = joint.get$bodyA();
    bodyB = joint.get$bodyB();
    xf1 = bodyA.get$originTransform();
    xf2 = bodyB.get$originTransform();
    x1 = new $.Vector2(new Float32Array(2));
    t1 = x1.storage;
    t2 = xf1.position.storage;
    if (1 >= t2.length)
      throw $.ioore(1);
    t3 = t2[1];
    if (1 >= t1.length)
      throw $.ioore(1);
    t1[1] = t3;
    t1[0] = t2[0];
    x2 = new $.Vector2(new Float32Array(2));
    t2 = x2.storage;
    t1 = xf2.position.storage;
    if (1 >= t1.length)
      throw $.ioore(1);
    t3 = t1[1];
    if (1 >= t2.length)
      throw $.ioore(1);
    t2[1] = t3;
    t2[0] = t1[0];
    p1 = new $.Vector2(new Float32Array(2));
    p2 = new $.Vector2(new Float32Array(2));
    joint.getAnchorA$1(p1);
    joint.getAnchorB$1(p2);
    t1 = Math.floor(127.5);
    if (isNaN(t1))
      $.throwExpression(new $.UnsupportedError("NaN"));
    if (t1 == Infinity || t1 == -Infinity)
      $.throwExpression(new $.UnsupportedError("Infinity"));
    truncated = t1 < 0 ? Math.ceil(t1) : Math.floor(t1);
    t1 = truncated == -0.0 ? 0 : truncated;
    if (isNaN(t1))
      $.throwExpression(new $.UnsupportedError("NaN"));
    if (t1 == Infinity || t1 == -Infinity)
      $.throwExpression(new $.UnsupportedError("Infinity"));
    truncated = t1 < 0 ? Math.ceil(t1) : Math.floor(t1);
    t1 = truncated == -0.0 ? 0 : truncated;
    t2 = Math.floor(76.5);
    if (isNaN(t2))
      $.throwExpression(new $.UnsupportedError("NaN"));
    if (t2 == Infinity || t2 == -Infinity)
      $.throwExpression(new $.UnsupportedError("Infinity"));
    truncated = t2 < 0 ? Math.ceil(t2) : Math.floor(t2);
    t2 = truncated == -0.0 ? 0 : truncated;
    if (isNaN(t2))
      $.throwExpression(new $.UnsupportedError("NaN"));
    if (t2 == Infinity || t2 == -Infinity)
      $.throwExpression(new $.UnsupportedError("Infinity"));
    truncated = t2 < 0 ? Math.ceil(t2) : Math.floor(t2);
    t2 = truncated == -0.0 ? 0 : truncated;
    t3 = Math.floor(76.5);
    if (isNaN(t3))
      $.throwExpression(new $.UnsupportedError("NaN"));
    if (t3 == Infinity || t3 == -Infinity)
      $.throwExpression(new $.UnsupportedError("Infinity"));
    truncated = t3 < 0 ? Math.ceil(t3) : Math.floor(t3);
    t3 = truncated == -0.0 ? 0 : truncated;
    if (isNaN(t3))
      $.throwExpression(new $.UnsupportedError("NaN"));
    if (t3 == Infinity || t3 == -Infinity)
      $.throwExpression(new $.UnsupportedError("Infinity"));
    truncated = t3 < 0 ? Math.ceil(t3) : Math.floor(t3);
    t3 = truncated == -0.0 ? 0 : truncated;
    color = new $.Color3(t1, t2, t3);
    switch ($.get$type$x(joint)) {
      case 3:
        this._debugDraw.drawSegment$3(p1, p2, color);
        break;
      case 4:
        throw $.wrapException(new $.UnimplementedError(null));
      case 9:
        this._debugDraw.drawSegment$3(x1, x2, color);
        break;
      case 10:
      case 5:
        break;
      default:
        p1t = new $.Vector2(new Float32Array(2));
        t1 = p1t.storage;
        t2 = p1.storage;
        if (1 >= t2.length)
          throw $.ioore(1);
        t3 = t2[1];
        if (1 >= t1.length)
          throw $.ioore(1);
        t1[1] = t3;
        t1[0] = t2[0];
        p2t = new $.Vector2(new Float32Array(2));
        t2 = p2t.storage;
        t1 = p2.storage;
        if (1 >= t1.length)
          throw $.ioore(1);
        t3 = t1[1];
        if (1 >= t2.length)
          throw $.ioore(1);
        t2[1] = t3;
        t2[0] = t1[0];
        this._debugDraw.drawSegment$3(x1, p1, color);
        this._debugDraw.drawSegment$3(p1t, p2, color);
        this._debugDraw.drawSegment$3(x2, p2t, color);
        break;
    }
  },
  World$3: function(gravity, doSleep, argPool) {
    var t1, t2, i;
    this._contactManager = $.ContactManager$(this);
    for (t1 = this._contactStacks, t2 = t1.length, i = 0; i < t2; ++i)
      t1[i] = $.List_List(2);
    this._initializeRegisters$0();
  },
  static: {
"": "World_WORLD_POOL_SIZE,World_WORLD_POOL_CONTAINER_SIZE,World_NEW_FIXTURE,World_LOCKED,World_CLEAR_FORCES",
World$: function(gravity, doSleep, argPool) {
  var t1 = new $.World(4, null, null, null, 0, 0, gravity, doSleep, null, null, null, argPool, 0, true, true, $.List_List(2), new $.Vector2(new Float32Array(2)), new $.Vector2(new Float32Array(2)), $.TimeStep$(), new $.Vector2(new Float32Array(2)), new $.Vector2(new Float32Array(2)), new $.WorldQueryWrapper(null, null), $.TimeOfImpactInput$(), new $.TimeOfImpactOutput(0, 0), $.Sweep$(), $.TimeOfImpactSolver$(), $.List_List(32), $.Island$(), $.List_List(10));
  t1.World$3(gravity, doSleep, argPool);
  return t1;
}}

},

World_drawShape_closure: {"": "Closure;",
  call$1: function(i) {
    return new $.Vector2(new Float32Array(2));
  }
},

WorldQueryWrapper: {"": "Object;broadPhase,callback",
  treeCallback$1: function(node) {
    return this.callback.reportFixture$1(node.get$userData());
  }
},

DefaultWorldPool: {"": "Object;collision,timeOfImpact,distance@",
  getCircleContactStack$0: function() {
    var queue, i;
    queue = $.ListQueue$(null);
    for (i = 0; i < 10; ++i)
      queue.addFirst$1(new $.CircleContact(null, null, null, new $.ContactEdge(null, null, null, null), new $.ContactEdge(null, null, null, null), null, null, $.Manifold$(), null, this, $.Manifold$()));
    return queue;
  },
  getPolyCircleContactStack$0: function() {
    var queue, i;
    queue = $.ListQueue$(null);
    for (i = 0; i < 10; ++i)
      queue.addFirst$1(new $.PolygonAndCircleContact(null, null, null, new $.ContactEdge(null, null, null, null), new $.ContactEdge(null, null, null, null), null, null, $.Manifold$(), null, this, $.Manifold$()));
    return queue;
  },
  getPolyContactStack$0: function() {
    var queue, i;
    queue = $.ListQueue$(null);
    for (i = 0; i < 10; ++i)
      queue.addFirst$1(new $.PolygonContact(null, null, null, new $.ContactEdge(null, null, null, null), new $.ContactEdge(null, null, null, null), null, null, $.Manifold$(), null, this, $.Manifold$()));
    return queue;
  },
  DefaultWorldPool$0: function() {
    this.distance = $.Distance$_construct();
    this.collision = $.Collision$_construct(this);
    this.timeOfImpact = $.TimeOfImpact$_construct(this);
  },
  static: {
DefaultWorldPool$: function() {
  var t1 = new $.DefaultWorldPool(null, null, null);
  t1.DefaultWorldPool$0();
  return t1;
}}

}}],
["box2d_browser", "package:box2d/box2d_browser.dart", , {
CanvasDraw: {"": "DebugDraw;ctx,flags,viewportTransform",
  _pathPolygon$3: function(vertices, vertexCount, color) {
    var t1, i, t2, t3;
    this.set$_color(color);
    for (t1 = this.viewportTransform, i = 0; i < vertexCount; ++i) {
      if (i >= vertices.length)
        throw $.ioore(i);
      t2 = vertices[i];
      t1.getWorldToScreen$2(t2, t2);
    }
    t1 = this.ctx;
    t2 = $.getInterceptor$x(t1);
    t2.beginPath$0(t1);
    if (0 >= vertices.length)
      throw $.ioore(0);
    t3 = $.get$x$x(vertices[0]);
    if (0 >= vertices.length)
      throw $.ioore(0);
    t2.moveTo$2(t1, t3, $.get$y$x(vertices[0]));
    for (i = 1; t3 = vertices.length, i < vertexCount; ++i) {
      if (i >= t3)
        throw $.ioore(i);
      t3 = $.get$x$x(vertices[i]);
      if (i >= vertices.length)
        throw $.ioore(i);
      t2.lineTo$2(t1, t3, $.get$y$x(vertices[i]));
    }
    if (0 >= t3)
      throw $.ioore(0);
    t3 = $.get$x$x(vertices[0]);
    if (0 >= vertices.length)
      throw $.ioore(0);
    t2.lineTo$2(t1, t3, $.get$y$x(vertices[0]));
    t2.closePath$0(t1);
  },
  drawSegment$3: function(p1, p2, color) {
    var t1, t2, t3, t4, t5;
    t1 = this.ctx;
    t2 = $.getInterceptor$x(t1);
    t2.setStrokeColorRgb$4(t1, color.x, color.y, color.z, 0.9);
    t2.setFillColorRgb$4(t1, color.x, color.y, color.z, 0.8);
    t3 = this.viewportTransform;
    t3.getWorldToScreen$2(p1, p1);
    t3.getWorldToScreen$2(p2, p2);
    t2.beginPath$0(t1);
    t3 = p1.storage;
    t4 = t3.length;
    if (0 >= t4)
      throw $.ioore(0);
    t5 = t3[0];
    if (1 >= t4)
      throw $.ioore(1);
    t2.moveTo$2(t1, t5, t3[1]);
    t3 = p2.storage;
    t5 = t3.length;
    if (0 >= t5)
      throw $.ioore(0);
    t4 = t3[0];
    if (1 >= t5)
      throw $.ioore(1);
    t2.lineTo$2(t1, t4, t3[1]);
    t2.closePath$0(t1);
    t2.stroke$0(t1);
  },
  set$_color: function(color) {
    var t1, t2;
    t1 = this.ctx;
    t2 = $.getInterceptor$x(t1);
    t2.setStrokeColorRgb$4(t1, color.x, color.y, color.z, 0.9);
    t2.setFillColorRgb$4(t1, color.x, color.y, color.z, 0.8);
  },
  CanvasDraw$2: function(viewport, ctx) {
  },
  static: {
CanvasDraw$: function(viewport, ctx) {
  var t1 = new $.CanvasDraw(ctx, 1, viewport);
  t1.CanvasDraw$2(viewport, ctx);
  return t1;
}}

},

CanvasViewportTransform: {"": "ViewportTransform;yFlip,extents,scale,center", static: {
"": "CanvasViewportTransform_DEFAULT_DRAWING_SCALE",
}
}}],
["dart._collection.dev", "dart:_collection-dev", , {
Arrays_copy: function(src, srcStart, dst, dstStart, count) {
  var i, j, t1, t2, t3, t4;
  if (typeof dst !== "object" || dst === null || (dst.constructor !== Array || !!dst.immutable$list) && !$.isJsIndexable(dst, dst[$.dispatchPropertyName]))
    return $.Arrays_copy$bailout(1, src, srcStart, dst, dstStart, count);
  if (srcStart < dstStart)
    for (i = srcStart + count - 1, j = dstStart + count - 1, t1 = $.getInterceptor$asx(src), t2 = dst.length; i >= srcStart; --i, --j) {
      t3 = t1.$index(src, i);
      if (j < 0 || j >= t2)
        throw $.ioore(j);
      dst[j] = t3;
    }
  else
    for (t1 = srcStart + count, t2 = $.getInterceptor$asx(src), t3 = dst.length, j = dstStart, i = srcStart; i < t1; ++i, ++j) {
      t4 = t2.$index(src, i);
      if (j < 0 || j >= t3)
        throw $.ioore(j);
      dst[j] = t4;
    }
},

Arrays_copy$bailout: function(state0, src, srcStart, dst, dstStart, count) {
  var i, j, t1, t2;
  if (srcStart < dstStart)
    for (i = srcStart + count - 1, j = dstStart + count - 1, t1 = $.getInterceptor$asx(src); i >= srcStart; --i, --j)
      C.JSArray_methods.$indexSet(dst, j, t1.$index(src, i));
  else
    for (t1 = srcStart + count, t2 = $.getInterceptor$asx(src), j = dstStart, i = srcStart; i < t1; ++i, ++j)
      C.JSArray_methods.$indexSet(dst, j, t2.$index(src, i));
},

IterableMixinWorkaround_forEach: function(iterable, f) {
  var t1;
  for (t1 = new $.ListIterator(iterable, iterable.length, 0, null); t1.moveNext$0();)
    f.call$1(t1._liblib$_current);
},

IterableMixinWorkaround_toStringIterable: function(iterable, leftDelimiter, rightDelimiter) {
  var result, i, t1;
  for (i = 0; i < $.get$IterableMixinWorkaround__toStringList().length; ++i) {
    t1 = $.get$IterableMixinWorkaround__toStringList();
    if (i >= t1.length)
      throw $.ioore(i);
    if (t1[i] === iterable)
      return $.S(leftDelimiter) + "..." + $.S(rightDelimiter);
  }
  result = $.StringBuffer$("");
  try {
    $.get$IterableMixinWorkaround__toStringList().push(iterable);
    result.write$1(leftDelimiter);
    result.writeAll$2(iterable, ", ");
    result.write$1(rightDelimiter);
  } finally {
    t1 = $.get$IterableMixinWorkaround__toStringList();
    if (0 >= t1.length)
      throw $.ioore(0);
    t1.pop();
  }
  return result.get$_contents();
},

IterableMixinWorkaround_sortList: function(list, compare) {
  $.Sort__doSort(list, 0, list.length - 1, compare);
},

IterableMixinWorkaround__rangeCheck: function(list, start, end) {
  var t1;
  if (start < 0 || start > list.length) {
    t1 = list.length;
    throw $.wrapException(new $.RangeError("value " + start + " not in range 0.." + t1));
  }
  if (end < start || end > list.length) {
    t1 = list.length;
    throw $.wrapException(new $.RangeError("value " + end + " not in range " + start + ".." + t1));
  }
},

IterableMixinWorkaround_setRangeList: function(list, start, end, from, skipCount) {
  var $length, otherStart, otherList, t1;
  $.IterableMixinWorkaround__rangeCheck(list, start, end);
  $length = end - start;
  if ($length === 0)
    return;
  if (skipCount < 0)
    throw $.wrapException(new $.ArgumentError(skipCount));
  if (typeof from === "object" && from !== null && (from.constructor === Array || !!$.getInterceptor(from).$isList)) {
    otherStart = skipCount;
    otherList = from;
  } else {
    t1 = $.skip$1$ax(from, skipCount);
    otherList = t1.toList$1$growable(t1, false);
    otherStart = 0;
  }
  t1 = $.get$length$asx(otherList);
  if (typeof t1 !== "number")
    throw $.iae(t1);
  if (otherStart + $length > t1)
    throw $.wrapException(new $.StateError("Not enough elements"));
  $.Arrays_copy(otherList, otherStart, list, start, $length);
},

Sort__doSort: function(a, left, right, compare) {
  if ($.$le$n($.$sub$n(right, left), 32))
    $.Sort_insertionSort_(a, left, right, compare);
  else
    $.Sort__dualPivotQuicksort(a, left, right, compare);
},

Sort_insertionSort_: function(a, left, right, compare) {
  var i, el, j, t1, t2, j0;
  if (typeof a !== "object" || a === null || (a.constructor !== Array || !!a.immutable$list) && !$.isJsIndexable(a, a[$.dispatchPropertyName]))
    return $.Sort_insertionSort_$bailout(1, a, left, right, compare);
  if (typeof left !== "number")
    return $.Sort_insertionSort_$bailout(1, a, left, right, compare);
  if (typeof right !== "number")
    return $.Sort_insertionSort_$bailout(1, a, left, right, compare);
  for (i = left + 1; i <= right; ++i) {
    if (i >>> 0 !== i || i >= a.length)
      throw $.ioore(i);
    el = a[i];
    j = i;
    while (true) {
      if (j > left) {
        t1 = j - 1;
        if (t1 < 0 || t1 >= a.length)
          throw $.ioore(t1);
        t1 = $.$gt$n(compare.call$2(a[t1], el), 0);
      } else
        t1 = false;
      t2 = a.length;
      if (!t1)
        break;
      j0 = j - 1;
      if (j0 < 0 || j0 >= t2)
        throw $.ioore(j0);
      t1 = a[j0];
      if (j < 0 || j >= t2)
        throw $.ioore(j);
      a[j] = t1;
      j = j0;
    }
    if (j < 0 || j >= t2)
      throw $.ioore(j);
    a[j] = el;
  }
},

Sort_insertionSort_$bailout: function(state0, a, left, right, compare) {
  var i, t1, t2, el, j, t3;
  for (i = $.$add$ns(left, 1), t1 = $.getInterceptor$asx(a); t2 = $.getInterceptor$n(i), t2.$le(i, right); i = t2.$add(i, 1)) {
    el = t1.$index(a, i);
    j = i;
    while (true) {
      t3 = $.getInterceptor$n(j);
      if (!(t3.$gt(j, left) && $.$gt$n(compare.call$2(t1.$index(a, t3.$sub(j, 1)), el), 0)))
        break;
      t1.$indexSet(a, j, t1.$index(a, t3.$sub(j, 1)));
      j = t3.$sub(j, 1);
    }
    t1.$indexSet(a, j, el);
  }
},

Sort__dualPivotQuicksort: function(a, left, right, compare) {
  var t1, sixth, t2, index1, index5, index3, index2, index4, el1, el2, el3, el4, el5, t0, less, great, pivots_are_equal, k, ak, comp, great0, less0, t3;
  if (typeof a !== "object" || a === null || (a.constructor !== Array || !!a.immutable$list) && !$.isJsIndexable(a, a[$.dispatchPropertyName]))
    return $.Sort__dualPivotQuicksort$bailout(1, a, left, right, compare);
  t1 = $.getInterceptor$n(right);
  sixth = $.$tdiv$n($.$add$ns(t1.$sub(right, left), 1), 6);
  t2 = $.getInterceptor$ns(left);
  index1 = t2.$add(left, sixth);
  index5 = t1.$sub(right, sixth);
  index3 = $.$tdiv$n(t2.$add(left, right), 2);
  t2 = $.getInterceptor$n(index3);
  index2 = t2.$sub(index3, sixth);
  index4 = t2.$add(index3, sixth);
  t2 = a.length;
  if (index1 >>> 0 !== index1 || index1 >= t2)
    throw $.ioore(index1);
  el1 = a[index1];
  if (index2 >>> 0 !== index2 || index2 >= t2)
    throw $.ioore(index2);
  el2 = a[index2];
  if (index3 >>> 0 !== index3 || index3 >= t2)
    throw $.ioore(index3);
  el3 = a[index3];
  if (index4 >>> 0 !== index4 || index4 >= t2)
    throw $.ioore(index4);
  el4 = a[index4];
  if (index5 >>> 0 !== index5 || index5 >= t2)
    throw $.ioore(index5);
  el5 = a[index5];
  if ($.$gt$n(compare.call$2(el1, el2), 0)) {
    t0 = el2;
    el2 = el1;
    el1 = t0;
  }
  if ($.$gt$n(compare.call$2(el4, el5), 0)) {
    t0 = el5;
    el5 = el4;
    el4 = t0;
  }
  if ($.$gt$n(compare.call$2(el1, el3), 0)) {
    t0 = el3;
    el3 = el1;
    el1 = t0;
  }
  if ($.$gt$n(compare.call$2(el2, el3), 0)) {
    t0 = el3;
    el3 = el2;
    el2 = t0;
  }
  if ($.$gt$n(compare.call$2(el1, el4), 0)) {
    t0 = el4;
    el4 = el1;
    el1 = t0;
  }
  if ($.$gt$n(compare.call$2(el3, el4), 0)) {
    t0 = el4;
    el4 = el3;
    el3 = t0;
  }
  if ($.$gt$n(compare.call$2(el2, el5), 0)) {
    t0 = el5;
    el5 = el2;
    el2 = t0;
  }
  if ($.$gt$n(compare.call$2(el2, el3), 0)) {
    t0 = el3;
    el3 = el2;
    el2 = t0;
  }
  if ($.$gt$n(compare.call$2(el4, el5), 0)) {
    t0 = el5;
    el5 = el4;
    el4 = t0;
  }
  t1 = a.length;
  if (index1 >= t1)
    throw $.ioore(index1);
  a[index1] = el1;
  if (index3 >= t1)
    throw $.ioore(index3);
  a[index3] = el3;
  if (index5 >= t1)
    throw $.ioore(index5);
  a[index5] = el5;
  if (left >>> 0 !== left || left >= t1)
    throw $.ioore(left);
  t2 = a[left];
  if (index2 >= t1)
    throw $.ioore(index2);
  a[index2] = t2;
  if (right >>> 0 !== right || right >= t1)
    throw $.ioore(right);
  t2 = a[right];
  if (index4 >= t1)
    throw $.ioore(index4);
  a[index4] = t2;
  less = left + 1;
  great = right - 1;
  pivots_are_equal = $.$eq(compare.call$2(el2, el4), 0);
  if (pivots_are_equal)
    for (k = less; k <= great; ++k) {
      if (k >>> 0 !== k || k >= a.length)
        throw $.ioore(k);
      ak = a[k];
      comp = compare.call$2(ak, el2);
      t1 = $.getInterceptor(comp);
      if (t1.$eq(comp, 0))
        continue;
      if (t1.$lt(comp, 0)) {
        if (k !== less) {
          t1 = a.length;
          if (less >>> 0 !== less || less >= t1)
            throw $.ioore(less);
          t2 = a[less];
          if (k >= t1)
            throw $.ioore(k);
          a[k] = t2;
          a[less] = ak;
        }
        ++less;
      } else
        for (; true;) {
          if (great >>> 0 !== great || great >= a.length)
            throw $.ioore(great);
          comp = compare.call$2(a[great], el2);
          t1 = $.getInterceptor$n(comp);
          if (t1.$gt(comp, 0)) {
            --great;
            continue;
          } else {
            t1 = t1.$lt(comp, 0);
            t2 = a.length;
            great0 = great - 1;
            if (t1) {
              if (less >>> 0 !== less || less >= t2)
                throw $.ioore(less);
              t1 = a[less];
              if (k >= t2)
                throw $.ioore(k);
              a[k] = t1;
              less0 = less + 1;
              if (great >= t2)
                throw $.ioore(great);
              a[less] = a[great];
              a[great] = ak;
              great = great0;
              less = less0;
              break;
            } else {
              if (great >= t2)
                throw $.ioore(great);
              t1 = a[great];
              if (k >= t2)
                throw $.ioore(k);
              a[k] = t1;
              a[great] = ak;
              great = great0;
              break;
            }
          }
        }
    }
  else
    for (k = less; k <= great; ++k) {
      if (k >>> 0 !== k || k >= a.length)
        throw $.ioore(k);
      ak = a[k];
      if ($.$lt$n(compare.call$2(ak, el2), 0)) {
        if (k !== less) {
          t1 = a.length;
          if (less >>> 0 !== less || less >= t1)
            throw $.ioore(less);
          t2 = a[less];
          if (k >= t1)
            throw $.ioore(k);
          a[k] = t2;
          a[less] = ak;
        }
        ++less;
      } else if ($.$gt$n(compare.call$2(ak, el4), 0))
        for (; true;) {
          if (great >>> 0 !== great || great >= a.length)
            throw $.ioore(great);
          if ($.$gt$n(compare.call$2(a[great], el4), 0)) {
            --great;
            if (great < k)
              break;
            continue;
          } else {
            if (great >= a.length)
              throw $.ioore(great);
            t1 = $.$lt$n(compare.call$2(a[great], el2), 0);
            great0 = great - 1;
            t2 = a.length;
            if (t1) {
              if (less >>> 0 !== less || less >= t2)
                throw $.ioore(less);
              t1 = a[less];
              if (k >= t2)
                throw $.ioore(k);
              a[k] = t1;
              less0 = less + 1;
              if (great >= t2)
                throw $.ioore(great);
              a[less] = a[great];
              a[great] = ak;
              great = great0;
              less = less0;
            } else {
              if (great >= t2)
                throw $.ioore(great);
              t1 = a[great];
              if (k >= t2)
                throw $.ioore(k);
              a[k] = t1;
              a[great] = ak;
              great = great0;
            }
            break;
          }
        }
    }
  t1 = less - 1;
  t2 = a.length;
  if (t1 >>> 0 !== t1 || t1 >= t2)
    throw $.ioore(t1);
  t3 = a[t1];
  if (left >= t2)
    throw $.ioore(left);
  a[left] = t3;
  a[t1] = el2;
  t1 = great + 1;
  if (t1 >>> 0 !== t1 || t1 >= t2)
    throw $.ioore(t1);
  t3 = a[t1];
  if (right >= t2)
    throw $.ioore(right);
  a[right] = t3;
  a[t1] = el4;
  $.Sort__doSort(a, left, less - 2, compare);
  $.Sort__doSort(a, great + 2, right, compare);
  if (pivots_are_equal)
    return;
  if (less < index1 && great > index5) {
    while (true) {
      if (less >>> 0 !== less || less >= a.length)
        throw $.ioore(less);
      if (!$.$eq(compare.call$2(a[less], el2), 0))
        break;
      ++less;
    }
    while (true) {
      if (great >>> 0 !== great || great >= a.length)
        throw $.ioore(great);
      if (!$.$eq(compare.call$2(a[great], el4), 0))
        break;
      --great;
    }
    for (k = less; k <= great; ++k) {
      if (k >= a.length)
        throw $.ioore(k);
      ak = a[k];
      if ($.$eq(compare.call$2(ak, el2), 0)) {
        if (k !== less) {
          t1 = a.length;
          if (less >= t1)
            throw $.ioore(less);
          t2 = a[less];
          if (k >= t1)
            throw $.ioore(k);
          a[k] = t2;
          a[less] = ak;
        }
        ++less;
      } else if ($.$eq(compare.call$2(ak, el4), 0))
        for (; true;) {
          if (great < 0 || great >= a.length)
            throw $.ioore(great);
          if ($.$eq(compare.call$2(a[great], el4), 0)) {
            --great;
            if (great < k)
              break;
            continue;
          } else {
            if (great >= a.length)
              throw $.ioore(great);
            t1 = $.$lt$n(compare.call$2(a[great], el2), 0);
            great0 = great - 1;
            t2 = a.length;
            if (t1) {
              if (less >= t2)
                throw $.ioore(less);
              t1 = a[less];
              if (k >= t2)
                throw $.ioore(k);
              a[k] = t1;
              less0 = less + 1;
              if (great >= t2)
                throw $.ioore(great);
              a[less] = a[great];
              a[great] = ak;
              great = great0;
              less = less0;
            } else {
              if (great >= t2)
                throw $.ioore(great);
              t1 = a[great];
              if (k >= t2)
                throw $.ioore(k);
              a[k] = t1;
              a[great] = ak;
              great = great0;
            }
            break;
          }
        }
    }
    $.Sort__doSort(a, less, great, compare);
  } else
    $.Sort__doSort(a, less, great, compare);
},

Sort__dualPivotQuicksort$bailout: function(state0, a, left, right, compare, index5, index1, t1, el2, t3, el4, less, great) {
  switch (state0) {
    case 0:
    case 1:
      state0 = 0;
      t1 = $.getInterceptor$n(right);
      sixth = $.$tdiv$n($.$add$ns(t1.$sub(right, left), 1), 6);
      t2 = $.getInterceptor$ns(left);
      index1 = t2.$add(left, sixth);
      index5 = t1.$sub(right, sixth);
      index3 = $.$tdiv$n(t2.$add(left, right), 2);
      t3 = $.getInterceptor$n(index3);
      index2 = t3.$sub(index3, sixth);
      index4 = t3.$add(index3, sixth);
      t3 = $.getInterceptor$asx(a);
      el1 = t3.$index(a, index1);
      el2 = t3.$index(a, index2);
      el3 = t3.$index(a, index3);
      el4 = t3.$index(a, index4);
      el5 = t3.$index(a, index5);
      if ($.$gt$n(compare.call$2(el1, el2), 0)) {
        t0 = el2;
        el2 = el1;
        el1 = t0;
      }
      if ($.$gt$n(compare.call$2(el4, el5), 0)) {
        t0 = el5;
        el5 = el4;
        el4 = t0;
      }
      if ($.$gt$n(compare.call$2(el1, el3), 0)) {
        t0 = el3;
        el3 = el1;
        el1 = t0;
      }
      if ($.$gt$n(compare.call$2(el2, el3), 0)) {
        t0 = el3;
        el3 = el2;
        el2 = t0;
      }
      if ($.$gt$n(compare.call$2(el1, el4), 0)) {
        t0 = el4;
        el4 = el1;
        el1 = t0;
      }
      if ($.$gt$n(compare.call$2(el3, el4), 0)) {
        t0 = el4;
        el4 = el3;
        el3 = t0;
      }
      if ($.$gt$n(compare.call$2(el2, el5), 0)) {
        t0 = el5;
        el5 = el2;
        el2 = t0;
      }
      if ($.$gt$n(compare.call$2(el2, el3), 0)) {
        t0 = el3;
        el3 = el2;
        el2 = t0;
      }
      if ($.$gt$n(compare.call$2(el4, el5), 0)) {
        t0 = el5;
        el5 = el4;
        el4 = t0;
      }
      t3.$indexSet(a, index1, el1);
      t3.$indexSet(a, index3, el3);
      t3.$indexSet(a, index5, el5);
      t3.$indexSet(a, index2, t3.$index(a, left));
      t3.$indexSet(a, index4, t3.$index(a, right));
      less = t2.$add(left, 1);
    case 2:
      state0 = 0;
      great = t1.$sub(right, 1);
    case 3:
      var sixth, t2, index3, index2, index4, el1, el3, el5, t0, pivots_are_equal, k, ak, comp, t4, less0, great0;
      state0 = 0;
      pivots_are_equal = $.$eq(compare.call$2(el2, el4), 0);
      if (pivots_are_equal)
        for (k = less; t1 = $.getInterceptor$n(k), t1.$le(k, great); k = t1.$add(k, 1)) {
          ak = t3.$index(a, k);
          comp = compare.call$2(ak, el2);
          t2 = $.getInterceptor(comp);
          if (t2.$eq(comp, 0))
            continue;
          if (t2.$lt(comp, 0)) {
            if (!t1.$eq(k, less)) {
              t3.$indexSet(a, k, t3.$index(a, less));
              t3.$indexSet(a, less, ak);
            }
            less = $.$add$ns(less, 1);
          } else
            for (; true;) {
              comp = compare.call$2(t3.$index(a, great), el2);
              t2 = $.getInterceptor$n(comp);
              if (t2.$gt(comp, 0)) {
                great = $.$sub$n(great, 1);
                continue;
              } else {
                t4 = $.getInterceptor$n(great);
                if (t2.$lt(comp, 0)) {
                  t3.$indexSet(a, k, t3.$index(a, less));
                  less0 = $.$add$ns(less, 1);
                  t3.$indexSet(a, less, t3.$index(a, great));
                  great0 = t4.$sub(great, 1);
                  t3.$indexSet(a, great, ak);
                  great = great0;
                  less = less0;
                  break;
                } else {
                  t3.$indexSet(a, k, t3.$index(a, great));
                  great0 = t4.$sub(great, 1);
                  t3.$indexSet(a, great, ak);
                  great = great0;
                  break;
                }
              }
            }
        }
      else
        for (k = less; t1 = $.getInterceptor$n(k), t1.$le(k, great); k = t1.$add(k, 1)) {
          ak = t3.$index(a, k);
          if ($.$lt$n(compare.call$2(ak, el2), 0)) {
            if (!t1.$eq(k, less)) {
              t3.$indexSet(a, k, t3.$index(a, less));
              t3.$indexSet(a, less, ak);
            }
            less = $.$add$ns(less, 1);
          } else if ($.$gt$n(compare.call$2(ak, el4), 0))
            for (; true;)
              if ($.$gt$n(compare.call$2(t3.$index(a, great), el4), 0)) {
                great = $.$sub$n(great, 1);
                if ($.$lt$n(great, k))
                  break;
                continue;
              } else {
                t2 = $.getInterceptor$n(great);
                if ($.$lt$n(compare.call$2(t3.$index(a, great), el2), 0)) {
                  t3.$indexSet(a, k, t3.$index(a, less));
                  less0 = $.$add$ns(less, 1);
                  t3.$indexSet(a, less, t3.$index(a, great));
                  great0 = t2.$sub(great, 1);
                  t3.$indexSet(a, great, ak);
                  great = great0;
                  less = less0;
                } else {
                  t3.$indexSet(a, k, t3.$index(a, great));
                  great0 = t2.$sub(great, 1);
                  t3.$indexSet(a, great, ak);
                  great = great0;
                }
                break;
              }
        }
      t1 = $.getInterceptor$n(less);
      t3.$indexSet(a, left, t3.$index(a, t1.$sub(less, 1)));
      t3.$indexSet(a, t1.$sub(less, 1), el2);
      t2 = $.getInterceptor$ns(great);
      t3.$indexSet(a, right, t3.$index(a, t2.$add(great, 1)));
      t3.$indexSet(a, t2.$add(great, 1), el4);
      $.Sort__doSort(a, left, t1.$sub(less, 2), compare);
      $.Sort__doSort(a, t2.$add(great, 2), right, compare);
      if (pivots_are_equal)
        return;
      if (t1.$lt(less, index1) && t2.$gt(great, index5)) {
        for (; $.$eq(compare.call$2(t3.$index(a, less), el2), 0);)
          less = $.$add$ns(less, 1);
        for (; $.$eq(compare.call$2(t3.$index(a, great), el4), 0);)
          great = $.$sub$n(great, 1);
        for (k = less; t1 = $.getInterceptor$n(k), t1.$le(k, great); k = t1.$add(k, 1)) {
          ak = t3.$index(a, k);
          if ($.$eq(compare.call$2(ak, el2), 0)) {
            if (!t1.$eq(k, less)) {
              t3.$indexSet(a, k, t3.$index(a, less));
              t3.$indexSet(a, less, ak);
            }
            less = $.$add$ns(less, 1);
          } else if ($.$eq(compare.call$2(ak, el4), 0))
            for (; true;)
              if ($.$eq(compare.call$2(t3.$index(a, great), el4), 0)) {
                great = $.$sub$n(great, 1);
                if ($.$lt$n(great, k))
                  break;
                continue;
              } else {
                t2 = $.getInterceptor$n(great);
                if ($.$lt$n(compare.call$2(t3.$index(a, great), el2), 0)) {
                  t3.$indexSet(a, k, t3.$index(a, less));
                  less0 = $.$add$ns(less, 1);
                  t3.$indexSet(a, less, t3.$index(a, great));
                  great0 = t2.$sub(great, 1);
                  t3.$indexSet(a, great, ak);
                  great = great0;
                  less = less0;
                } else {
                  t3.$indexSet(a, k, t3.$index(a, great));
                  great0 = t2.$sub(great, 1);
                  t3.$indexSet(a, great, ak);
                  great = great0;
                }
                break;
              }
        }
        $.Sort__doSort(a, less, great, compare);
      } else
        $.Sort__doSort(a, less, great, compare);
  }
},

ListIterable: {"": "IterableBase;",
  get$iterator: function(_) {
    return new $.ListIterator(this, this.get$length(this), 0, null);
  },
  forEach$1: function(_, action) {
    var $length, i;
    $length = this.get$length(this);
    if (typeof $length !== "number")
      throw $.iae($length);
    i = 0;
    for (; i < $length; ++i) {
      action.call$1(this.elementAt$1(this, i));
      if ($length !== this.get$length(this))
        throw $.wrapException(new $.ConcurrentModificationError(this));
    }
  },
  get$isEmpty: function(_) {
    var t1 = this.get$length(this);
    if (typeof t1 !== "number")
      return this.get$isEmpty$bailout1(1, t1);
    return t1 === 0;
  },
  get$isEmpty$bailout1: function(state0, t1) {
    return $.$eq(t1, 0);
  },
  skip$1: function(_, count) {
    return $.SubListIterable$(this, count, null);
  },
  toList$1$growable: function(_, growable) {
    var result, i, t1;
    if (growable) {
      result = $.List_List(null);
      C.JSArray_methods.set$length(result, this.get$length(this));
    } else
      result = $.List_List(this.get$length(this));
    i = 0;
    while (true) {
      t1 = this.get$length(this);
      if (typeof t1 !== "number")
        throw $.iae(t1);
      if (!(i < t1))
        break;
      t1 = this.elementAt$1(this, i);
      if (i >= result.length)
        throw $.ioore(i);
      result[i] = t1;
      ++i;
    }
    return result;
  }
},

SubListIterable: {"": "ListIterable;_iterable,_start,_endOrLength",
  get$_endIndex: function() {
    var $length, t1;
    $length = $.get$length$asx(this._iterable);
    t1 = this._endOrLength;
    if (t1 == null || $.$gt$n(t1, $length))
      return $length;
    return t1;
  },
  get$_startIndex: function() {
    var $length, t1;
    $length = $.get$length$asx(this._iterable);
    t1 = this._start;
    if ($.$gt$n(t1, $length))
      return $length;
    return t1;
  },
  get$length: function(_) {
    var $length, t1, t2;
    $length = $.get$length$asx(this._iterable);
    if (typeof $length !== "number")
      return this.get$length$bailout2(1, $length);
    t1 = this._start;
    if (typeof t1 !== "number")
      return this.get$length$bailout2(2, $length, t1);
    if (t1 >= $length)
      return 0;
    t2 = this._endOrLength;
    if (typeof t2 !== "number")
      return this.get$length$bailout2(3, $length, t1, t2);
    if (t2 >= $length)
      return $length - t1;
    return t2 - t1;
  },
  get$length$bailout2: function(state0, $length, t1, t2) {
    switch (state0) {
      case 0:
        $length = $.get$length$asx(this._iterable);
      case 1:
        state0 = 0;
        t1 = this._start;
      case 2:
        state0 = 0;
        if ($.$ge$n(t1, $length))
          return 0;
        t2 = this._endOrLength;
      case 3:
        state0 = 0;
        if (t2 == null || $.$ge$n(t2, $length))
          return $.$sub$n($length, t1);
        return $.$sub$n(t2, t1);
    }
  },
  elementAt$1: function(_, index) {
    var t1, realIndex;
    if (typeof index !== "number")
      return this.elementAt$1$bailout2(1, index);
    t1 = this.get$_startIndex();
    if (typeof t1 !== "number")
      return this.elementAt$1$bailout2(2, index, t1);
    realIndex = t1 + index;
    if (!(index < 0)) {
      t1 = this.get$_endIndex();
      if (typeof t1 !== "number")
        throw $.iae(t1);
      t1 = realIndex >= t1;
    } else
      t1 = true;
    if (t1) {
      t1 = this.get$length(this);
      throw $.wrapException(new $.RangeError("value " + $.S(index) + " not in range 0.." + $.S(t1)));
    }
    return $.elementAt$1$ax(this._iterable, realIndex);
  },
  elementAt$1$bailout2: function(state0, index, t1) {
    switch (state0) {
      case 0:
      case 1:
        state0 = 0;
        t1 = this.get$_startIndex();
      case 2:
        var realIndex;
        state0 = 0;
        realIndex = $.$add$ns(t1, index);
        if (!$.$lt$n(index, 0)) {
          t1 = this.get$_endIndex();
          if (typeof t1 !== "number")
            throw $.iae(t1);
          t1 = $.$ge$n(realIndex, t1);
        } else
          t1 = true;
        if (t1) {
          t1 = this.get$length(this);
          throw $.wrapException(new $.RangeError("value " + $.S(index) + " not in range 0.." + $.S(t1)));
        }
        return $.elementAt$1$ax(this._iterable, realIndex);
    }
  },
  skip$1: function(_, count) {
    if (count < 0)
      throw $.wrapException(new $.RangeError("value " + count));
    return $.SubListIterable$(this._iterable, $.$add$ns(this._start, count), this._endOrLength);
  },
  SubListIterable$3: function(_iterable, _start, _endOrLength) {
    var t1, t2, t3;
    t1 = this._start;
    t2 = $.getInterceptor$n(t1);
    if (t2.$lt(t1, 0))
      throw $.wrapException(new $.RangeError("value " + $.S(t1)));
    t3 = this._endOrLength;
    if (t3 != null) {
      if ($.$lt$n(t3, 0))
        throw $.wrapException(new $.RangeError("value " + $.S(t3)));
      if (t2.$gt(t1, t3))
        throw $.wrapException(new $.RangeError("value " + $.S(t1) + " not in range 0.." + $.S(t3)));
    }
  },
  static: {
SubListIterable$: function(_iterable, _start, _endOrLength) {
  var t1 = new $.SubListIterable(_iterable, _start, _endOrLength);
  t1.SubListIterable$3(_iterable, _start, _endOrLength);
  return t1;
}}

},

ListIterator: {"": "Object;_iterable,_liblib$_length,_index,_liblib$_current",
  get$current: function() {
    return this._liblib$_current;
  },
  moveNext$0: function() {
    var t1, t2, $length, t3;
    t1 = this._iterable;
    t2 = $.getInterceptor$asx(t1);
    $length = t2.get$length(t1);
    if (!$.$eq(this._liblib$_length, $length))
      throw $.wrapException(new $.ConcurrentModificationError(t1));
    t3 = this._index;
    if (typeof $length !== "number")
      throw $.iae($length);
    if (t3 >= $length) {
      this._liblib$_current = null;
      return false;
    }
    this._liblib$_current = t2.elementAt$1(t1, t3);
    this._index = this._index + 1;
    return true;
  }
},

MappedIterable: {"": "IterableBase;_iterable,_f",
  get$iterator: function(_) {
    var t1 = this._iterable;
    return new $.MappedIterator(null, t1.get$iterator(t1), this._f);
  },
  get$length: function(_) {
    var t1 = this._iterable;
    return t1.get$length(t1);
  },
  get$isEmpty: function(_) {
    var t1 = this._iterable;
    return t1.get$isEmpty(t1);
  }
},

MappedIterator: {"": "Iterator;_liblib$_current,_iterator,_f",
  _f$1: function(arg0) {
    return this._f.call$1(arg0);
  },
  moveNext$0: function() {
    var t1 = this._iterator;
    if (t1.moveNext$0() === true) {
      this._liblib$_current = this._f$1(t1.get$current());
      return true;
    }
    this._liblib$_current = null;
    return false;
  },
  get$current: function() {
    return this._liblib$_current;
  }
},

SkipIterable: {"": "IterableBase;_iterable,_skipCount",
  skip$1: function(_, n) {
    if (n < 0)
      throw $.wrapException(new $.RangeError("value " + n));
    return $.SkipIterable$(this._iterable, $.$add$ns(this._skipCount, n));
  },
  get$iterator: function(_) {
    var t1 = this._iterable;
    return new $.SkipIterator(t1.get$iterator(t1), this._skipCount);
  },
  SkipIterable$2: function(_iterable, _skipCount) {
    var t1 = this._skipCount;
    if (typeof t1 !== "number" || Math.floor(t1) !== t1 || $.$lt$n(t1, 0))
      throw $.wrapException(new $.RangeError(t1));
  },
  static: {
SkipIterable$: function(_iterable, _skipCount) {
  var t1 = new $.SkipIterable(_iterable, _skipCount);
  t1.SkipIterable$2(_iterable, _skipCount);
  return t1;
}}

},

SkipIterator: {"": "Iterator;_iterator,_skipCount",
  moveNext$0: function() {
    var t1, i, t2;
    t1 = this._iterator;
    i = 0;
    while (true) {
      t2 = this._skipCount;
      if (typeof t2 !== "number")
        throw $.iae(t2);
      if (!(i < t2))
        break;
      t1.moveNext$0();
      ++i;
    }
    this._skipCount = 0;
    return t1.moveNext$0();
  },
  get$current: function() {
    return this._iterator.get$current();
  }
},

FixedLengthListMixin: {"": "Object;",
  set$length: function(receiver, newLength) {
    throw $.wrapException(new $.UnsupportedError("Cannot change the length of a fixed-length list"));
  },
  add$1: function(receiver, value) {
    throw $.wrapException(new $.UnsupportedError("Cannot add to a fixed-length list"));
  }
}}],
["dart.async", "dart:async", , {
_attachStackTrace: function(o, st) {
  var t1;
  if (o == null || typeof o === "boolean" || typeof o === "number" || typeof o === "string")
    return;
  t1 = $.get$_stackTraceExpando();
  t1.$indexSet(t1, o, st);
},

getAttachedStackTrace: function(o) {
  var t1;
  if (o == null || typeof o === "boolean" || typeof o === "number" || typeof o === "string")
    return;
  t1 = $.get$_stackTraceExpando();
  return t1.$index(t1, o);
},

_asyncRunCallback: function() {
  var callback, t1, exception, milliseconds;
  for (; t1 = $.get$_asyncCallbacks(), t1._head !== t1._tail;) {
    callback = $.get$_asyncCallbacks().removeFirst$0();
    try {
      callback.call$0();
    } catch (exception) {
      $.unwrapException(exception);
      milliseconds = C.JSNumber_methods.$tdiv(C.Duration_0._duration, 1000);
      $.TimerImpl$(milliseconds < 0 ? 0 : milliseconds, $._asyncRunCallback$closure);
      throw exception;
    }

  }
  $._callbacksAreEnqueued = false;
},

_scheduleAsyncCallback: function(callback) {
  $.get$_asyncCallbacks()._add$1(callback);
  if (!$._callbacksAreEnqueued) {
    $._createTimer(C.Duration_0, $._asyncRunCallback$closure);
    $._callbacksAreEnqueued = true;
  }
},

runAsync: function(callback) {
  var currentZone = $.get$_Zone__current();
  currentZone.runAsync$2(callback, currentZone);
},

_nullDataHandler: function(value) {
},

_nullErrorHandler: function(error) {
  $.get$_Zone__current().handleUncaughtError$1(error);
},

_nullDoneHandler: function() {
},

_asyncError: function(error, stackTrace) {
  if (stackTrace == null)
    return error;
  if ($.getAttachedStackTrace(error) != null)
    return error;
  $._attachStackTrace(error, stackTrace);
  return error;
},

_runUserCode: function(userCode, onSuccess, onError) {
  var e, s, exception, t1;
  try {
    onSuccess.call$1(userCode.call$0());
  } catch (exception) {
    t1 = $.unwrapException(exception);
    e = t1;
    s = new $._StackTrace(exception, null);
    onError.call$1($._asyncError(e, s));
  }

},

_cancelAndError: function(subscription, future) {
  return new $._cancelAndError_closure(subscription, future);
},

_createTimer: function(duration, callback) {
  var milliseconds = C.JSNumber_methods.$tdiv(duration._duration, 1000);
  return $.TimerImpl$(milliseconds < 0 ? 0 : milliseconds, callback);
},

_Completer: {"": "Object;",
  complete$1: function(_, value) {
    if (this._isComplete)
      throw $.wrapException(new $.StateError("Future already completed"));
    this._isComplete = true;
    this._setFutureValue$1(value);
  },
  completeError$2: function(error, stackTrace) {
    if (this._isComplete)
      throw $.wrapException(new $.StateError("Future already completed"));
    this._isComplete = true;
    this._setFutureError$1(error);
  },
  completeError$1: function(error) {
    return this.completeError$2(error, null);
  },
  _Completer$0: function() {
    var t1 = this.future._zone;
    t1._openCallbacks = t1._openCallbacks + 1;
  }
},

_AsyncCompleter: {"": "_Completer;future,_isComplete",
  _setFutureValue$1: function(value) {
    var future, t1;
    future = this.future;
    future._asyncSetValue$1(value);
    t1 = future._zone;
    t1._openCallbacks = t1._openCallbacks - 1;
    t1._checkIfDone$0();
  },
  _setFutureError$1: function(error) {
    var future, t1;
    future = this.future;
    future._asyncSetError$1(error);
    t1 = future._zone;
    t1._openCallbacks = t1._openCallbacks - 1;
    t1._checkIfDone$0();
  }
},

_FutureListenerWrapper: {"": "Object;future,_nextListener@",
  _sendValue$1: function(value) {
    this.future._setValueUnchecked$1(value);
  },
  _sendError$1: function(error) {
    this.future._setErrorUnchecked$1(error);
  },
  _inSameErrorZone$1: function(otherZone) {
    return $.$eq(this.future._zone.get$_errorZone(), otherZone.get$_errorZone());
  }
},

_ErrorZoneBoundaryListener: {"": "Object;_nextListener@,_listener",
  _inSameErrorZone$1: function(otherZone) {
    throw $.wrapException(new $.UnsupportedError("A Zone boundary doesn't support the inSameErrorZone test."));
  },
  _sendValue$1: function(value) {
    this._listener._sendValue$1(value);
  },
  _sendError$1: function(error) {
    $.get$_Zone__current().handleUncaughtError$1(error);
  }
},

_FutureImpl: {"": "Object;_state@,_zone<,_resultOrListeners<",
  get$_isChained: function() {
    return (this._state & 2) !== 0;
  },
  then$2$onError: function(f, onError) {
    var t1, t2;
    if (onError == null) {
      t1 = new $._ThenFuture(f, null, 0, $.get$_Zone__current(), null);
      t2 = t1._zone;
      t2._openCallbacks = t2._openCallbacks + 1;
      this._addListener$1(t1);
      return t1;
    }
    t1 = new $._SubscribeFuture(onError, f, null, 0, $.get$_Zone__current(), null);
    t2 = t1._zone;
    t2._openCallbacks = t2._openCallbacks + 1;
    this._addListener$1(t1);
    return t1;
  },
  then$1: function(f) {
    return this.then$2$onError(f, null);
  },
  catchError$2$test: function(f, test) {
    var t1, t2;
    t1 = new $._CatchErrorFuture(test, f, null, 0, $.get$_Zone__current(), null);
    t2 = t1._zone;
    t2._openCallbacks = t2._openCallbacks + 1;
    this._addListener$1(t1);
    return t1;
  },
  catchError$1: function(f) {
    return this.catchError$2$test(f, null);
  },
  _inSameErrorZone$1: function(otherZone) {
    return $.$eq(this._zone.get$_errorZone(), otherZone.get$_errorZone());
  },
  _setValue$1: function(value) {
    if (this._state !== 0)
      throw $.wrapException(new $.StateError("Future already completed"));
    this._setValueUnchecked$1(value);
  },
  get$_setValue: function() {
    return new $.BoundClosure$1(this, "_setValue$1", null);
  },
  _setValueUnchecked$1: function(value) {
    var listeners, listeners0;
    listeners = (this._state & 2) !== 0 ? null : this._removeListeners$0();
    this._state = 8;
    this._resultOrListeners = value;
    for (; listeners != null; listeners = listeners0) {
      listeners0 = listeners.get$_nextListener();
      listeners.set$_nextListener(null);
      listeners._sendValue$1(value);
    }
  },
  _setError$1: function(error) {
    if (this._state !== 0)
      throw $.wrapException(new $.StateError("Future already completed"));
    this._setErrorUnchecked$1(error);
  },
  get$_setError: function() {
    return new $.BoundClosure$1(this, "_setError$1", null);
  },
  _setErrorUnchecked$1: function(error) {
    var t1, hasListeners, listeners, listeners0;
    t1 = this._state;
    if ((t1 & 2) !== 0) {
      hasListeners = t1 === 2;
      listeners = null;
    } else {
      listeners = this._removeListeners$0();
      hasListeners = listeners != null;
    }
    this._state = 12;
    this._resultOrListeners = error;
    if (!hasListeners) {
      this._scheduleUnhandledError$0();
      return;
    }
    for (; listeners != null; listeners = listeners0) {
      listeners0 = listeners.get$_nextListener();
      listeners.set$_nextListener(null);
      listeners._sendError$1(error);
    }
  },
  _asyncSetValue$1: function(value) {
    if (this._state !== 0)
      throw $.wrapException(new $.StateError("Future already completed"));
    this._state = 1;
    $.runAsync(new $._FutureImpl__asyncSetValue_closure(this, value));
  },
  _asyncSetError$1: function(error) {
    if (this._state !== 0)
      throw $.wrapException(new $.StateError("Future already completed"));
    this._state = 1;
    $.runAsync(new $._FutureImpl__asyncSetError_closure(this, error));
  },
  _scheduleUnhandledError$0: function() {
    this._state = 28;
    $.runAsync(new $._FutureImpl__scheduleUnhandledError_closure(this));
  },
  _addListener$1: function(listener) {
    var t1, t2;
    t1 = {};
    t1.listener_0 = listener;
    if (!t1.listener_0._inSameErrorZone$1(this._zone))
      t1.listener_0 = new $._ErrorZoneBoundaryListener(null, t1.listener_0);
    t2 = this._state;
    if ((t2 & 2) !== 0) {
      this._state = 2;
      this.get$_chainSource()._addListener$1(t1.listener_0);
      return;
    }
    if (t2 >= 8) {
      this._state = (t2 & 4294967279) >>> 0;
      $.runAsync(new $._FutureImpl__addListener_closure(t1, this));
    } else {
      t1.listener_0.set$_nextListener(this._resultOrListeners);
      this._resultOrListeners = t1.listener_0;
    }
  },
  _removeListeners$0: function() {
    var current, prev, next;
    current = this._resultOrListeners;
    this._resultOrListeners = null;
    for (prev = null; current != null; prev = current, current = next) {
      next = current.get$_nextListener();
      current.set$_nextListener(prev);
    }
    return prev;
  },
  _chain$1: function(future) {
    var t1 = this._state;
    if (t1 < 8)
      future._chainFromFuture$1(this);
    else if (t1 === 8) {
      t1 = this._resultOrListeners;
      if (future._state !== 0)
        $.throwExpression(new $.StateError("Future already completed"));
      future._setValueUnchecked$1(t1);
    } else {
      this._state = (t1 & 4294967279) >>> 0;
      t1 = this._resultOrListeners;
      if (future._state !== 0)
        $.throwExpression(new $.StateError("Future already completed"));
      future._setErrorUnchecked$1(t1);
    }
  },
  get$_chainSource: function() {
    var future = this._resultOrListeners;
    if (future.get$_isChained()) {
      future = future.get$_chainSource();
      this._resultOrListeners = future;
    }
    return future;
  },
  _chainFromFuture$1: function(resultSource) {
    var cursor, cursor0, cursor1;
    if ((resultSource._state & 2) !== 0)
      resultSource = resultSource.get$_chainSource();
    if (this === resultSource) {
      if (this._state !== 0)
        $.throwExpression(new $.StateError("Future already completed"));
      this._setErrorUnchecked$1(new $.StateError("Cyclic future dependency."));
      return;
    }
    cursor = this._removeListeners$0();
    for (cursor0 = cursor; cursor0 != null; cursor0 = cursor1) {
      cursor1 = cursor0.get$_nextListener();
      cursor0.set$_nextListener(null);
      resultSource._addListener$1(cursor0);
    }
    resultSource._addListener$1(new $._FutureListenerWrapper(this, null));
    this._resultOrListeners = resultSource;
    this._state = cursor != null ? 2 : 6;
  },
  _setOrChainValue$1: function(result) {
    if (typeof result === "object" && result !== null && !!$.getInterceptor(result).$isFuture)
      if (!!$.getInterceptor(result).$is_FutureImpl) {
        result._chain$1(this);
        return;
      } else {
        result.then$2$onError(this.get$_setValue(), this.get$_setError());
        return;
      }
    else {
      if (this._state !== 0)
        $.throwExpression(new $.StateError("Future already completed"));
      this._setValueUnchecked$1(result);
    }
  },
  $is_FutureImpl: true,
  $isFuture: true,
  static: {
"": "_FutureImpl__INCOMPLETE,_FutureImpl__PENDING_COMPLETE,_FutureImpl__CHAINED,_FutureImpl__CHAINED_UNLISTENED,_FutureImpl__VALUE,_FutureImpl__ERROR,_FutureImpl__UNHANDLED_ERROR",
_FutureImpl__FutureImpl$wait: function(futures) {
  var t1, t2, t3, future, pos, completer;
  t1 = {};
  t1.completer_0 = null;
  t1.values_1 = null;
  t2 = new $._FutureImpl__FutureImpl$wait_handleError(t1);
  t1.remaining_2 = 0;
  for (t3 = new $.ListIterator(futures, futures.length, 0, null); t3.moveNext$0();) {
    future = t3._liblib$_current;
    pos = t1.remaining_2;
    t1.remaining_2 = $.$add$ns(pos, 1);
    future.catchError$1(t2).then$1(new $._FutureImpl__FutureImpl$wait_closure(t1, pos));
  }
  if ($.$eq(t1.remaining_2, 0)) {
    t1 = new $._FutureImpl(0, $.get$_Zone__current(), null);
    t1._state = 8;
    t1._resultOrListeners = C.List_empty;
    return t1;
  }
  t1.values_1 = $.List_List(t1.remaining_2);
  completer = new $._AsyncCompleter(new $._FutureImpl(0, $.get$_Zone__current(), null), false);
  completer._Completer$0();
  t1.completer_0 = completer;
  return t1.completer_0.future;
}}

},

_FutureImpl__FutureImpl$wait_handleError: {"": "Closure;box_0",
  call$1: function(error) {
    var t1 = this.box_0;
    if (t1.values_1 != null) {
      t1.values_1 = null;
      t1.completer_0.completeError$1(error);
    }
  }
},

_FutureImpl__FutureImpl$wait_closure: {"": "Closure;box_0,pos_1",
  call$1: function(value) {
    var t1, t2, t3;
    t1 = this.box_0;
    t2 = t1.values_1;
    if (t2 == null)
      return;
    t3 = this.pos_1;
    if (t3 >>> 0 !== t3 || t3 >= t2.length)
      throw $.ioore(t3);
    t2[t3] = value;
    t1.remaining_2 = $.$sub$n(t1.remaining_2, 1);
    if ($.$eq(t1.remaining_2, 0)) {
      t2 = t1.completer_0;
      t2.complete$1(t2, t1.values_1);
    }
  }
},

_FutureImpl__asyncSetValue_closure: {"": "Closure;this_0,value_1",
  call$0: function() {
    this.this_0._setValueUnchecked$1(this.value_1);
  }
},

_FutureImpl__asyncSetError_closure: {"": "Closure;this_0,error_1",
  call$0: function() {
    this.this_0._setErrorUnchecked$1(this.error_1);
  }
},

_FutureImpl__scheduleUnhandledError_closure: {"": "Closure;this_0",
  call$0: function() {
    var t1, t2, error;
    t1 = this.this_0;
    t2 = t1.get$_state();
    if (t2 >= 16) {
      t1.set$_state((t2 & 4294967279) >>> 0);
      error = t1.get$_resultOrListeners();
      t1.get$_zone().handleUncaughtError$1(error);
    }
  }
},

_FutureImpl__addListener_closure: {"": "Closure;box_0,this_1",
  call$0: function() {
    var t1, t2, value;
    t1 = this.this_1;
    t2 = t1.get$_state();
    value = t1.get$_resultOrListeners();
    t1 = this.box_0;
    if (t2 === 8)
      t1.listener_0._sendValue$1(value);
    else
      t1.listener_0._sendError$1(value);
  }
},

_TransformFuture: {"": "_FutureImpl;_nextListener@",
  _sendValue$1: function(value) {
    var t1 = this._zone;
    t1._openCallbacks = t1._openCallbacks - 1;
    t1._runInZone$2(new $._TransformFuture__sendValue_closure(this, value), false);
  },
  _sendError$1: function(error) {
    var t1 = this._zone;
    t1._openCallbacks = t1._openCallbacks - 1;
    t1._runInZone$2(new $._TransformFuture__sendError_closure(this, error), false);
  },
  $as_FutureImpl: function(S, T) {
    return [T];
  },
  $asFuture: function(S, T) {
    return [T];
  }
},

_TransformFuture__sendValue_closure: {"": "Closure;this_0,value_1",
  call$0: function() {
    return this.this_0._zonedSendValue$1(this.value_1);
  }
},

_TransformFuture__sendError_closure: {"": "Closure;this_0,error_1",
  call$0: function() {
    return this.this_0._zonedSendError$1(this.error_1);
  }
},

_ThenFuture: {"": "_TransformFuture;_onValue,_nextListener,_state,_zone,_resultOrListeners",
  _onValue$1: function(arg0) {
    return this._onValue.call$1(arg0);
  },
  _zonedSendValue$1: function(value) {
    var result, e, s, exception, t1;
    result = null;
    try {
      result = this._onValue$1(value);
    } catch (exception) {
      t1 = $.unwrapException(exception);
      e = t1;
      s = new $._StackTrace(exception, null);
      t1 = $._asyncError(e, s);
      if (this._state !== 0)
        $.throwExpression(new $.StateError("Future already completed"));
      this._setErrorUnchecked$1(t1);
      return;
    }

    this._setOrChainValue$1(result);
  },
  _zonedSendError$1: function(error) {
    if (this._state !== 0)
      $.throwExpression(new $.StateError("Future already completed"));
    this._setErrorUnchecked$1(error);
  },
  $as_FutureImpl: function(S, T) {
    return [T];
  },
  $asFuture: function(S, T) {
    return [T];
  }
},

_CatchErrorFuture: {"": "_TransformFuture;_test,_onError,_nextListener,_state,_zone,_resultOrListeners",
  _onError$1: function(arg0) {
    return this._onError.call$1(arg0);
  },
  _zonedSendValue$1: function(value) {
    if (this._state !== 0)
      $.throwExpression(new $.StateError("Future already completed"));
    this._setValueUnchecked$1(value);
  },
  _zonedSendError$1: function(error) {
    var matchesTest, e, s, result, e0, s0, exception, t1;
    result = null;
    try {
      result = this._onError$1(error);
    } catch (exception) {
      t1 = $.unwrapException(exception);
      e0 = t1;
      s0 = new $._StackTrace(exception, null);
      t1 = $._asyncError(e0, s0);
      if (this._state !== 0)
        $.throwExpression(new $.StateError("Future already completed"));
      this._setErrorUnchecked$1(t1);
      return;
    }

    this._setOrChainValue$1(result);
  },
  $as_FutureImpl: null,
  $asFuture: null
},

_SubscribeFuture: {"": "_ThenFuture;_onError,_onValue,_nextListener,_state,_zone,_resultOrListeners",
  _onError$1: function(arg0) {
    return this._onError.call$1(arg0);
  },
  _zonedSendError$1: function(error) {
    var result, e, s, exception, t1;
    result = null;
    try {
      result = this._onError$1(error);
    } catch (exception) {
      t1 = $.unwrapException(exception);
      e = t1;
      s = new $._StackTrace(exception, null);
      t1 = $._asyncError(e, s);
      if (this._state !== 0)
        $.throwExpression(new $.StateError("Future already completed"));
      this._setErrorUnchecked$1(t1);
      return;
    }

    this._setOrChainValue$1(result);
  },
  $as_FutureImpl: function(S, T) {
    return [T];
  },
  $asFuture: function(S, T) {
    return [T];
  }
},

Stream: {"": "Object;",
  forEach$1: function(_, action) {
    var t1, future;
    t1 = {};
    future = new $._FutureImpl(0, $.get$_Zone__current(), null);
    t1.subscription_0 = null;
    t1.subscription_0 = this.listen$4$cancelOnError$onDone$onError(new $.Stream_forEach_closure(t1, this, action, future), true, new $.Stream_forEach_closure0(future), future.get$_setError());
    return future;
  },
  get$length: function(_) {
    var t1, future;
    t1 = {};
    future = new $._FutureImpl(0, $.get$_Zone__current(), null);
    t1.count_0 = 0;
    this.listen$4$cancelOnError$onDone$onError(new $.Stream_length_closure(t1), true, new $.Stream_length_closure0(t1, future), future.get$_setError());
    return future;
  },
  get$isEmpty: function(_) {
    var t1, future;
    t1 = {};
    future = new $._FutureImpl(0, $.get$_Zone__current(), null);
    t1.subscription_0 = null;
    t1.subscription_0 = this.listen$4$cancelOnError$onDone$onError(new $.Stream_isEmpty_closure(t1, future), true, new $.Stream_isEmpty_closure0(future), future.get$_setError());
    return future;
  },
  skip$1: function(_, count) {
    return $._SkipStream$(this, count);
  }
},

Stream_forEach_closure: {"": "Closure;box_0,this_1,action_2,future_3",
  call$1: function(element) {
    $._runUserCode(new $.Stream_forEach__closure(this.action_2, element), new $.Stream_forEach__closure0(), $._cancelAndError(this.box_0.subscription_0, this.future_3));
  }
},

Stream_forEach__closure: {"": "Closure;action_4,element_5",
  call$0: function() {
    return this.action_4.call$1(this.element_5);
  }
},

Stream_forEach__closure0: {"": "Closure;",
  call$1: function(_) {
  }
},

Stream_forEach_closure0: {"": "Closure;future_6",
  call$0: function() {
    var t1 = this.future_6;
    if (t1._state !== 0)
      $.throwExpression(new $.StateError("Future already completed"));
    t1._setValueUnchecked$1(null);
  }
},

Stream_length_closure: {"": "Closure;box_0",
  call$1: function(_) {
    var t1 = this.box_0;
    t1.count_0 = $.$add$ns(t1.count_0, 1);
  }
},

Stream_length_closure0: {"": "Closure;box_0,future_1",
  call$0: function() {
    var t1, t2;
    t1 = this.future_1;
    t2 = this.box_0.count_0;
    if (t1._state !== 0)
      $.throwExpression(new $.StateError("Future already completed"));
    t1._setValueUnchecked$1(t2);
  }
},

Stream_isEmpty_closure: {"": "Closure;box_0,future_1",
  call$1: function(_) {
    var t1;
    this.box_0.subscription_0.cancel$0();
    t1 = this.future_1;
    if (t1._state !== 0)
      $.throwExpression(new $.StateError("Future already completed"));
    t1._setValueUnchecked$1(false);
  }
},

Stream_isEmpty_closure0: {"": "Closure;future_2",
  call$0: function() {
    var t1 = this.future_2;
    if (t1._state !== 0)
      $.throwExpression(new $.StateError("Future already completed"));
    t1._setValueUnchecked$1(true);
  }
},

StreamSubscription: {"": "Object;"},

EventSink: {"": "Object;"},

_BufferingStreamSubscription: {"": "Object;_zone<,_state@",
  _liblib3$_onData$1: function(arg0) {
    return this._liblib3$_onData.call$1(arg0);
  },
  _onError$1: function(arg0) {
    return this._onError.call$1(arg0);
  },
  pause$1: function(_, resumeSignal) {
    var t1, t2;
    t1 = this._state;
    if ((t1 & 8) !== 0)
      return;
    this._state = (t1 + 64 | 4) >>> 0;
    if (t1 < 64 && this._pending != null) {
      t2 = this._pending;
      t2.cancelSchedule$0;
      if (t2._state === 1)
        t2._state = 3;
    }
    if ((t1 & 4) === 0 && (this._state & 16) === 0)
      this._guardCallback$1(this.get$_onPause());
  },
  pause$0: function($receiver) {
    return this.pause$1($receiver, null);
  },
  resume$0: function() {
    var t1, t2;
    t1 = this._state;
    if ((t1 & 8) !== 0)
      return;
    if (t1 >= 64) {
      this._state = t1 - 64;
      t1 = this._state;
      if (t1 < 64) {
        if ((t1 & 32) !== 0) {
          t2 = this._pending;
          t2.get$isEmpty;
          t2 = t2.lastPendingEvent != null;
        } else
          t2 = false;
        if (t2)
          this._pending.schedule$1(this);
        else {
          this._state = (t1 & 4294967291) >>> 0;
          if ((this._state & 16) === 0)
            this._guardCallback$1(this.get$_onResume());
        }
      }
    }
  },
  cancel$0: function() {
    if ((this._state & 8) !== 0)
      return;
    this._cancel$0();
    var t1 = this._state;
    if ((t1 & 16) === 0) {
      this._state = (t1 | 16) >>> 0;
      this._onCancel$0();
      this._pending = null;
      this._state = (this._state & 4294967279) >>> 0;
    }
  },
  get$_mayResumeInput: function() {
    if (this._state < 64) {
      var t1 = this._pending;
      if (t1 != null) {
        t1.get$isEmpty;
        t1 = t1.lastPendingEvent == null;
      } else
        t1 = true;
    } else
      t1 = false;
    return t1;
  },
  _cancel$0: function() {
    this._state = (this._state | 8) >>> 0;
    var t1 = this._zone;
    t1._openCallbacks = t1._openCallbacks - 1;
    t1._checkIfDone$0();
    if ((this._state & 32) !== 0) {
      t1 = this._pending;
      t1.cancelSchedule$0;
      if (t1._state === 1)
        t1._state = 3;
    }
  },
  _liblib3$_add$1: function(data) {
    var t1 = this._state;
    if ((t1 & 8) !== 0)
      return;
    if (t1 < 16)
      this._sendData$1(data);
    else
      this._addPending$1(new $._DelayedData(data, null));
  },
  _addError$1: function(error) {
    var t1 = this._state;
    if ((t1 & 8) !== 0)
      return;
    if (t1 < 16)
      this._sendError$1(error);
    else
      this._addPending$1(new $._DelayedError(error, null));
  },
  _close$0: function() {
    var t1 = this._state;
    if ((t1 & 8) !== 0)
      return;
    this._state = (t1 | 2) >>> 0;
    if (this._state < 16)
      this._sendDone$0();
    else
      this._addPending$1(C.C__DelayedDone);
  },
  _onPause$0: function() {
  },
  get$_onPause: function() {
    return new $.BoundClosure$0(this, "_onPause$0", null);
  },
  _onResume$0: function() {
  },
  get$_onResume: function() {
    return new $.BoundClosure$0(this, "_onResume$0", null);
  },
  _onCancel$0: function() {
  },
  _addPending$1: function($event) {
    var pending, t1;
    pending = this._pending;
    if (pending == null) {
      pending = new $._StreamImplEvents(null, null, 0);
      this._pending = pending;
    }
    pending.add$1(pending, $event);
    t1 = this._state;
    if ((t1 & 32) === 0) {
      this._state = (t1 | 32) >>> 0;
      if (this._state < 64)
        this._pending.schedule$1(this);
    }
  },
  _sendData$1: function(data) {
    var t1 = this._state;
    this._state = (t1 | 16) >>> 0;
    this._zone._runInZone$2(new $._BufferingStreamSubscription__sendData_closure(this, data), true);
    this._state = (this._state & 4294967279) >>> 0;
    this._checkState$1((t1 & 4) !== 0);
  },
  _sendError$1: function(error) {
    var t1, t2, t3;
    t1 = this._state;
    this._state = (t1 | 16) >>> 0;
    t2 = this._zone;
    t3 = $.get$_Zone__current();
    if (!$.$eq(t2.get$_errorZone(), t3.get$_errorZone()))
      $.get$_Zone__current().handleUncaughtError$1(error);
    else
      t2._runInZone$2(new $._BufferingStreamSubscription__sendError_closure(this, error), true);
    this._state = (this._state & 4294967279) >>> 0;
    if ((this._state & 1) !== 0)
      this._cancel$0();
    this._checkState$1((t1 & 4) !== 0);
  },
  _sendDone$0: function() {
    this._state = (this._state | 26) >>> 0;
    var t1 = this._zone;
    t1._openCallbacks = t1._openCallbacks - 1;
    t1._runInZone$2(this._onDone, true);
    this._onCancel$0();
    this._state = (this._state & 4294967279) >>> 0;
  },
  _guardCallback$1: function(callback) {
    var t1 = this._state;
    this._state = (t1 | 16) >>> 0;
    callback.call$0();
    this._state = (this._state & 4294967279) >>> 0;
    this._checkState$1((t1 & 4) !== 0);
  },
  _checkState$1: function(wasInputPaused) {
    var t1, t2, isInputPaused;
    t1 = this._state;
    if ((t1 & 32) !== 0) {
      t2 = this._pending;
      t2.get$isEmpty;
      t2 = t2.lastPendingEvent == null;
    } else
      t2 = false;
    if (t2) {
      this._state = (t1 & 4294967263) >>> 0;
      if ((this._state & 4) !== 0 && this.get$_mayResumeInput())
        this._state = (this._state & 4294967291) >>> 0;
    }
    for (; true; wasInputPaused = isInputPaused) {
      t1 = this._state;
      if ((t1 & 8) !== 0) {
        this._onCancel$0();
        this._pending = null;
        return;
      }
      isInputPaused = (t1 & 4) !== 0;
      if (wasInputPaused === isInputPaused)
        break;
      this._state = (t1 ^ 16) >>> 0;
      if (isInputPaused)
        this._onPause$0();
      else
        this._onResume$0();
      this._state = (this._state & 4294967279) >>> 0;
    }
    t1 = this._state;
    if ((t1 & 32) !== 0 && t1 < 64)
      this._pending.schedule$1(this);
  },
  _BufferingStreamSubscription$4: function(_onData, _onError, _onDone, cancelOnError) {
    var t1 = this._zone;
    t1._openCallbacks = t1._openCallbacks + 1;
  }
},

_BufferingStreamSubscription__sendData_closure: {"": "Closure;this_0,data_1",
  call$0: function() {
    return this.this_0._liblib3$_onData$1(this.data_1);
  }
},

_BufferingStreamSubscription__sendError_closure: {"": "Closure;this_0,error_1",
  call$0: function() {
    return this.this_0._onError$1(this.error_1);
  }
},

_DelayedEvent: {"": "Object;next@"},

_DelayedData: {"": "_DelayedEvent;value,next",
  perform$1: function(dispatch) {
    dispatch._sendData$1(this.value);
  }
},

_DelayedError: {"": "_DelayedEvent;error,next",
  perform$1: function(dispatch) {
    dispatch._sendError$1(this.error);
  }
},

_DelayedDone: {"": "Object;",
  perform$1: function(dispatch) {
    dispatch._sendDone$0();
  },
  get$next: function() {
    return;
  },
  set$next: function(_) {
    throw $.wrapException(new $.StateError("No events after a done."));
  }
},

_PendingEvents: {"": "Object;_state@",
  schedule$1: function(dispatch) {
    var t1 = this._state;
    if (t1 === 1)
      return;
    if (t1 >= 1) {
      this._state = 1;
      return;
    }
    $.runAsync(new $._PendingEvents_schedule_closure(this, dispatch));
    this._state = 1;
  }
},

_PendingEvents_schedule_closure: {"": "Closure;this_0,dispatch_1",
  call$0: function() {
    var t1, oldState;
    t1 = this.this_0;
    oldState = t1.get$_state();
    t1.set$_state(0);
    if (oldState === 3)
      return;
    t1.handleNext$1(this.dispatch_1);
  }
},

_StreamImplEvents: {"": "_PendingEvents;firstPendingEvent,lastPendingEvent,_state",
  get$isEmpty: function(_) {
    return this.lastPendingEvent == null;
  },
  add$1: function(_, $event) {
    var t1 = this.lastPendingEvent;
    if (t1 == null) {
      this.lastPendingEvent = $event;
      this.firstPendingEvent = $event;
    } else {
      t1.set$next($event);
      this.lastPendingEvent = $event;
    }
  },
  handleNext$1: function(dispatch) {
    var $event = this.firstPendingEvent;
    this.firstPendingEvent = $event.get$next();
    if (this.firstPendingEvent == null)
      this.lastPendingEvent = null;
    $event.perform$1(dispatch);
  }
},

_cancelAndError_closure: {"": "Closure;subscription_0,future_1",
  call$1: function(error) {
    var t1;
    this.subscription_0.cancel$0();
    t1 = this.future_1;
    if (t1._state !== 0)
      $.throwExpression(new $.StateError("Future already completed"));
    t1._setErrorUnchecked$1(error);
  }
},

_ForwardingStream: {"": "Stream;",
  listen$4$cancelOnError$onDone$onError: function(onData, cancelOnError, onDone, onError) {
    return $._ForwardingStreamSubscription$(this, onData, onError, onDone, true === cancelOnError);
  },
  listen$3$onDone$onError: function(onData, onDone, onError) {
    return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, onError);
  },
  _handleData$2: function(data, sink) {
    sink._liblib3$_add$1(data);
  }
},

_ForwardingStreamSubscription: {"": "_BufferingStreamSubscription;_stream,_subscription,_liblib3$_onData,_onError,_onDone,_zone,_state,_pending",
  _liblib3$_add$1: function(data) {
    if ((this._state & 2) !== 0)
      return;
    $._BufferingStreamSubscription.prototype._liblib3$_add$1.call(this, data);
  },
  _addError$1: function(error) {
    if ((this._state & 2) !== 0)
      return;
    $._BufferingStreamSubscription.prototype._addError$1.call(this, error);
  },
  _onPause$0: function() {
    var t1 = this._subscription;
    if (t1 == null)
      return;
    t1.pause$0(t1);
  },
  get$_onPause: function() {
    return new $.BoundClosure$0(this, "_onPause$0", null);
  },
  _onResume$0: function() {
    var t1 = this._subscription;
    if (t1 == null)
      return;
    t1.resume$0();
  },
  get$_onResume: function() {
    return new $.BoundClosure$0(this, "_onResume$0", null);
  },
  _onCancel$0: function() {
    var t1 = this._subscription;
    if (t1 != null) {
      this._subscription = null;
      t1.cancel$0();
    }
  },
  _handleData$1: function(data) {
    this._stream._handleData$2(data, this);
  },
  get$_handleData: function() {
    return new $.BoundClosure$1(this, "_handleData$1", null);
  },
  _handleError$1: function(error) {
    this._addError$1(error);
  },
  get$_handleError: function() {
    return new $.BoundClosure$1(this, "_handleError$1", null);
  },
  _handleDone$0: function() {
    this._close$0();
  },
  get$_handleDone: function() {
    return new $.BoundClosure$0(this, "_handleDone$0", null);
  },
  _ForwardingStreamSubscription$5: function(_stream, onData, onError, onDone, cancelOnError) {
    var t1, t2;
    t1 = this.get$_handleData();
    t2 = this.get$_handleError();
    this._subscription = this._stream._source.listen$3$onDone$onError(t1, this.get$_handleDone(), t2);
  },
  static: {
_ForwardingStreamSubscription$: function(_stream, onData, onError, onDone, cancelOnError) {
  var t1, t2;
  t1 = $.get$_Zone__current();
  t2 = cancelOnError ? 1 : 0;
  t2 = new $._ForwardingStreamSubscription(_stream, null, onData, onError, onDone, t1, t2, null);
  t2._BufferingStreamSubscription$4(onData, onError, onDone, cancelOnError);
  t2._ForwardingStreamSubscription$5(_stream, onData, onError, onDone, cancelOnError);
  return t2;
}}

},

_SkipStream: {"": "_ForwardingStream;_remaining,_source",
  _handleData$2: function(inputEvent, sink) {
    var t1 = this._remaining;
    if (t1 > 0) {
      this._remaining = t1 - 1;
      return;
    }
    return sink._liblib3$_add$1(inputEvent);
  },
  _SkipStream$2: function(source, count) {
    if (count < 0)
      throw $.wrapException(new $.ArgumentError(count));
  },
  static: {
_SkipStream$: function(source, count) {
  var t1 = new $._SkipStream(count, source);
  t1._SkipStream$2(source, count);
  return t1;
}}

},

_ZoneBase: {"": "Object;",
  get$_errorZone: function() {
    return this._parentZone.get$_errorZone();
  },
  handleUncaughtError$1: function(error) {
    this._parentZone.handleUncaughtError$1(error);
  },
  _checkIfDone$0: function() {
    if (!this._isExecutingCallback && this._openCallbacks === 0 && this._children.length === 0)
      ;
  },
  _runInZone$2: function(f, handleUncaught) {
    var oldZone, oldIsExecuting, e, s, t1, exception;
    if ($.get$_Zone__current() === this && handleUncaught !== true && this._isExecutingCallback)
      return f.call$0();
    oldZone = $.get$_Zone__current();
    $._Zone__current = this;
    oldIsExecuting = this._isExecutingCallback;
    this._isExecutingCallback = true;
    try {
      try {
        t1 = f.call$0();
        return t1;
      } catch (exception) {
        t1 = $.unwrapException(exception);
        e = t1;
        s = new $._StackTrace(exception, null);
        if (handleUncaught === true)
          this.handleUncaughtError$1($._asyncError(e, s));
        else
          throw exception;
      }

    } finally {
      this._isExecutingCallback = oldIsExecuting;
      $._Zone__current = oldZone;
      this._checkIfDone$0();
    }
  },
  runAsync$2: function(f, zone) {
    return this._parentZone.runAsync$2(f, zone);
  }
},

_DefaultZone: {"": "_ZoneBase;_parentZone,_children,_openCallbacks,_isExecutingCallback",
  get$_errorZone: function() {
    return this;
  },
  handleUncaughtError$1: function(error) {
    $._scheduleAsyncCallback(new $._DefaultZone_handleUncaughtError_closure(error));
  },
  runAsync$2: function(f, zone) {
    if (this === zone) {
      $._scheduleAsyncCallback(f);
      return;
    }
    zone._openCallbacks = zone._openCallbacks + 1;
    $._scheduleAsyncCallback(new $._DefaultZone_runAsync_closure(f, zone));
  }
},

_DefaultZone_handleUncaughtError_closure: {"": "Closure;error_0",
  call$0: function() {
    var t1, trace;
    t1 = this.error_0;
    $.Primitives_printString("Uncaught Error: " + $.S(t1));
    trace = $.getAttachedStackTrace(t1);
    $._attachStackTrace(t1, null);
    if (trace != null)
      $.Primitives_printString("Stack Trace:\n" + $.S(trace) + "\n");
    throw $.wrapException(t1);
  }
},

_DefaultZone_runAsync_closure: {"": "Closure;f_0,zone_1",
  call$0: function() {
    var t1 = this.zone_1;
    t1._openCallbacks = t1._openCallbacks - 1;
    t1._runInZone$2(this.f_0, true);
  }
},

_ZoneTimer: {"": "Object;_zone<,_callback,_timer",
  _run$0: function() {
    var t1 = this._zone;
    t1._openCallbacks = t1._openCallbacks - 1;
    t1._runInZone$2(this._callback, true);
  },
  get$_run: function() {
    return new $.BoundClosure$0(this, "_run$0", null);
  }
}}],
["dart.collection", "dart:collection", , {
Maps_mapToString: function(m) {
  var t1, result, i, t2;
  t1 = {};
  for (i = 0; i < $.get$Maps__toStringList().length; ++i) {
    t2 = $.get$Maps__toStringList();
    if (i >= t2.length)
      throw $.ioore(i);
    if (t2[i] === m)
      return "{...}";
  }
  result = $.StringBuffer$("");
  try {
    $.get$Maps__toStringList().push(m);
    result.write$1("{");
    t1.first_0 = true;
    $.forEach$1$ax(m, new $.Maps_mapToString_closure(t1, result));
    result.write$1("}");
  } finally {
    t1 = $.get$Maps__toStringList();
    if (0 >= t1.length)
      throw $.ioore(0);
    t1.pop();
  }
  return result.get$_contents();
},

HashMap_values_closure: {"": "Closure;this_0",
  call$1: function(each) {
    return $.$index$asx(this.this_0, each);
  }
},

HashMapKeyIterable: {"": "IterableBase;_map",
  get$length: function(_) {
    return this._map._liblib1$_length;
  },
  get$isEmpty: function(_) {
    return this._map._liblib1$_length === 0;
  },
  get$iterator: function(_) {
    var t1 = this._map;
    return new $.HashMapKeyIterator(t1, t1._computeKeys$0(), 0, null);
  },
  forEach$1: function(_, f) {
    var t1, keys, $length, i;
    t1 = this._map;
    keys = t1._computeKeys$0();
    for ($length = keys.length, i = 0; i < $length; ++i) {
      f.call$1(keys[i]);
      if (keys !== t1._keys)
        throw $.wrapException(new $.ConcurrentModificationError(t1));
    }
  }
},

HashMapKeyIterator: {"": "Object;_map,_keys,_offset,_liblib1$_current",
  get$current: function() {
    return this._liblib1$_current;
  },
  moveNext$0: function() {
    var keys, offset, t1;
    keys = this._keys;
    offset = this._offset;
    t1 = this._map;
    if (keys !== t1._keys)
      throw $.wrapException(new $.ConcurrentModificationError(t1));
    else if (offset >= keys.length) {
      this._liblib1$_current = null;
      return false;
    } else {
      this._liblib1$_current = keys[offset];
      this._offset = offset + 1;
      return true;
    }
  }
},

LinkedHashMap_values_closure: {"": "Closure;this_0",
  call$1: function(each) {
    return $.$index$asx(this.this_0, each);
  }
},

LinkedHashMapCell: {"": "Object;_key<,_value@,_liblib1$_next@,_previous@"},

LinkedHashMapKeyIterable: {"": "IterableBase;_map",
  get$length: function(_) {
    return this._map._liblib1$_length;
  },
  get$isEmpty: function(_) {
    return this._map._liblib1$_length === 0;
  },
  get$iterator: function(_) {
    var t1 = this._map;
    t1 = new $.LinkedHashMapKeyIterator(t1, t1._modifications, null, null);
    t1._cell = t1._map._first;
    return t1;
  },
  forEach$1: function(_, f) {
    var t1, cell, modifications;
    t1 = this._map;
    cell = t1._first;
    modifications = t1._modifications;
    for (; cell != null;) {
      f.call$1(cell.get$_key());
      if (modifications !== t1._modifications)
        throw $.wrapException(new $.ConcurrentModificationError(t1));
      cell = cell.get$_liblib1$_next();
    }
  }
},

LinkedHashMapKeyIterator: {"": "Object;_map,_modifications,_cell,_liblib1$_current",
  get$current: function() {
    return this._liblib1$_current;
  },
  moveNext$0: function() {
    var t1 = this._map;
    if (this._modifications !== t1._modifications)
      throw $.wrapException(new $.ConcurrentModificationError(t1));
    else {
      t1 = this._cell;
      if (t1 == null) {
        this._liblib1$_current = null;
        return false;
      } else {
        this._liblib1$_current = t1.get$_key();
        this._cell = this._cell.get$_liblib1$_next();
        return true;
      }
    }
  }
},

LinkedHashSetCell: {"": "Object;_liblib1$_element<,_liblib1$_next@,_previous@"},

LinkedHashSetIterator: {"": "Object;_set,_modifications,_cell,_liblib1$_current",
  get$current: function() {
    return this._liblib1$_current;
  },
  moveNext$0: function() {
    var t1 = this._set;
    if (this._modifications !== t1._modifications)
      throw $.wrapException(new $.ConcurrentModificationError(t1));
    else {
      t1 = this._cell;
      if (t1 == null) {
        this._liblib1$_current = null;
        return false;
      } else {
        this._liblib1$_current = t1.get$_liblib1$_element();
        this._cell = this._cell.get$_liblib1$_next();
        return true;
      }
    }
  }
},

HashMap: {"": "Object;_liblib1$_length,_strings,_nums,_rest,_keys",
  get$length: function(_) {
    return this._liblib1$_length;
  },
  get$isEmpty: function(_) {
    return this._liblib1$_length === 0;
  },
  get$keys: function() {
    return new $.HashMapKeyIterable(this);
  },
  get$values: function(_) {
    return new $.MappedIterable(new $.HashMapKeyIterable(this), new $.HashMap_values_closure(this));
  },
  containsKey$1: function(key) {
    var strings, nums, rest;
    if (typeof key === "string" && key !== "__proto__") {
      strings = this._strings;
      return strings == null ? false : strings[key] != null;
    } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
      nums = this._nums;
      return nums == null ? false : nums[key] != null;
    } else {
      rest = this._rest;
      if (rest == null)
        return false;
      return $.HashMap__findBucketIndex(rest[$.get$hashCode$(key) & 0x3ffffff], key) >= 0;
    }
  },
  $index: function(_, key) {
    var strings, t1, entry, nums, rest, bucket, index;
    if (typeof key === "string" && key !== "__proto__") {
      strings = this._strings;
      if (strings == null)
        t1 = null;
      else {
        entry = strings[key];
        t1 = entry === strings ? null : entry;
      }
      return t1;
    } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
      nums = this._nums;
      if (nums == null)
        t1 = null;
      else {
        entry = nums[key];
        t1 = entry === nums ? null : entry;
      }
      return t1;
    } else {
      rest = this._rest;
      if (rest == null)
        return;
      bucket = rest[$.get$hashCode$(key) & 0x3ffffff];
      index = $.HashMap__findBucketIndex(bucket, key);
      return index < 0 ? null : bucket[index + 1];
    }
  },
  $indexSet: function(_, key, value) {
    var strings, table, nums, rest, hash, bucket, t1, index;
    if (typeof key === "string" && key !== "__proto__") {
      strings = this._strings;
      if (strings == null) {
        table = Object.create(null);
        if (table == null)
          table["<non-identifier-key>"] = table;
        else
          table["<non-identifier-key>"] = table;
        delete table["<non-identifier-key>"];
        this._strings = table;
        strings = table;
      }
      if (strings[key] == null) {
        this._liblib1$_length = this._liblib1$_length + 1;
        this._keys = null;
      }
      if (value == null)
        strings[key] = strings;
      else
        strings[key] = value;
    } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
      nums = this._nums;
      if (nums == null) {
        table = Object.create(null);
        if (table == null)
          table["<non-identifier-key>"] = table;
        else
          table["<non-identifier-key>"] = table;
        delete table["<non-identifier-key>"];
        this._nums = table;
        nums = table;
      }
      if (nums[key] == null) {
        this._liblib1$_length = this._liblib1$_length + 1;
        this._keys = null;
      }
      if (value == null)
        nums[key] = nums;
      else
        nums[key] = value;
    } else {
      rest = this._rest;
      if (rest == null) {
        table = Object.create(null);
        if (table == null)
          table["<non-identifier-key>"] = table;
        else
          table["<non-identifier-key>"] = table;
        delete table["<non-identifier-key>"];
        this._rest = table;
        rest = table;
      }
      hash = $.get$hashCode$(key) & 0x3ffffff;
      bucket = rest[hash];
      if (bucket == null) {
        t1 = [key, value];
        if (t1 == null)
          rest[hash] = rest;
        else
          rest[hash] = t1;
        this._liblib1$_length = this._liblib1$_length + 1;
        this._keys = null;
      } else {
        index = $.HashMap__findBucketIndex(bucket, key);
        if (index >= 0)
          bucket[index + 1] = value;
        else {
          bucket.push(key, value);
          this._liblib1$_length = this._liblib1$_length + 1;
          this._keys = null;
        }
      }
    }
  },
  remove$1: function(_, key) {
    var rest, bucket, index;
    if (typeof key === "string" && key !== "__proto__")
      return this._removeHashTableEntry$2(this._strings, key);
    else if (typeof key === "number" && (key & 0x3ffffff) === key)
      return this._removeHashTableEntry$2(this._nums, key);
    else {
      rest = this._rest;
      if (rest == null)
        return;
      bucket = rest[$.get$hashCode$(key) & 0x3ffffff];
      index = $.HashMap__findBucketIndex(bucket, key);
      if (index < 0)
        return;
      this._liblib1$_length = this._liblib1$_length - 1;
      this._keys = null;
      return bucket.splice(index, 2)[1];
    }
  },
  forEach$1: function(_, action) {
    var keys, $length, i, key;
    keys = this._computeKeys$0();
    for ($length = keys.length, i = 0; i < $length; ++i) {
      key = keys[i];
      action.call$2(key, this.$index(this, key));
      if (keys !== this._keys)
        throw $.wrapException(new $.ConcurrentModificationError(this));
    }
  },
  toString$0: function(_) {
    return $.Maps_mapToString(this);
  },
  _computeKeys$0: function() {
    var t1, result, strings, names, entries, index, i, nums, rest, bucket, $length, i0;
    t1 = this._keys;
    if (t1 != null)
      return t1;
    result = $.List_List(this._liblib1$_length);
    strings = this._strings;
    if (strings != null) {
      names = Object.getOwnPropertyNames(strings);
      entries = names.length;
      for (index = 0, i = 0; i < entries; ++i) {
        result[index] = names[i];
        ++index;
      }
    } else
      index = 0;
    nums = this._nums;
    if (nums != null) {
      names = Object.getOwnPropertyNames(nums);
      entries = names.length;
      for (i = 0; i < entries; ++i) {
        result[index] = +names[i];
        ++index;
      }
    }
    rest = this._rest;
    if (rest != null) {
      names = Object.getOwnPropertyNames(rest);
      entries = names.length;
      for (i = 0; i < entries; ++i) {
        bucket = rest[names[i]];
        $length = bucket.length;
        for (i0 = 0; i0 < $length; i0 += 2) {
          result[index] = bucket[i0];
          ++index;
        }
      }
    }
    this._keys = result;
    return result;
  },
  _removeHashTableEntry$2: function(table, key) {
    var value;
    if (table != null && table[key] != null) {
      value = $.HashMap__getTableEntry(table, key);
      delete table[key];
      this._liblib1$_length = this._liblib1$_length - 1;
      this._keys = null;
      return value;
    } else
      return;
  },
  $isMap: true,
  static: {
HashMap__getTableEntry: function(table, key) {
  var entry = table[key];
  return entry === table ? null : entry;
},

HashMap__findBucketIndex: function(bucket, key) {
  var $length, i;
  if (bucket == null)
    return -1;
  $length = bucket.length;
  for (i = 0; i < $length; i += 2)
    if ($.$eq(bucket[i], key))
      return i;
  return -1;
}}

},

_HashSetBase: {"": "IterableBase;",
  toString$0: function(_) {
    return $.IterableMixinWorkaround_toStringIterable(this, "{", "}");
  }
},

IterableBase: {"": "Object;",
  forEach$1: function(_, f) {
    var t1;
    for (t1 = this.get$iterator(this); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
  },
  join$1: function(_, separator) {
    var iterator, buffer, t1;
    if (typeof separator !== "string")
      return this.join$1$bailout(1, separator);
    iterator = this.get$iterator(this);
    if (iterator.moveNext$0() !== true)
      return "";
    buffer = $.StringBuffer$("");
    if (separator === "")
      do {
        t1 = $.S(iterator.get$current());
        buffer._contents = buffer._contents + t1;
      } while (iterator.moveNext$0() === true);
    else {
      buffer.write$1($.S(iterator.get$current()));
      for (; iterator.moveNext$0() === true;) {
        buffer._contents = buffer._contents + separator;
        t1 = $.S(iterator.get$current());
        buffer._contents = buffer._contents + t1;
      }
    }
    return buffer._contents;
  },
  join$1$bailout: function(state0, separator) {
    var iterator, buffer, t1, str, t2;
    iterator = this.get$iterator(this);
    if (iterator.moveNext$0() !== true)
      return "";
    buffer = $.StringBuffer$("");
    if (separator == null || $.$eq(separator, ""))
      do {
        t1 = $.S(iterator.get$current());
        buffer._contents = buffer._contents + t1;
      } while (iterator.moveNext$0() === true);
    else {
      buffer.write$1($.S(iterator.get$current()));
      for (t1 = typeof separator === "string"; iterator.moveNext$0() === true;) {
        str = t1 ? separator : $.S(separator);
        buffer._contents = buffer._contents + str;
        t2 = $.S(iterator.get$current());
        buffer._contents = buffer._contents + t2;
      }
    }
    return buffer._contents;
  },
  toList$1$growable: function(_, growable) {
    return $.List_List$from(this, growable);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$length: function(_) {
    var it, count;
    it = this.get$iterator(this);
    for (count = 0; it.moveNext$0() === true;)
      ++count;
    return count;
  },
  get$isEmpty: function(_) {
    return this.get$iterator(this).moveNext$0() !== true;
  },
  skip$1: function(_, n) {
    return $.SkipIterable$(this, n);
  },
  elementAt$1: function(_, index) {
    var t1, remaining, element;
    if (typeof index !== "number")
      return this.elementAt$1$bailout(1, index);
    if (typeof index !== "number" || Math.floor(index) !== index || index < 0)
      throw $.wrapException(new $.RangeError("value " + $.S(index)));
    for (t1 = this.get$iterator(this), remaining = index; t1.moveNext$0() === true;) {
      element = t1.get$current();
      if (remaining === 0)
        return element;
      --remaining;
    }
    throw $.wrapException(new $.RangeError("value " + $.S(index)));
  },
  elementAt$1$bailout: function(state0, index) {
    var t1, remaining, element, t2;
    if (typeof index !== "number" || Math.floor(index) !== index || index < 0)
      throw $.wrapException(new $.RangeError("value " + $.S(index)));
    for (t1 = this.get$iterator(this), remaining = index; t1.moveNext$0() === true;) {
      element = t1.get$current();
      t2 = $.getInterceptor(remaining);
      if (t2.$eq(remaining, 0))
        return element;
      remaining = t2.$sub(remaining, 1);
    }
    throw $.wrapException(new $.RangeError("value " + $.S(index)));
  }
},

LinkedHashMap: {"": "Object;_liblib1$_length,_strings,_nums,_rest,_first,_last,_modifications",
  $index: function(_, key) {
    var strings, cell, nums, rest, bucket, index;
    if (typeof key === "string" && key !== "__proto__") {
      strings = this._strings;
      if (strings == null)
        return;
      cell = strings[key];
      return cell == null ? null : cell.get$_value();
    } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
      nums = this._nums;
      if (nums == null)
        return;
      cell = nums[key];
      return cell == null ? null : cell.get$_value();
    } else {
      rest = this._rest;
      if (rest == null)
        return;
      bucket = rest[$.get$hashCode$(key) & 0x3ffffff];
      index = $.LinkedHashMap__findBucketIndex(bucket, key);
      if (index < 0)
        return;
      return bucket[index].get$_value();
    }
  },
  $indexSet: function(_, key, value) {
    var strings, table, cell, nums, rest, hash, bucket, index;
    if (typeof key === "string" && key !== "__proto__") {
      strings = this._strings;
      if (strings == null) {
        table = Object.create(null);
        table["<non-identifier-key>"] = table;
        delete table["<non-identifier-key>"];
        this._strings = table;
        strings = table;
      }
      cell = strings[key];
      if (cell == null)
        strings[key] = this._newLinkedCell$2(key, value);
      else
        cell.set$_value(value);
    } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
      nums = this._nums;
      if (nums == null) {
        table = Object.create(null);
        table["<non-identifier-key>"] = table;
        delete table["<non-identifier-key>"];
        this._nums = table;
        nums = table;
      }
      cell = nums[key];
      if (cell == null)
        nums[key] = this._newLinkedCell$2(key, value);
      else
        cell.set$_value(value);
    } else {
      rest = this._rest;
      if (rest == null) {
        table = Object.create(null);
        table["<non-identifier-key>"] = table;
        delete table["<non-identifier-key>"];
        this._rest = table;
        rest = table;
      }
      hash = $.get$hashCode$(key) & 0x3ffffff;
      bucket = rest[hash];
      if (bucket == null)
        rest[hash] = [this._newLinkedCell$2(key, value)];
      else {
        index = $.LinkedHashMap__findBucketIndex(bucket, key);
        if (index >= 0)
          bucket[index].set$_value(value);
        else
          bucket.push(this._newLinkedCell$2(key, value));
      }
    }
  },
  forEach$1: function(_, action) {
    var cell, modifications;
    cell = this._first;
    modifications = this._modifications;
    for (; cell != null;) {
      action.call$2(cell.get$_key(), cell.get$_value());
      if (modifications !== this._modifications)
        throw $.wrapException(new $.ConcurrentModificationError(this));
      cell = cell.get$_liblib1$_next();
    }
  },
  get$keys: function() {
    return new $.LinkedHashMapKeyIterable(this);
  },
  get$values: function(_) {
    return new $.MappedIterable(new $.LinkedHashMapKeyIterable(this), new $.LinkedHashMap_values_closure(this));
  },
  get$length: function(_) {
    return this._liblib1$_length;
  },
  get$isEmpty: function(_) {
    return this._liblib1$_length === 0;
  },
  toString$0: function(_) {
    return $.Maps_mapToString(this);
  },
  _newLinkedCell$2: function(key, value) {
    var cell, last;
    cell = new $.LinkedHashMapCell(key, value, null, null);
    if (this._first == null) {
      this._last = cell;
      this._first = cell;
    } else {
      last = this._last;
      cell._previous = last;
      last.set$_liblib1$_next(cell);
      this._last = cell;
    }
    this._liblib1$_length = this._liblib1$_length + 1;
    this._modifications = this._modifications + 1 & 67108863;
    return cell;
  },
  $isMap: true,
  static: {
LinkedHashMap__findBucketIndex: function(bucket, key) {
  var $length, i;
  if (bucket == null)
    return -1;
  $length = bucket.length;
  for (i = 0; i < $length; ++i)
    if ($.$eq(bucket[i].get$_key(), key))
      return i;
  return -1;
}}

},

LinkedHashSet: {"": "_HashSetBase;_liblib1$_length,_strings,_nums,_rest,_first,_last,_modifications",
  get$iterator: function(_) {
    var t1 = new $.LinkedHashSetIterator(this, this._modifications, null, null);
    t1._cell = t1._set._first;
    return t1;
  },
  get$length: function(_) {
    return this._liblib1$_length;
  },
  get$isEmpty: function(_) {
    return this._liblib1$_length === 0;
  },
  forEach$1: function(_, action) {
    var cell, modifications;
    cell = this._first;
    modifications = this._modifications;
    for (; cell != null;) {
      action.call$1(cell.get$_liblib1$_element());
      if (modifications !== this._modifications)
        throw $.wrapException(new $.ConcurrentModificationError(this));
      cell = cell.get$_liblib1$_next();
    }
  },
  add$1: function(_, element) {
    var strings, table, nums, rest, hash, bucket;
    if (typeof element === "string" && element !== "__proto__") {
      strings = this._strings;
      if (strings == null) {
        table = Object.create(null);
        table["<non-identifier-key>"] = table;
        delete table["<non-identifier-key>"];
        this._strings = table;
        strings = table;
      }
      this._addHashTableEntry$2(strings, element);
    } else if (typeof element === "number" && (element & 0x3ffffff) === element) {
      nums = this._nums;
      if (nums == null) {
        table = Object.create(null);
        table["<non-identifier-key>"] = table;
        delete table["<non-identifier-key>"];
        this._nums = table;
        nums = table;
      }
      this._addHashTableEntry$2(nums, element);
    } else {
      rest = this._rest;
      if (rest == null) {
        table = Object.create(null);
        table["<non-identifier-key>"] = table;
        delete table["<non-identifier-key>"];
        this._rest = table;
        rest = table;
      }
      hash = $.get$hashCode$(element) & 0x3ffffff;
      bucket = rest[hash];
      if (bucket == null)
        rest[hash] = [this._newLinkedCell$1(element)];
      else {
        if ($.LinkedHashSet__findBucketIndex(bucket, element) >= 0)
          return;
        bucket.push(this._newLinkedCell$1(element));
      }
    }
  },
  remove$1: function(_, object) {
    var rest, bucket, index;
    if (object !== "__proto__")
      return this._removeHashTableEntry$2(this._strings, object);
    else if (false)
      return this._removeHashTableEntry$2(this._nums, object);
    else {
      rest = this._rest;
      if (rest == null)
        return false;
      bucket = rest[C.JSString_methods.get$hashCode(object) & 0x3ffffff];
      index = $.LinkedHashSet__findBucketIndex(bucket, object);
      if (index < 0)
        return false;
      this._unlinkCell$1(bucket.splice(index, 1)[0]);
      return true;
    }
  },
  _addHashTableEntry$2: function(table, element) {
    if (table[element] != null)
      return;
    table[element] = this._newLinkedCell$1(element);
  },
  _removeHashTableEntry$2: function(table, element) {
    var cell;
    if (table == null)
      return false;
    cell = table[element];
    if (cell == null)
      return false;
    this._unlinkCell$1(cell);
    delete table[element];
    return true;
  },
  _newLinkedCell$1: function(element) {
    var cell, last;
    cell = new $.LinkedHashSetCell(element, null, null);
    if (this._first == null) {
      this._last = cell;
      this._first = cell;
    } else {
      last = this._last;
      cell._previous = last;
      last.set$_liblib1$_next(cell);
      this._last = cell;
    }
    this._liblib1$_length = this._liblib1$_length + 1;
    this._modifications = this._modifications + 1 & 67108863;
    return cell;
  },
  _unlinkCell$1: function(cell) {
    var previous, next;
    previous = cell.get$_previous();
    next = cell.get$_liblib1$_next();
    if (previous == null)
      this._first = next;
    else
      previous.set$_liblib1$_next(next);
    if (next == null)
      this._last = previous;
    else
      next.set$_previous(previous);
    this._liblib1$_length = this._liblib1$_length - 1;
    this._modifications = this._modifications + 1 & 67108863;
  },
  static: {
LinkedHashSet__findBucketIndex: function(bucket, element) {
  var $length, i;
  if (bucket == null)
    return -1;
  $length = bucket.length;
  for (i = 0; i < $length; ++i)
    if ($.$eq(bucket[i].get$_liblib1$_element(), element))
      return i;
  return -1;
}}

},

ListMixin: {"": "Object;",
  get$iterator: function(receiver) {
    return new $.ListIterator(receiver, this.get$length(receiver), 0, null);
  },
  elementAt$1: function(receiver, index) {
    return this.$index(receiver, index);
  },
  forEach$1: function(receiver, action) {
    var $length, i;
    $length = this.get$length(receiver);
    for (i = 0; i < $length; ++i) {
      action.call$1(this.$index(receiver, i));
      if ($length !== this.get$length(receiver))
        throw $.wrapException(new $.ConcurrentModificationError(receiver));
    }
  },
  get$isEmpty: function(receiver) {
    return this.get$length(receiver) === 0;
  },
  skip$1: function(receiver, count) {
    return $.SubListIterable$(receiver, count, null);
  },
  add$1: function(receiver, element) {
    var t1 = this.get$length(receiver);
    this.set$length(receiver, t1 + 1);
    this.$indexSet(receiver, t1, element);
  },
  toString$0: function(receiver) {
    var result, i, t1;
    for (i = 0; i < $.get$ListMixin__toStringList().length; ++i) {
      t1 = $.get$ListMixin__toStringList();
      if (i >= t1.length)
        throw $.ioore(i);
      if (t1[i] === receiver)
        return "[...]";
    }
    result = $.StringBuffer$("");
    try {
      $.get$ListMixin__toStringList().push(receiver);
      result.write$1("[");
      result.writeAll$2(receiver, ", ");
      result.write$1("]");
    } finally {
      t1 = $.get$ListMixin__toStringList();
      if (0 >= t1.length)
        throw $.ioore(0);
      t1.pop();
    }
    return result.get$_contents();
  },
  $isList: true,
  $asList: null
},

Maps_mapToString_closure: {"": "Closure;box_0,result_1",
  call$2: function(k, v) {
    var t1 = this.box_0;
    if (!t1.first_0)
      this.result_1.write$1(", ");
    t1.first_0 = false;
    t1 = this.result_1;
    t1.write$1(k);
    t1.write$1(": ");
    t1.write$1(v);
  }
},

ListQueue: {"": "IterableBase;_table,_head,_tail,_modificationCount",
  get$iterator: function(_) {
    return $._ListQueueIterator$(this);
  },
  forEach$1: function(_, action) {
    var modificationCount, i, t1;
    modificationCount = this._modificationCount;
    for (i = this._head; i !== this._tail; i = (i + 1 & this._table.length - 1) >>> 0) {
      t1 = this._table;
      if (i < 0 || i >= t1.length)
        throw $.ioore(i);
      action.call$1(t1[i]);
      if (modificationCount !== this._modificationCount)
        $.throwExpression(new $.ConcurrentModificationError(this));
    }
  },
  get$isEmpty: function(_) {
    return this._head === this._tail;
  },
  get$length: function(_) {
    return (this._tail - this._head & this._table.length - 1) >>> 0;
  },
  add$1: function(_, element) {
    this._add$1(element);
  },
  toString$0: function(_) {
    return $.IterableMixinWorkaround_toStringIterable(this, "{", "}");
  },
  addFirst$1: function(element) {
    var t1, t2;
    this._head = (this._head - 1 & this._table.length - 1) >>> 0;
    t1 = this._table;
    t2 = this._head;
    if (t2 < 0 || t2 >= t1.length)
      throw $.ioore(t2);
    t1[t2] = element;
    if (t2 === this._tail)
      this._grow$0();
    this._modificationCount = this._modificationCount + 1;
  },
  removeFirst$0: function() {
    var t1, t2, t3, result;
    if (this._head === this._tail)
      throw $.wrapException(new $.StateError("No elements"));
    this._modificationCount = this._modificationCount + 1;
    t1 = this._table;
    t2 = this._head;
    t3 = t1.length;
    if (t2 < 0 || t2 >= t3)
      throw $.ioore(t2);
    result = t1[t2];
    this._head = (t2 + 1 & t3 - 1) >>> 0;
    return result;
  },
  _add$1: function(element) {
    var t1, t2, t3;
    t1 = this._table;
    t2 = this._tail;
    t3 = t1.length;
    if (t2 < 0 || t2 >= t3)
      throw $.ioore(t2);
    t1[t2] = element;
    this._tail = (t2 + 1 & t3 - 1) >>> 0;
    if (this._head === this._tail)
      this._grow$0();
    this._modificationCount = this._modificationCount + 1;
  },
  _grow$0: function() {
    var newTable, t1, t2, split;
    newTable = $.List_List(this._table.length * 2);
    t1 = this._table;
    t2 = this._head;
    split = t1.length - t2;
    $.IterableMixinWorkaround_setRangeList(newTable, 0, split, t1, t2);
    t1 = this._head;
    t2 = this._table;
    $.IterableMixinWorkaround_setRangeList(newTable, split, split + t1, t2, 0);
    this._head = 0;
    this._tail = this._table.length;
    this._table = newTable;
  },
  ListQueue$1: function(initialCapacity) {
    var t1;
    if (true)
      initialCapacity = 8;
    else {
      t1 = C.JSNull_methods.$sub(initialCapacity, 1);
      if (typeof initialCapacity !== "number")
        throw initialCapacity.$and();
      if (typeof t1 !== "number")
        throw $.iae(t1);
      if (C.JSNull_methods.$and(initialCapacity, t1) !== 0)
        initialCapacity = $.ListQueue__nextPowerOf2(initialCapacity);
    }
    this._table = $.List_List(initialCapacity);
  },
  static: {
"": "ListQueue__INITIAL_CAPACITY",
ListQueue$: function(initialCapacity) {
  var t1 = new $.ListQueue(null, 0, 0, 0);
  t1.ListQueue$1(initialCapacity);
  return t1;
},

ListQueue__nextPowerOf2: function(number) {
  var nextNumber;
  number = C.JSNull_methods.$shl(number, 2) - 1;
  for (; true; number = nextNumber) {
    nextNumber = (number & number - 1) >>> 0;
    if (nextNumber === 0)
      return number;
  }
}}

},

_ListQueueIterator: {"": "Object;_queue,_end,_modificationCount,_liblib1$_position,_liblib1$_current",
  get$current: function() {
    return this._liblib1$_current;
  },
  moveNext$0: function() {
    var t1, t2, t3;
    t1 = this._queue;
    if (this._modificationCount !== t1._modificationCount)
      $.throwExpression(new $.ConcurrentModificationError(t1));
    t2 = this._liblib1$_position;
    if (t2 === this._end) {
      this._liblib1$_current = null;
      return false;
    }
    t3 = t1._table;
    if (t2 < 0 || t2 >= t3.length)
      throw $.ioore(t2);
    this._liblib1$_current = t3[t2];
    this._liblib1$_position = (this._liblib1$_position + 1 & t1._table.length - 1) >>> 0;
    return true;
  },
  static: {
_ListQueueIterator$: function(queue) {
  return new $._ListQueueIterator(queue, queue._tail, queue._modificationCount, queue._head, null);
}}

}}],
["dart.core", "dart:core", , {
Comparable_compare: function(a, b) {
  return $.compareTo$1$ns(a, b);
},

Error_safeToString: function(object) {
  var buffer, t1, i, codeUnit, charCodes, t2;
  if (typeof object === "number" && Math.floor(object) === object || typeof object === "number" || typeof object === "boolean" || null == object)
    return $.toString$0(object);
  if (typeof object === "string") {
    buffer = new $.StringBuffer("");
    buffer._contents = "\"";
    for (t1 = object.length, i = 0; i < t1; ++i) {
      codeUnit = C.JSString_methods.codeUnitAt$1(object, i);
      if (codeUnit <= 31)
        if (codeUnit === 10)
          buffer._contents = buffer._contents + "\\n";
        else if (codeUnit === 13)
          buffer._contents = buffer._contents + "\\r";
        else if (codeUnit === 9)
          buffer._contents = buffer._contents + "\\t";
        else {
          buffer._contents = buffer._contents + "\\x";
          if (codeUnit < 16)
            buffer._contents = buffer._contents + "0";
          else {
            buffer._contents = buffer._contents + "1";
            codeUnit -= 16;
          }
          charCodes = $.List_List$filled(1, codeUnit < 10 ? 48 + codeUnit : 87 + codeUnit);
          t2 = $.Primitives_stringFromCharCodes(charCodes);
          buffer._contents = buffer._contents + t2;
        }
      else if (codeUnit === 92)
        buffer._contents = buffer._contents + "\\\\";
      else if (codeUnit === 34)
        buffer._contents = buffer._contents + "\\\"";
      else {
        charCodes = $.List_List$filled(1, codeUnit);
        t2 = $.Primitives_stringFromCharCodes(charCodes);
        buffer._contents = buffer._contents + t2;
      }
    }
    buffer._contents = buffer._contents + "\"";
    return buffer._contents;
  }
  return "Instance of '" + $.Primitives_objectTypeName(object) + "'";
},

List_List: function($length) {
  var result;
  if ($length == null)
    return new Array(0);
  if (typeof $length !== "number" || Math.floor($length) !== $length || $length < 0)
    throw $.wrapException(new $.ArgumentError("Length must be a positive integer: " + $.S($length) + "."));
  result = new Array($length);
  result.fixed$length = true;
  return result;
},

List_List$filled: function($length, fill) {
  var result, t1, i;
  if ($length < 0)
    throw $.wrapException(new $.ArgumentError("Length must be a positive integer: " + $length + "."));
  result = $.Primitives_newFixedList($length);
  if ($length !== 0 && true)
    for (t1 = result.length, i = 0; i < t1; ++i)
      result[i] = fill;
  return result;
},

List_List$from: function(other, growable) {
  var list, t1, $length, fixedList, i;
  list = $.List_List(null);
  for (t1 = $.get$iterator$ax(other); t1.moveNext$0() === true;)
    list.push(t1.get$current());
  if (growable === true)
    return list;
  $length = list.length;
  fixedList = $.List_List($length);
  for (t1 = list.length, i = 0; i < $length; ++i) {
    if (i >= t1)
      throw $.ioore(i);
    fixedList[i] = list[i];
  }
  return fixedList;
},

List_List$generate: function($length, generator, growable) {
  var result, i, t1;
  if (growable) {
    result = [];
    C.JSArray_methods.set$length(result, $length);
  } else
    result = $.List_List($length);
  for (i = 0; i < $length; ++i) {
    t1 = generator.call$1(i);
    if (i >= result.length)
      throw $.ioore(i);
    result[i] = t1;
  }
  return result;
},

NoSuchMethodError_toString_closure: {"": "Closure;box_0",
  call$2: function(key, value) {
    var t1 = this.box_0;
    if ($.$gt$n(t1.i_1, 0))
      t1.sb_0.write$1(", ");
    t1.sb_0.write$1(key);
    t1.sb_0.write$1(": ");
    t1.sb_0.write$1($.Error_safeToString(value));
    t1.i_1 = $.$add$ns(t1.i_1, 1);
  }
},

Duration: {"": "Object;_duration<",
  $add: function(_, other) {
    return new $.Duration(0 + (this._duration + other.get$_duration()));
  },
  $sub: function(_, other) {
    return new $.Duration(0 + (this._duration - other.get$_duration()));
  },
  $mul: function(_, factor) {
    var t1, truncated;
    if (typeof factor !== "number")
      throw $.iae(factor);
    t1 = C.JSNumber_methods.roundToDouble$0(this._duration * factor);
    if (isNaN(t1))
      $.throwExpression(new $.UnsupportedError("NaN"));
    if (t1 == Infinity || t1 == -Infinity)
      $.throwExpression(new $.UnsupportedError("Infinity"));
    truncated = t1 < 0 ? Math.ceil(t1) : Math.floor(t1);
    return new $.Duration(0 + (truncated == -0.0 ? 0 : truncated));
  },
  $tdiv: function(_, quotient) {
    if (quotient === 0)
      throw $.wrapException(new $.IntegerDivisionByZeroException());
    return $.Duration$(0, 0, C.JSNumber_methods.$tdiv(this._duration, quotient), 0, 0, 0);
  },
  $lt: function(_, other) {
    return this._duration < other.get$_duration();
  },
  $gt: function(_, other) {
    return this._duration > other.get$_duration();
  },
  $le: function(_, other) {
    return this._duration <= other.get$_duration();
  },
  $ge: function(_, other) {
    return this._duration >= other.get$_duration();
  },
  $eq: function(_, other) {
    if (other == null)
      return false;
    if (typeof other !== "object" || other === null || !$.getInterceptor(other).$isDuration)
      return false;
    return this._duration === other._duration;
  },
  get$hashCode: function(_) {
    return this._duration & 0x1FFFFFFF;
  },
  compareTo$1: function(_, other) {
    return C.JSNumber_methods.compareTo$1(this._duration, other.get$_duration());
  },
  toString$0: function(_) {
    var t1, t2, twoDigitMinutes, twoDigitSeconds, sixDigitUs;
    t1 = new $.Duration_toString_twoDigits();
    t2 = this._duration;
    if (t2 < 0)
      return "-" + $.S($.Duration$(0, 0, -t2, 0, 0, 0));
    twoDigitMinutes = t1.call$1(C.JSNumber_methods.remainder$1(C.JSNumber_methods.$tdiv(t2, 60000000), 60));
    twoDigitSeconds = t1.call$1(C.JSNumber_methods.remainder$1(C.JSNumber_methods.$tdiv(t2, 1000000), 60));
    sixDigitUs = new $.Duration_toString_sixDigits().call$1(C.JSNumber_methods.remainder$1(t2, 1000000));
    return $.S(C.JSNumber_methods.$tdiv(t2, 3600000000)) + ":" + $.S(twoDigitMinutes) + ":" + $.S(twoDigitSeconds) + "." + $.S(sixDigitUs);
  },
  $isDuration: true,
  static: {
"": "Duration_MICROSECONDS_PER_MILLISECOND,Duration_MILLISECONDS_PER_SECOND,Duration_SECONDS_PER_MINUTE,Duration_MINUTES_PER_HOUR,Duration_HOURS_PER_DAY,Duration_MICROSECONDS_PER_SECOND,Duration_MICROSECONDS_PER_MINUTE,Duration_MICROSECONDS_PER_HOUR,Duration_MICROSECONDS_PER_DAY,Duration_MILLISECONDS_PER_MINUTE,Duration_MILLISECONDS_PER_HOUR,Duration_MILLISECONDS_PER_DAY,Duration_SECONDS_PER_HOUR,Duration_SECONDS_PER_DAY,Duration_MINUTES_PER_DAY,Duration_ZERO",
Duration$: function(days, hours, microseconds, milliseconds, minutes, seconds) {
  return new $.Duration(days * 86400000000 + hours * 3600000000 + minutes * 60000000 + seconds * 1000000 + milliseconds * 1000 + microseconds);
}}

},

Duration_toString_sixDigits: {"": "Closure;",
  call$1: function(n) {
    var t1 = $.getInterceptor$n(n);
    if (t1.$ge(n, 100000))
      return $.S(n);
    if (t1.$ge(n, 10000))
      return "0" + $.S(n);
    if (t1.$ge(n, 1000))
      return "00" + $.S(n);
    if (t1.$ge(n, 100))
      return "000" + $.S(n);
    if (t1.$gt(n, 10))
      return "0000" + $.S(n);
    return "00000" + $.S(n);
  }
},

Duration_toString_twoDigits: {"": "Closure;",
  call$1: function(n) {
    if ($.$ge$n(n, 10))
      return $.S(n);
    return "0" + $.S(n);
  }
},

Error: {"": "Object;", $isError: true},

NullThrownError: {"": "Error;",
  toString$0: function(_) {
    return "Throw of null.";
  }
},

ArgumentError: {"": "Error;message",
  toString$0: function(_) {
    var t1 = this.message;
    if (t1 != null)
      return "Illegal argument(s): " + $.S(t1);
    return "Illegal argument(s)";
  }
},

RangeError: {"": "ArgumentError;message",
  toString$0: function(_) {
    return "RangeError: " + $.S(this.message);
  }
},

UnsupportedError: {"": "Error;message",
  toString$0: function(_) {
    return "Unsupported operation: " + this.message;
  }
},

UnimplementedError: {"": "Error;message",
  toString$0: function(_) {
    var t1 = this.message;
    return t1 != null ? "UnimplementedError: " + t1 : "UnimplementedError";
  },
  $isError: true
},

StateError: {"": "Error;message",
  toString$0: function(_) {
    return "Bad state: " + this.message;
  }
},

ConcurrentModificationError: {"": "Error;modifiedObject",
  toString$0: function(_) {
    var t1 = this.modifiedObject;
    if (t1 == null)
      return "Concurrent modification during iteration.";
    return "Concurrent modification during iteration: " + $.Error_safeToString(t1) + ".";
  }
},

StackOverflowError: {"": "Object;",
  toString$0: function(_) {
    return "Stack Overflow";
  },
  $isError: true
},

CyclicInitializationError: {"": "Error;variableName",
  toString$0: function(_) {
    return "Reading static variable '" + this.variableName + "' during its initialization";
  }
},

_ExceptionImplementation: {"": "Object;message",
  toString$0: function(_) {
    var t1 = this.message;
    if (t1 == null)
      return "Exception";
    return "Exception: " + $.S(t1);
  },
  $isException: true
},

IntegerDivisionByZeroException: {"": "Object;",
  toString$0: function(_) {
    return "IntegerDivisionByZeroException";
  },
  $isException: true
},

Expando: {"": "Object;name",
  toString$0: function(_) {
    return "Expando:" + this.name;
  },
  $index: function(_, object) {
    var values = $.Primitives_getProperty(object, "expando$values");
    return values == null ? null : $.Primitives_getProperty(values, this._getKey$0());
  },
  $indexSet: function(_, object, value) {
    var values = $.Primitives_getProperty(object, "expando$values");
    if (values == null) {
      values = new $.Object();
      $.Primitives_setProperty(object, "expando$values", values);
    }
    $.Primitives_setProperty(values, this._getKey$0(), value);
  },
  _getKey$0: function() {
    var key, t1;
    key = $.Primitives_getProperty(this, "expando$key");
    if (key == null) {
      t1 = $.Expando__keyCount;
      $.Expando__keyCount = $.$add$ns(t1, 1);
      key = "expando$key$" + $.S(t1);
      $.Primitives_setProperty(this, "expando$key", key);
    }
    return key;
  },
  static: {
"": "Expando__KEY_PROPERTY_NAME,Expando__EXPANDO_PROPERTY_NAME,Expando__keyCount",
}

},

Iterator: {"": "Object;"},

Null: {"": "Object;",
  toString$0: function(_) {
    return "null";
  }
},

Object: {"": ";",
  $eq: function(_, other) {
    return this === other;
  },
  get$hashCode: function(_) {
    return $.Primitives_objectHashCode(this);
  },
  toString$0: function(_) {
    return $.Primitives_objectToString(this);
  }
},

StringBuffer: {"": "Object;_contents<",
  get$length: function(_) {
    return this._contents.length;
  },
  get$isEmpty: function(_) {
    return this._contents.length === 0;
  },
  write$1: function(obj) {
    if (typeof obj !== "string")
      return this.write$1$bailout(1, obj);
    this._contents = this._contents + obj;
  },
  write$1$bailout: function(state0, obj) {
    var str = typeof obj === "string" ? obj : $.S(obj);
    this._contents = this._contents + str;
  },
  writeAll$2: function(objects, separator) {
    var iterator, str;
    if (typeof separator !== "string")
      return this.writeAll$2$bailout(1, objects, separator);
    iterator = $.get$iterator$ax(objects);
    if (iterator.moveNext$0() !== true)
      return;
    if (C.JSString_methods.get$isEmpty(separator))
      do {
        str = iterator.get$current();
        str = typeof str === "string" ? str : $.S(str);
        this._contents = this._contents + str;
      } while (iterator.moveNext$0() === true);
    else {
      this.write$1(iterator.get$current());
      for (; iterator.moveNext$0() === true;) {
        this._contents = this._contents + separator;
        str = iterator.get$current();
        str = typeof str === "string" ? str : $.S(str);
        this._contents = this._contents + str;
      }
    }
  },
  writeAll$2$bailout: function(state0, objects, separator) {
    var iterator, str, t1;
    iterator = $.get$iterator$ax(objects);
    if (iterator.moveNext$0() !== true)
      return;
    if ($.get$isEmpty$asx(separator) === true)
      do {
        str = iterator.get$current();
        str = typeof str === "string" ? str : $.S(str);
        this._contents = this._contents + str;
      } while (iterator.moveNext$0() === true);
    else {
      this.write$1(iterator.get$current());
      for (t1 = typeof separator === "string"; iterator.moveNext$0() === true;) {
        str = t1 ? separator : $.S(separator);
        this._contents = this._contents + str;
        str = iterator.get$current();
        str = typeof str === "string" ? str : $.S(str);
        this._contents = this._contents + str;
      }
    }
  },
  toString$0: function(_) {
    return this._contents;
  },
  StringBuffer$1: function($content) {
    this._contents = $content;
  },
  static: {
StringBuffer$: function($content) {
  var t1 = new $.StringBuffer("");
  t1.StringBuffer$1($content);
  return t1;
}}

}}],
["dart.dom.html", "dart:html", , {
_convertNativeToDart_Window: function(win) {
  if (win == null)
    return;
  return $._DOMWindowCrossFrame__createSafe(win);
},

Window_animationFrame_closure: {"": "Closure;completer_0",
  call$1: function(time) {
    var t1 = this.completer_0;
    t1.complete$1(t1, time);
  }
},

Interceptor_ListMixin: {"": "Interceptor+ListMixin;", $isList: true, $asList: null},

Interceptor_ListMixin_ImmutableListMixin: {"": "Interceptor_ListMixin+ImmutableListMixin;", $asList: null, $isList: true},

_AttributeMap: {"": "Object;",
  forEach$1: function(_, f) {
    var t1, key;
    for (t1 = this.get$keys(), t1 = new $.ListIterator(t1, t1.length, 0, null); t1.moveNext$0();) {
      key = t1._liblib$_current;
      f.call$2(key, this.$index(this, key));
    }
  },
  get$keys: function() {
    var attributes, keys, len, i, t1;
    attributes = this._element.attributes;
    keys = $.List_List(null);
    for (len = attributes.length, i = 0; i < len; ++i) {
      if (i >= attributes.length)
        throw $.ioore(i);
      t1 = attributes[i];
      if (this._matches$1(t1))
        keys.push($.get$name$x(t1));
    }
    return keys;
  },
  get$values: function(_) {
    var attributes, values, len, i, t1;
    attributes = this._element.attributes;
    values = $.List_List(null);
    for (len = attributes.length, i = 0; i < len; ++i) {
      if (i >= attributes.length)
        throw $.ioore(i);
      t1 = attributes[i];
      if (this._matches$1(t1))
        values.push($.get$value$x(t1));
    }
    return values;
  },
  get$isEmpty: function(_) {
    return this.get$length(this) === 0;
  },
  $isMap: true,
  $asMap: function() {
    return [$.JSString, $.JSString];
  }
},

_ElementAttributeMap: {"": "_AttributeMap;_element",
  $index: function(_, key) {
    return this._element.getAttribute(key);
  },
  $indexSet: function(_, key, value) {
    this._element.setAttribute(key, value);
  },
  get$length: function(_) {
    return this.get$keys().length;
  },
  _matches$1: function(node) {
    return node.namespaceURI == null;
  }
},

_ElementCssClassSet: {"": "CssClassSetImpl;_element",
  readClasses$0: function() {
    var s, t1, trimmed;
    s = new $.LinkedHashSet(0, null, null, null, null, null, 0);
    for (t1 = this._element.className.split(" "), t1 = new $.ListIterator(t1, t1.length, 0, null); t1.moveNext$0();) {
      trimmed = $.trim$0$s(t1._liblib$_current);
      if (trimmed.length !== 0)
        s.add$1(s, trimmed);
    }
    return s;
  },
  writeClasses$1: function(s) {
    $.List_List$from(s, true);
    this._element.className = s.join$1(s, " ");
  }
},

_EventStream: {"": "Stream;_liblib2$_target,_eventType,_useCapture",
  listen$4$cancelOnError$onDone$onError: function(onData, cancelOnError, onDone, onError) {
    var t1 = new $._EventStreamSubscription(0, this._liblib2$_target, this._eventType, onData, this._useCapture);
    t1._tryResume$0();
    return t1;
  },
  listen$3$onDone$onError: function(onData, onDone, onError) {
    return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, onError);
  }
},

_EventStreamSubscription: {"": "StreamSubscription;_pauseCount,_liblib2$_target,_eventType,_onData,_useCapture",
  cancel$0: function() {
    if (this._liblib2$_target == null)
      return;
    this._unlisten$0();
    this._liblib2$_target = null;
    this._onData = null;
  },
  pause$1: function(_, resumeSignal) {
    if (this._liblib2$_target == null)
      return;
    this._pauseCount = this._pauseCount + 1;
    this._unlisten$0();
  },
  pause$0: function($receiver) {
    return this.pause$1($receiver, null);
  },
  resume$0: function() {
    if (this._liblib2$_target == null || this._pauseCount <= 0)
      return;
    this._pauseCount = this._pauseCount - 1;
    this._tryResume$0();
  },
  _tryResume$0: function() {
    var t1 = this._onData;
    if (t1 != null && this._pauseCount <= 0)
      $.$$dom_addEventListener$3$x(this._liblib2$_target, this._eventType, t1, this._useCapture);
  },
  _unlisten$0: function() {
    var t1 = this._onData;
    if (t1 != null)
      $.$$dom_removeEventListener$3$x(this._liblib2$_target, this._eventType, t1, this._useCapture);
  }
},

EventStreamProvider: {"": "Object;_eventType"},

ImmutableListMixin: {"": "Object;",
  get$iterator: function(receiver) {
    return $.FixedSizeListIterator$(receiver);
  },
  add$1: function(receiver, value) {
    throw $.wrapException(new $.UnsupportedError("Cannot add to immutable List."));
  },
  $isList: true,
  $asList: null
},

_DOMWindowCrossFrame: {"": "Object;_window",
  get$parent: function(_) {
    return $._DOMWindowCrossFrame__createSafe(this._window.parent);
  },
  static: {
_DOMWindowCrossFrame__createSafe: function(w) {
  if (w === window)
    return w;
  else
    return new $._DOMWindowCrossFrame(w);
}}

},

FixedSizeListIterator: {"": "Object;_array,_length,_position,_current",
  moveNext$0: function() {
    var t1, nextPosition;
    t1 = this._position;
    if (typeof t1 !== "number")
      return this.moveNext$0$bailout(1, t1);
    nextPosition = t1 + 1;
    t1 = this._length;
    if (nextPosition < t1) {
      t1 = this._array;
      if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !$.isJsIndexable(t1, t1[$.dispatchPropertyName])))
        return this.moveNext$0$bailout(2, t1, nextPosition);
      if (nextPosition >>> 0 !== nextPosition || nextPosition >= t1.length)
        throw $.ioore(nextPosition);
      this._current = t1[nextPosition];
      this._position = nextPosition;
      return true;
    }
    this._current = null;
    this._position = t1;
    return false;
  },
  moveNext$0$bailout: function(state0, t1, nextPosition) {
    switch (state0) {
      case 0:
        t1 = this._position;
      case 1:
        state0 = 0;
        nextPosition = $.$add$ns(t1, 1);
        t1 = this._length;
      case 2:
        if (state0 === 2 || state0 === 0 && $.$lt$n(nextPosition, t1))
          switch (state0) {
            case 0:
              t1 = this._array;
            case 2:
              state0 = 0;
              this._current = $.$index$asx(t1, nextPosition);
              this._position = nextPosition;
              return true;
          }
        this._current = null;
        this._position = t1;
        return false;
    }
  },
  get$current: function() {
    return this._current;
  },
  static: {
FixedSizeListIterator$: function(array) {
  return new $.FixedSizeListIterator(array, $.get$length$asx(array), -1, null);
}}

},

HtmlElement: {"": "Element;"},

AnchorElement: {"": "HtmlElement;name=,type%",
  toString$0: function(receiver) {
    return receiver.toString();
  }
},

AreaElement: {"": "HtmlElement;shape="},

Blob: {"": "Interceptor;type="},

ButtonElement: {"": "HtmlElement;name=,type%,value="},

CanvasElement: {"": "HtmlElement;height},width}",
  getContext$2: function(receiver, contextId, attrs) {
    return receiver.getContext(contextId);
  },
  getContext$1: function($receiver, contextId) {
    return this.getContext$2($receiver, contextId, null);
  }
},

CanvasRenderingContext: {"": "Interceptor;"},

CanvasRenderingContext2D: {"": "CanvasRenderingContext;",
  beginPath$0: function(receiver) {
    return receiver.beginPath();
  },
  clearRect$4: function(receiver, x, y, width, height) {
    return receiver.clearRect(x, y, width, height);
  },
  closePath$0: function(receiver) {
    return receiver.closePath();
  },
  fill$1: function(receiver, winding) {
    return receiver.fill(winding);
  },
  fill$0: function($receiver) {
    return $receiver.fill();
  },
  lineTo$2: function(receiver, x, y) {
    return receiver.lineTo(x, y);
  },
  moveTo$2: function(receiver, x, y) {
    return receiver.moveTo(x, y);
  },
  stroke$0: function(receiver) {
    return receiver.stroke();
  },
  setFillColorRgb$4: function(receiver, r, g, b, a) {
    receiver.fillStyle = "rgba(" + $.S(r) + ", " + $.S(g) + ", " + $.S(b) + ", " + $.S(a) + ")";
  },
  setStrokeColorRgb$4: function(receiver, r, g, b, a) {
    receiver.strokeStyle = "rgba(" + $.S(r) + ", " + $.S(g) + ", " + $.S(b) + ", " + $.S(a) + ")";
  },
  arc$6: function(receiver, x, y, radius, startAngle, endAngle, anticlockwise) {
    receiver.arc(x, y, radius, startAngle, endAngle, anticlockwise);
  }
},

CharacterData: {"": "Node;length="},

Document: {"": "Node;"},

DomException: {"": "Interceptor;",
  toString$0: function(receiver) {
    return receiver.toString();
  }
},

Element: {"": "Node;id=",
  get$classes: function(receiver) {
    return new $._ElementCssClassSet(receiver);
  },
  toString$0: function(receiver) {
    return receiver.localName;
  }
},

EmbedElement: {"": "HtmlElement;height},name=,type%,width}"},

Event: {"": "Interceptor;type=",
  preventDefault$0: function(receiver) {
    return receiver.preventDefault();
  }
},

EventTarget: {"": "Interceptor;",
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  }
},

FieldSetElement: {"": "HtmlElement;name=,type="},

FormElement: {"": "HtmlElement;length=,name="},

HtmlDocument: {"": "Document;body="},

HttpRequestProgressEvent: {"": "ProgressEvent;position="},

IFrameElement: {"": "HtmlElement;height},name=,width}"},

ImageElement: {"": "HtmlElement;height},width},x=,y="},

InputElement: {"": "HtmlElement;height},name=,type%,value=,width}"},

KeyboardEvent: {"": "UIEvent;",
  get$keyCode: function(receiver) {
    return receiver.keyCode;
  }
},

KeygenElement: {"": "HtmlElement;name=,type="},

LIElement: {"": "HtmlElement;type%,value="},

LinkElement: {"": "HtmlElement;type%"},

MapElement: {"": "HtmlElement;name="},

MediaElement: {"": "HtmlElement;"},

MetaElement: {"": "HtmlElement;name="},

MeterElement: {"": "HtmlElement;value="},

Node: {"": "EventTarget;parent:parentElement=",
  toString$0: function(receiver) {
    var t1 = receiver.nodeValue;
    return t1 == null ? $.Interceptor.prototype.toString$0.call(this, receiver) : t1;
  }
},

OListElement: {"": "HtmlElement;type%"},

ObjectElement: {"": "HtmlElement;height},name=,type%,width}"},

OptionElement: {"": "HtmlElement;value="},

OutputElement: {"": "HtmlElement;name=,type=,value="},

ParamElement: {"": "HtmlElement;name=,value="},

ProgressElement: {"": "HtmlElement;position=,value="},

ProgressEvent: {"": "Event;"},

ScriptElement: {"": "HtmlElement;type%"},

SelectElement: {"": "HtmlElement;length=,name=,type=,value="},

SourceElement: {"": "HtmlElement;type%"},

StorageEvent: {"": "Event;key="},

StyleElement: {"": "HtmlElement;type%"},

TextAreaElement: {"": "HtmlElement;name=,type=,value="},

UIEvent: {"": "Event;"},

VideoElement: {"": "MediaElement;height},width}"},

Window: {"": "EventTarget;",
  get$animationFrame: function(receiver) {
    var completer = new $._AsyncCompleter(new $._FutureImpl(0, $.get$_Zone__current(), null), false);
    completer._Completer$0();
    this._ensureRequestAnimationFrame$0(receiver);
    this._requestAnimationFrame$1(receiver, new $.Window_animationFrame_closure(completer));
    return completer.future;
  },
  _requestAnimationFrame$1: function(receiver, callback) {
    return receiver.requestAnimationFrame($.convertDartClosureToJS(callback, 1));
  },
  _ensureRequestAnimationFrame$0: function(receiver) {
    if (!!(receiver.requestAnimationFrame && receiver.cancelAnimationFrame))
      return;
      (function($this) {
   var vendors = ['ms', 'moz', 'webkit', 'o'];
   for (var i = 0; i < vendors.length && !$this.requestAnimationFrame; ++i) {
     $this.requestAnimationFrame = $this[vendors[i] + 'RequestAnimationFrame'];
     $this.cancelAnimationFrame =
         $this[vendors[i]+'CancelAnimationFrame'] ||
         $this[vendors[i]+'CancelRequestAnimationFrame'];
   }
   if ($this.requestAnimationFrame && $this.cancelAnimationFrame) return;
   $this.requestAnimationFrame = function(callback) {
      return window.setTimeout(function() {
        callback(Date.now());
      }, 16 /* 16ms ~= 60fps */);
   };
   $this.cancelAnimationFrame = function(id) { clearTimeout(id); }
  })(receiver);
  },
  get$parent: function(receiver) {
    return $._convertNativeToDart_Window(receiver.parent);
  },
  toString$0: function(receiver) {
    return receiver.toString();
  }
},

_Attr: {"": "Node;name=,value="},

_NamedNodeMap: {"": "Interceptor_ListMixin_ImmutableListMixin;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1 = receiver.length;
    if (index >>> 0 !== index || index >= t1)
      throw $.wrapException(new $.RangeError("value " + $.S(index) + " not in range 0.." + t1));
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    throw $.wrapException(new $.UnsupportedError("Cannot assign element of immutable List."));
  },
  set$length: function(receiver, value) {
    throw $.wrapException(new $.UnsupportedError("Cannot resize immutable List."));
  },
  elementAt$1: function(receiver, index) {
    if (index >>> 0 !== index || index >= receiver.length)
      throw $.ioore(index);
    return receiver[index];
  },
  $asList: function() {
    return [$.Node];
  },
  $asJavaScriptIndexingBehavior: null,
  $isList: true,
  $isJavaScriptIndexingBehavior: true
}}],
["dart.dom.svg", "dart:svg", , {
_AttributeClassSet: {"": "CssClassSetImpl;_liblib4$_element",
  readClasses$0: function() {
    var classname, s, t1, trimmed;
    classname = new $._ElementAttributeMap(this._liblib4$_element)._element.getAttribute("class");
    s = new $.LinkedHashSet(0, null, null, null, null, null, 0);
    if (classname == null)
      return s;
    for (t1 = classname.split(" "), t1 = new $.ListIterator(t1, t1.length, 0, null); t1.moveNext$0();) {
      trimmed = $.trim$0$s(t1._liblib$_current);
      if (trimmed.length !== 0)
        s.add$1(s, trimmed);
    }
    return s;
  },
  writeClasses$1: function(s) {
    new $._ElementAttributeMap(this._liblib4$_element)._element.setAttribute("class", s.join$1(s, " "));
  }
},

FEBlendElement: {"": "StyledElement;x=,y="},

FEColorMatrixElement: {"": "StyledElement;type=,x=,y="},

FEComponentTransferElement: {"": "StyledElement;x=,y="},

FECompositeElement: {"": "StyledElement;x=,y="},

FEConvolveMatrixElement: {"": "StyledElement;x=,y="},

FEDiffuseLightingElement: {"": "StyledElement;x=,y="},

FEDisplacementMapElement: {"": "StyledElement;x=,y="},

FEFloodElement: {"": "StyledElement;x=,y="},

FEGaussianBlurElement: {"": "StyledElement;x=,y="},

FEImageElement: {"": "StyledElement;x=,y="},

FEMergeElement: {"": "StyledElement;x=,y="},

FEMorphologyElement: {"": "StyledElement;x=,y="},

FEOffsetElement: {"": "StyledElement;x=,y="},

FEPointLightElement: {"": "SvgElement;x=,y="},

FESpecularLightingElement: {"": "StyledElement;x=,y="},

FESpotLightElement: {"": "SvgElement;x=,y="},

FETileElement: {"": "StyledElement;x=,y="},

FETurbulenceElement: {"": "StyledElement;type=,x=,y="},

FilterElement: {"": "StyledElement;x=,y="},

ForeignObjectElement: {"": "GraphicsElement;x=,y="},

GraphicsElement: {"": "StyledElement;"},

ImageElement0: {"": "GraphicsElement;x=,y="},

MaskElement: {"": "StyledElement;x=,y="},

PatternElement: {"": "StyledElement;x=,y="},

PolygonElement: {"": "GraphicsElement;points="},

PolylineElement: {"": "GraphicsElement;points="},

RectElement: {"": "GraphicsElement;x=,y="},

ScriptElement0: {"": "SvgElement;type%"},

StyleElement0: {"": "SvgElement;type%"},

StyledElement: {"": "SvgElement;"},

SvgElement: {"": "Element;",
  get$classes: function(receiver) {
    if (receiver._cssClassSet == null)
      receiver._cssClassSet = new $._AttributeClassSet(receiver);
    return receiver._cssClassSet;
  },
  get$id: function(receiver) {
    return receiver.id;
  }
},

SvgSvgElement: {"": "GraphicsElement;x=,y="},

TextContentElement: {"": "GraphicsElement;"},

TextPositioningElement: {"": "TextContentElement;x=,y="},

UseElement: {"": "GraphicsElement;x=,y="}}],
["dart.isolate", "dart:isolate", , {
_Isolate_port: function() {
  if ($.lazyPort == null)
    $.lazyPort = $.ReceivePortImpl$();
  return $.lazyPort;
},

ReceivePort: {"": "Object;"}}],
["dart.math", "dart:math", , {
min: function(a, b) {
  var t1;
  if (typeof a !== "number")
    return $.min$bailout(1, a, b);
  if (a > b)
    return b;
  if (a < b)
    return a;
  if (typeof b === "number") {
    if (typeof a === "number")
      if (a === 0)
        return (a + b) * a * b;
    if (a === 0)
      t1 = b === 0 ? 1 / b < 0 : b < 0;
    else
      t1 = false;
    if (t1 || isNaN(b))
      return b;
    return a;
  }
  return a;
},

min$bailout: function(state0, a, b) {
  var t1 = $.getInterceptor$n(a);
  if (t1.$gt(a, b))
    return b;
  if (t1.$lt(a, b))
    return a;
  if (typeof b === "number") {
    if (typeof a === "number")
      if (a === 0)
        return (a + b) * a * b;
    if (t1.$eq(a, 0))
      t1 = b === 0 ? 1 / b < 0 : b < 0;
    else
      t1 = false;
    if (t1 || isNaN(b))
      return b;
    return a;
  }
  return a;
},

max: function(a, b) {
  if (typeof a !== "number")
    return $.max$bailout(1, a, b);
  if (typeof b !== "number")
    return $.max$bailout(1, a, b);
  if (a > b)
    return a;
  if (a < b)
    return b;
  if (typeof b === "number") {
    if (typeof a === "number")
      if (a === 0)
        return a + b;
    if (C.JSDouble_methods.get$isNaN(b))
      return b;
    return a;
  }
  if (b === 0 && C.JSNumber_methods.get$isNegative(a))
    return b;
  return a;
},

max$bailout: function(state0, a, b) {
  var t1 = $.getInterceptor$n(a);
  if (t1.$gt(a, b))
    return a;
  if (t1.$lt(a, b))
    return b;
  if (typeof b === "number") {
    if (typeof a === "number")
      if (a === 0)
        return a + b;
    if (C.JSDouble_methods.get$isNaN(b))
      return b;
    return a;
  }
  if ($.$eq(b, 0) && t1.get$isNegative(a))
    return b;
  return a;
},

_Random: {"": "Object;"}}],
["dart.typed_data", "dart:typed_data", , {
TypedData_ListMixin: {"": "TypedData+ListMixin;", $isList: true, $asList: null},

TypedData_ListMixin_FixedLengthListMixin: {"": "TypedData_ListMixin+FixedLengthListMixin;", $asList: null},

TypedData_ListMixin0: {"": "TypedData+ListMixin;", $isList: true, $asList: null},

TypedData_ListMixin_FixedLengthListMixin0: {"": "TypedData_ListMixin0+FixedLengthListMixin;", $asList: null},

TypedData_ListMixin1: {"": "TypedData+ListMixin;", $isList: true, $asList: null},

TypedData_ListMixin_FixedLengthListMixin1: {"": "TypedData_ListMixin1+FixedLengthListMixin;", $asList: null},

TypedData_ListMixin2: {"": "TypedData+ListMixin;", $isList: true, $asList: null},

TypedData_ListMixin_FixedLengthListMixin2: {"": "TypedData_ListMixin2+FixedLengthListMixin;", $asList: null},

TypedData_ListMixin3: {"": "TypedData+ListMixin;", $isList: true, $asList: null},

TypedData_ListMixin_FixedLengthListMixin3: {"": "TypedData_ListMixin3+FixedLengthListMixin;", $asList: null},

TypedData_ListMixin4: {"": "TypedData+ListMixin;", $isList: true, $asList: null},

TypedData_ListMixin_FixedLengthListMixin4: {"": "TypedData_ListMixin4+FixedLengthListMixin;", $asList: null},

TypedData_ListMixin5: {"": "TypedData+ListMixin;", $isList: true, $asList: null},

TypedData_ListMixin_FixedLengthListMixin5: {"": "TypedData_ListMixin5+FixedLengthListMixin;", $asList: null},

TypedData_ListMixin6: {"": "TypedData+ListMixin;", $isList: true, $asList: null},

TypedData_ListMixin_FixedLengthListMixin6: {"": "TypedData_ListMixin6+FixedLengthListMixin;", $asList: null},

Int64List: {"": "TypedData;", $isList: true,
  $asList: function() {
    return [$.JSInt];
  },
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null,
  static: {
"": "Int64List_BYTES_PER_ELEMENT",
}

},

Uint64List: {"": "TypedData;", $isList: true,
  $asList: function() {
    return [$.JSInt];
  },
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null,
  static: {
"": "Uint64List_BYTES_PER_ELEMENT",
}

},

TypedData: {"": "Interceptor;",
  _invalidIndex$2: function(receiver, index, $length) {
    var t1 = $.getInterceptor$n(index);
    if (t1.$lt(index, 0) || t1.$ge(index, $length))
      throw $.wrapException(new $.RangeError("value " + $.S(index) + " not in range 0.." + $length));
    else
      throw $.wrapException(new $.ArgumentError("Invalid list index " + $.S(index)));
  }
},

Float32List: {"": "TypedData_ListMixin_FixedLengthListMixin;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1;
    if (typeof index !== "number")
      return this.$$index$bailout(1, index, receiver);
    t1 = receiver.length;
    if (index >>> 0 != index || index >= t1)
      this._invalidIndex$2(receiver, index, t1);
    return receiver[index];
  },
  $$index$bailout: function(state0, index, receiver) {
    var t1 = receiver.length;
    if (index >>> 0 != index || $.$ge$n(index, t1))
      this._invalidIndex$2(receiver, index, t1);
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    var t1;
    if (typeof index !== "number")
      return this.$$indexSet$bailout(1, index, value, receiver);
    t1 = receiver.length;
    if (index >>> 0 != index || index >= t1)
      this._invalidIndex$2(receiver, index, t1);
    receiver[index] = value;
  },
  $$indexSet$bailout: function(state0, index, value, receiver) {
    var t1 = receiver.length;
    if (index >>> 0 != index || $.$ge$n(index, t1))
      this._invalidIndex$2(receiver, index, t1);
    receiver[index] = value;
  },
  $asList: function() {
    return [$.JSDouble];
  },
  $asJavaScriptIndexingBehavior: null,
  $isList: true,
  $isJavaScriptIndexingBehavior: true
},

Float64List: {"": "TypedData_ListMixin_FixedLengthListMixin0;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1;
    if (typeof index !== "number")
      return this.$$index$bailout(1, index, receiver);
    t1 = receiver.length;
    if (index >>> 0 != index || index >= t1)
      this._invalidIndex$2(receiver, index, t1);
    return receiver[index];
  },
  $$index$bailout: function(state0, index, receiver) {
    var t1 = receiver.length;
    if (index >>> 0 != index || $.$ge$n(index, t1))
      this._invalidIndex$2(receiver, index, t1);
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    var t1;
    if (typeof index !== "number")
      return this.$$indexSet$bailout(1, index, value, receiver);
    t1 = receiver.length;
    if (index >>> 0 != index || index >= t1)
      this._invalidIndex$2(receiver, index, t1);
    receiver[index] = value;
  },
  $$indexSet$bailout: function(state0, index, value, receiver) {
    var t1 = receiver.length;
    if (index >>> 0 != index || $.$ge$n(index, t1))
      this._invalidIndex$2(receiver, index, t1);
    receiver[index] = value;
  },
  $asList: function() {
    return [$.JSDouble];
  },
  $asJavaScriptIndexingBehavior: null,
  $isList: true,
  $isJavaScriptIndexingBehavior: true
},

Int16List: {"": "TypedData_ListMixin_FixedLengthListMixin1;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1;
    if (typeof index !== "number")
      return this.$$index$bailout(1, index, receiver);
    t1 = receiver.length;
    if (index >>> 0 != index || index >= t1)
      this._invalidIndex$2(receiver, index, t1);
    return receiver[index];
  },
  $$index$bailout: function(state0, index, receiver) {
    var t1 = receiver.length;
    if (index >>> 0 != index || $.$ge$n(index, t1))
      this._invalidIndex$2(receiver, index, t1);
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    var t1;
    if (typeof index !== "number")
      return this.$$indexSet$bailout(1, index, value, receiver);
    t1 = receiver.length;
    if (index >>> 0 != index || index >= t1)
      this._invalidIndex$2(receiver, index, t1);
    receiver[index] = value;
  },
  $$indexSet$bailout: function(state0, index, value, receiver) {
    var t1 = receiver.length;
    if (index >>> 0 != index || $.$ge$n(index, t1))
      this._invalidIndex$2(receiver, index, t1);
    receiver[index] = value;
  },
  $asList: function() {
    return [$.JSInt];
  },
  $asJavaScriptIndexingBehavior: null,
  $isList: true,
  $isJavaScriptIndexingBehavior: true
},

Int32List: {"": "TypedData_ListMixin_FixedLengthListMixin2;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1;
    if (typeof index !== "number")
      return this.$$index$bailout(1, index, receiver);
    t1 = receiver.length;
    if (index >>> 0 != index || index >= t1)
      this._invalidIndex$2(receiver, index, t1);
    return receiver[index];
  },
  $$index$bailout: function(state0, index, receiver) {
    var t1 = receiver.length;
    if (index >>> 0 != index || $.$ge$n(index, t1))
      this._invalidIndex$2(receiver, index, t1);
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    var t1;
    if (typeof index !== "number")
      return this.$$indexSet$bailout(1, index, value, receiver);
    t1 = receiver.length;
    if (index >>> 0 != index || index >= t1)
      this._invalidIndex$2(receiver, index, t1);
    receiver[index] = value;
  },
  $$indexSet$bailout: function(state0, index, value, receiver) {
    var t1 = receiver.length;
    if (index >>> 0 != index || $.$ge$n(index, t1))
      this._invalidIndex$2(receiver, index, t1);
    receiver[index] = value;
  },
  $asList: function() {
    return [$.JSInt];
  },
  $asJavaScriptIndexingBehavior: null,
  $isList: true,
  $isJavaScriptIndexingBehavior: true
},

Int8List: {"": "TypedData_ListMixin_FixedLengthListMixin3;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1;
    if (typeof index !== "number")
      return this.$$index$bailout(1, index, receiver);
    t1 = receiver.length;
    if (index >>> 0 != index || index >= t1)
      this._invalidIndex$2(receiver, index, t1);
    return receiver[index];
  },
  $$index$bailout: function(state0, index, receiver) {
    var t1 = receiver.length;
    if (index >>> 0 != index || $.$ge$n(index, t1))
      this._invalidIndex$2(receiver, index, t1);
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    var t1;
    if (typeof index !== "number")
      return this.$$indexSet$bailout(1, index, value, receiver);
    t1 = receiver.length;
    if (index >>> 0 != index || index >= t1)
      this._invalidIndex$2(receiver, index, t1);
    receiver[index] = value;
  },
  $$indexSet$bailout: function(state0, index, value, receiver) {
    var t1 = receiver.length;
    if (index >>> 0 != index || $.$ge$n(index, t1))
      this._invalidIndex$2(receiver, index, t1);
    receiver[index] = value;
  },
  $asList: function() {
    return [$.JSInt];
  },
  $asJavaScriptIndexingBehavior: null,
  $isList: true,
  $isJavaScriptIndexingBehavior: true
},

Uint16List: {"": "TypedData_ListMixin_FixedLengthListMixin4;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1;
    if (typeof index !== "number")
      return this.$$index$bailout(1, index, receiver);
    t1 = receiver.length;
    if (index >>> 0 != index || index >= t1)
      this._invalidIndex$2(receiver, index, t1);
    return receiver[index];
  },
  $$index$bailout: function(state0, index, receiver) {
    var t1 = receiver.length;
    if (index >>> 0 != index || $.$ge$n(index, t1))
      this._invalidIndex$2(receiver, index, t1);
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    var t1;
    if (typeof index !== "number")
      return this.$$indexSet$bailout(1, index, value, receiver);
    t1 = receiver.length;
    if (index >>> 0 != index || index >= t1)
      this._invalidIndex$2(receiver, index, t1);
    receiver[index] = value;
  },
  $$indexSet$bailout: function(state0, index, value, receiver) {
    var t1 = receiver.length;
    if (index >>> 0 != index || $.$ge$n(index, t1))
      this._invalidIndex$2(receiver, index, t1);
    receiver[index] = value;
  },
  $asList: function() {
    return [$.JSInt];
  },
  $asJavaScriptIndexingBehavior: null,
  $isList: true,
  $isJavaScriptIndexingBehavior: true
},

Uint32List: {"": "TypedData_ListMixin_FixedLengthListMixin5;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1;
    if (typeof index !== "number")
      return this.$$index$bailout(1, index, receiver);
    t1 = receiver.length;
    if (index >>> 0 != index || index >= t1)
      this._invalidIndex$2(receiver, index, t1);
    return receiver[index];
  },
  $$index$bailout: function(state0, index, receiver) {
    var t1 = receiver.length;
    if (index >>> 0 != index || $.$ge$n(index, t1))
      this._invalidIndex$2(receiver, index, t1);
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    var t1;
    if (typeof index !== "number")
      return this.$$indexSet$bailout(1, index, value, receiver);
    t1 = receiver.length;
    if (index >>> 0 != index || index >= t1)
      this._invalidIndex$2(receiver, index, t1);
    receiver[index] = value;
  },
  $$indexSet$bailout: function(state0, index, value, receiver) {
    var t1 = receiver.length;
    if (index >>> 0 != index || $.$ge$n(index, t1))
      this._invalidIndex$2(receiver, index, t1);
    receiver[index] = value;
  },
  $asList: function() {
    return [$.JSInt];
  },
  $asJavaScriptIndexingBehavior: null,
  $isList: true,
  $isJavaScriptIndexingBehavior: true
},

Uint8ClampedList: {"": "Uint8List;",
  $index: function(receiver, index) {
    var t1;
    if (typeof index !== "number")
      return this.$$index$bailout1(1, index, receiver);
    t1 = receiver.length;
    if (index >>> 0 != index || index >= t1)
      this._invalidIndex$2(receiver, index, t1);
    return receiver[index];
  },
  $$index$bailout1: function(state0, index, receiver) {
    var t1 = receiver.length;
    if (index >>> 0 != index || $.$ge$n(index, t1))
      this._invalidIndex$2(receiver, index, t1);
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    var t1;
    if (typeof index !== "number")
      return this.$$indexSet$bailout1(1, index, value, receiver);
    t1 = receiver.length;
    if (index >>> 0 != index || index >= t1)
      this._invalidIndex$2(receiver, index, t1);
    receiver[index] = value;
  },
  $$indexSet$bailout1: function(state0, index, value, receiver) {
    var t1 = receiver.length;
    if (index >>> 0 != index || $.$ge$n(index, t1))
      this._invalidIndex$2(receiver, index, t1);
    receiver[index] = value;
  }
},

Uint8List: {"": "TypedData_ListMixin_FixedLengthListMixin6;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1;
    if (typeof index !== "number")
      return this.$$index$bailout(1, index, receiver);
    t1 = receiver.length;
    if (index >>> 0 != index || index >= t1)
      this._invalidIndex$2(receiver, index, t1);
    return receiver[index];
  },
  $$index$bailout: function(state0, index, receiver) {
    var t1 = receiver.length;
    if (index >>> 0 != index || $.$ge$n(index, t1))
      this._invalidIndex$2(receiver, index, t1);
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    var t1;
    if (typeof index !== "number")
      return this.$$indexSet$bailout(1, index, value, receiver);
    t1 = receiver.length;
    if (index >>> 0 != index || index >= t1)
      this._invalidIndex$2(receiver, index, t1);
    receiver[index] = value;
  },
  $$indexSet$bailout: function(state0, index, value, receiver) {
    var t1 = receiver.length;
    if (index >>> 0 != index || $.$ge$n(index, t1))
      this._invalidIndex$2(receiver, index, t1);
    receiver[index] = value;
  },
  $asList: function() {
    return [$.JSInt];
  },
  $asJavaScriptIndexingBehavior: null,
  $isList: true,
  $isJavaScriptIndexingBehavior: true
}}],
["html_common", "dart:html_common", , {
CssClassSetImpl: {"": "Object;",
  toString$0: function(_) {
    var t1 = this.readClasses$0();
    return t1.join$1(t1, " ");
  },
  get$iterator: function(_) {
    var t1 = this.readClasses$0();
    t1 = new $.LinkedHashSetIterator(t1, t1._modifications, null, null);
    t1._cell = t1._set._first;
    return t1;
  },
  forEach$1: function(_, f) {
    var t1 = this.readClasses$0();
    t1.forEach$1(t1, f);
  },
  get$isEmpty: function(_) {
    return this.readClasses$0()._liblib1$_length === 0;
  },
  get$length: function(_) {
    return this.readClasses$0()._liblib1$_length;
  },
  add$1: function(_, value) {
    var s = this.readClasses$0();
    new $.CssClassSetImpl_add_closure(value).call$1(s);
    this.writeClasses$1(s);
  },
  remove$1: function(_, value) {
    var s, result;
    s = this.readClasses$0();
    result = s.remove$1(s, value);
    this.writeClasses$1(s);
    return result;
  },
  skip$1: function(_, n) {
    return $.SkipIterable$(this.readClasses$0(), n);
  }
},

CssClassSetImpl_add_closure: {"": "Closure;value_0",
  call$1: function(s) {
    return $.add$1$ax(s, this.value_0);
  }
}}],
["vector_math", "package:vector_math/vector_math.dart", , {
Matrix2: {"": "Object;storage<",
  setValues$4: function(arg0, arg1, arg2, arg3) {
    var t1 = this.storage;
    if (3 >= t1.length)
      throw $.ioore(3);
    t1[3] = arg3;
    t1[2] = arg2;
    t1[1] = arg1;
    t1[0] = arg0;
    return this;
  },
  setFrom$1: function(arg) {
    var t1, t2;
    t1 = this.storage;
    t2 = arg.get$storage();
    if (3 >= t2.length)
      throw $.ioore(3);
    t2 = t2[3];
    if (3 >= t1.length)
      throw $.ioore(3);
    t1[3] = t2;
    t2 = arg.get$storage();
    if (2 >= t2.length)
      throw $.ioore(2);
    t1[2] = t2[2];
    t2 = arg.get$storage();
    if (1 >= t2.length)
      throw $.ioore(1);
    t1[1] = t2[1];
    t2 = arg.get$storage();
    if (0 >= t2.length)
      throw $.ioore(0);
    t1[0] = t2[0];
    return this;
  },
  toString$0: function(_) {
    return "[0] " + $.S(this.getRow$1(0)) + "\n[1] " + $.S(this.getRow$1(1)) + "\n";
  },
  get$dimension: function() {
    return 2;
  },
  $index: function(_, i) {
    var t1 = this.storage;
    if (i >>> 0 !== i || i >= t1.length)
      throw $.ioore(i);
    return t1[i];
  },
  $indexSet: function(_, i, v) {
    var t1 = this.storage;
    if (i >>> 0 !== i || i >= t1.length)
      throw $.ioore(i);
    t1[i] = v;
  },
  getRow$1: function(row) {
    var r, t1, t2, t3, t4, t5;
    r = new $.Vector2(new Float32Array(2));
    t1 = r.storage;
    t2 = this.storage;
    t3 = 0 + row;
    t4 = t2.length;
    if (t3 < 0 || t3 >= t4)
      throw $.ioore(t3);
    t3 = t2[t3];
    t5 = t1.length;
    if (0 >= t5)
      throw $.ioore(0);
    t1[0] = t3;
    t3 = 2 + row;
    if (t3 < 0 || t3 >= t4)
      throw $.ioore(t3);
    t3 = t2[t3];
    if (1 >= t5)
      throw $.ioore(1);
    t1[1] = t3;
    return r;
  },
  _mul_scale$1: function(arg) {
    var r, t1, t2, t3;
    r = new $.Matrix2(new Float32Array(4));
    t1 = r.storage;
    t2 = this.storage;
    if (3 >= t2.length)
      throw $.ioore(3);
    t3 = t2[3];
    if (3 >= t1.length)
      throw $.ioore(3);
    t1[3] = t3 * arg;
    t1[2] = t2[2] * arg;
    t1[1] = t2[1] * arg;
    t1[0] = t2[0] * arg;
    return r;
  },
  _mul_matrix$1: function(arg) {
    var r, t1, t2, t3, t4, t5, t6, t7, t8, t9;
    r = new $.Matrix2(new Float32Array(4));
    t1 = r.storage;
    t2 = this.storage;
    t3 = t2.length;
    if (0 >= t3)
      throw $.ioore(0);
    t4 = t2[0];
    t5 = arg.get$storage();
    t6 = t5.length;
    if (0 >= t6)
      throw $.ioore(0);
    t7 = t5[0];
    if (2 >= t3)
      throw $.ioore(2);
    t8 = t2[2];
    if (1 >= t6)
      throw $.ioore(1);
    t5 = t5[1];
    t6 = t1.length;
    if (0 >= t6)
      throw $.ioore(0);
    t1[0] = t4 * t7 + t8 * t5;
    t5 = t2[0];
    t8 = arg.get$storage();
    t7 = t8.length;
    if (2 >= t7)
      throw $.ioore(2);
    t4 = t8[2];
    t9 = t2[2];
    if (3 >= t7)
      throw $.ioore(3);
    t8 = t8[3];
    if (2 >= t6)
      throw $.ioore(2);
    t1[2] = t5 * t4 + t9 * t8;
    t8 = t2[1];
    t9 = arg.get$storage();
    t4 = t9.length;
    if (0 >= t4)
      throw $.ioore(0);
    t5 = t9[0];
    if (3 >= t3)
      throw $.ioore(3);
    t3 = t2[3];
    if (1 >= t4)
      throw $.ioore(1);
    t1[1] = t8 * t5 + t3 * t9[1];
    t9 = t2[1];
    t3 = arg.get$storage();
    t5 = t3.length;
    if (2 >= t5)
      throw $.ioore(2);
    t8 = t3[2];
    t2 = t2[3];
    if (3 >= t5)
      throw $.ioore(3);
    t3 = t3[3];
    if (3 >= t6)
      throw $.ioore(3);
    t1[3] = t9 * t8 + t2 * t3;
    return r;
  },
  _mul_vector$1: function(arg) {
    var r, t1, t2, t3, t4, t5, t6, t7;
    r = new $.Vector2(new Float32Array(2));
    t1 = r.storage;
    t2 = this.storage;
    t3 = t2.length;
    if (1 >= t3)
      throw $.ioore(1);
    t4 = t2[1];
    t5 = arg.storage;
    t6 = t5.length;
    if (0 >= t6)
      throw $.ioore(0);
    t7 = t5[0];
    if (3 >= t3)
      throw $.ioore(3);
    t3 = t2[3];
    if (1 >= t6)
      throw $.ioore(1);
    t6 = t5[1];
    if (1 >= t1.length)
      throw $.ioore(1);
    t1[1] = t4 * t7 + t3 * t6;
    t1[0] = t2[0] * t5[0] + t2[2] * t5[1];
    return r;
  },
  $mul: function(_, arg) {
    if (typeof arg === "number")
      return this._mul_scale$1(arg);
    if (typeof arg === "object" && arg !== null && !!$.getInterceptor(arg).$isVector2)
      return this._mul_vector$1(arg);
    if (2 === arg.get$dimension())
      return this._mul_matrix$1(arg);
    throw $.wrapException(new $.ArgumentError(arg));
  },
  $add: function(_, arg) {
    var r, t1, t2, t3, t4, t5, t6;
    r = new $.Matrix2(new Float32Array(4));
    t1 = r.storage;
    t2 = this.storage;
    t3 = t2.length;
    if (0 >= t3)
      throw $.ioore(0);
    t4 = t2[0];
    t5 = arg.get$storage();
    if (0 >= t5.length)
      throw $.ioore(0);
    t5 = t5[0];
    t6 = t1.length;
    if (0 >= t6)
      throw $.ioore(0);
    t1[0] = t4 + t5;
    if (1 >= t3)
      throw $.ioore(1);
    t5 = t2[1];
    t4 = arg.get$storage();
    if (1 >= t4.length)
      throw $.ioore(1);
    t4 = t4[1];
    if (1 >= t6)
      throw $.ioore(1);
    t1[1] = t5 + t4;
    if (2 >= t3)
      throw $.ioore(2);
    t4 = t2[2];
    t5 = arg.get$storage();
    if (2 >= t5.length)
      throw $.ioore(2);
    t5 = t5[2];
    if (2 >= t6)
      throw $.ioore(2);
    t1[2] = t4 + t5;
    if (3 >= t3)
      throw $.ioore(3);
    t2 = t2[3];
    t3 = arg.get$storage();
    if (3 >= t3.length)
      throw $.ioore(3);
    t3 = t3[3];
    if (3 >= t6)
      throw $.ioore(3);
    t1[3] = t2 + t3;
    return r;
  },
  $sub: function(_, arg) {
    var r, t1, t2, t3, t4, t5, t6;
    r = new $.Matrix2(new Float32Array(4));
    t1 = r.storage;
    t2 = this.storage;
    t3 = t2.length;
    if (0 >= t3)
      throw $.ioore(0);
    t4 = t2[0];
    t5 = arg.get$storage();
    if (0 >= t5.length)
      throw $.ioore(0);
    t5 = t5[0];
    t6 = t1.length;
    if (0 >= t6)
      throw $.ioore(0);
    t1[0] = t4 - t5;
    if (1 >= t3)
      throw $.ioore(1);
    t5 = t2[1];
    t4 = arg.get$storage();
    if (1 >= t4.length)
      throw $.ioore(1);
    t4 = t4[1];
    if (1 >= t6)
      throw $.ioore(1);
    t1[1] = t5 - t4;
    if (2 >= t3)
      throw $.ioore(2);
    t4 = t2[2];
    t5 = arg.get$storage();
    if (2 >= t5.length)
      throw $.ioore(2);
    t5 = t5[2];
    if (2 >= t6)
      throw $.ioore(2);
    t1[2] = t4 - t5;
    if (3 >= t3)
      throw $.ioore(3);
    t2 = t2[3];
    t3 = arg.get$storage();
    if (3 >= t3.length)
      throw $.ioore(3);
    t3 = t3[3];
    if (3 >= t6)
      throw $.ioore(3);
    t1[3] = t2 - t3;
    return r;
  },
  $negate: function(_) {
    var r, t1, t2, t3, t4, t5;
    r = new $.Matrix2(new Float32Array(4));
    t1 = this.storage;
    t2 = t1.length;
    if (0 >= t2)
      throw $.ioore(0);
    t3 = t1[0];
    t4 = r.storage;
    t5 = t4.length;
    if (0 >= t5)
      throw $.ioore(0);
    t4[0] = -t3;
    if (1 >= t2)
      throw $.ioore(1);
    t1 = t1[1];
    if (1 >= t5)
      throw $.ioore(1);
    t4[1] = -t1;
    return r;
  },
  transposed$0: function() {
    var r, t1, t2, t3, t4, t5;
    r = new $.Matrix2(new Float32Array(4));
    t1 = r.storage;
    t2 = this.storage;
    t3 = t2.length;
    if (0 >= t3)
      throw $.ioore(0);
    t4 = t2[0];
    t5 = t1.length;
    if (0 >= t5)
      throw $.ioore(0);
    t1[0] = t4;
    if (2 >= t3)
      throw $.ioore(2);
    t4 = t2[2];
    if (1 >= t5)
      throw $.ioore(1);
    t1[1] = t4;
    t4 = t2[1];
    if (2 >= t5)
      throw $.ioore(2);
    t1[2] = t4;
    if (3 >= t3)
      throw $.ioore(3);
    t2 = t2[3];
    if (3 >= t5)
      throw $.ioore(3);
    t1[3] = t2;
    return r;
  },
  invert$0: function() {
    var t1, t2, t3, det, invDet;
    t1 = this.storage;
    t2 = t1.length;
    if (0 >= t2)
      throw $.ioore(0);
    t3 = t1[0];
    if (3 >= t2)
      throw $.ioore(3);
    t2 = t1[3];
    det = t3 * t2 - t1[1] * t1[2];
    if (det === 0)
      return 0;
    invDet = 1 / det;
    t1[0] = t2 * invDet;
    t1[1] = -t1[1] * invDet;
    t1[2] = -t1[2] * invDet;
    t1[3] = t3 * invDet;
    return det;
  },
  setRotation$1: function(radians) {
    var t1, c, s, t2;
    t1 = typeof radians !== "number";
    if (t1)
      $.throwExpression(new $.ArgumentError(radians));
    c = Math.cos(radians);
    if (t1)
      $.throwExpression(new $.ArgumentError(radians));
    s = Math.sin(radians);
    t1 = this.storage;
    t2 = t1.length;
    if (0 >= t2)
      throw $.ioore(0);
    t1[0] = c;
    if (1 >= t2)
      throw $.ioore(1);
    t1[1] = s;
    if (2 >= t2)
      throw $.ioore(2);
    t1[2] = -s;
    if (3 >= t2)
      throw $.ioore(3);
    t1[3] = c;
  },
  add$1: function(_, o) {
    var t1, t2, t3, t4;
    t1 = this.storage;
    t2 = t1.length;
    if (0 >= t2)
      throw $.ioore(0);
    t3 = t1[0];
    t4 = o.get$storage();
    if (0 >= t4.length)
      throw $.ioore(0);
    t1[0] = t3 + t4[0];
    if (1 >= t2)
      throw $.ioore(1);
    t4 = t1[1];
    t3 = o.get$storage();
    if (1 >= t3.length)
      throw $.ioore(1);
    t1[1] = t4 + t3[1];
    if (2 >= t2)
      throw $.ioore(2);
    t3 = t1[2];
    t4 = o.get$storage();
    if (2 >= t4.length)
      throw $.ioore(2);
    t1[2] = t3 + t4[2];
    if (3 >= t2)
      throw $.ioore(3);
    t2 = t1[3];
    t4 = o.get$storage();
    if (3 >= t4.length)
      throw $.ioore(3);
    t1[3] = t2 + t4[3];
    return this;
  },
  transform$1: function(_, arg) {
    var t1, t2, t3, t4, t5, t6, t7, t8;
    t1 = this.storage;
    t2 = t1.length;
    if (0 >= t2)
      throw $.ioore(0);
    t3 = t1[0];
    t4 = arg.storage;
    t5 = t4.length;
    if (0 >= t5)
      throw $.ioore(0);
    t6 = t4[0];
    if (2 >= t2)
      throw $.ioore(2);
    t7 = t1[2];
    if (1 >= t5)
      throw $.ioore(1);
    t5 = t4[1];
    t8 = t1[1];
    if (3 >= t2)
      throw $.ioore(3);
    t1 = t1[3];
    t4[0] = t3 * t6 + t7 * t5;
    t4[1] = t8 * t6 + t1 * t5;
    return arg;
  },
  transformed$2: function(arg, out) {
    var t1, t2;
    t1 = out.storage;
    t2 = arg.get$storage();
    if (1 >= t2.length)
      throw $.ioore(1);
    t2 = t2[1];
    if (1 >= t1.length)
      throw $.ioore(1);
    t1[1] = t2;
    t2 = arg.get$storage();
    if (0 >= t2.length)
      throw $.ioore(0);
    t1[0] = t2[0];
    return this.transform$1(this, out);
  }
},

Vector2: {"": "Object;storage<",
  setValues$2: function(x_, y_) {
    var t1, t2;
    t1 = this.storage;
    t2 = t1.length;
    if (0 >= t2)
      throw $.ioore(0);
    t1[0] = x_;
    if (1 >= t2)
      throw $.ioore(1);
    t1[1] = y_;
    return this;
  },
  setZero$0: function() {
    var t1, t2;
    t1 = this.storage;
    t2 = t1.length;
    if (0 >= t2)
      throw $.ioore(0);
    t1[0] = 0;
    if (1 >= t2)
      throw $.ioore(1);
    t1[1] = 0;
    return this;
  },
  setFrom$1: function(other) {
    var t1, t2;
    t1 = this.storage;
    t2 = other.get$storage();
    if (1 >= t2.length)
      throw $.ioore(1);
    t2 = t2[1];
    if (1 >= t1.length)
      throw $.ioore(1);
    t1[1] = t2;
    t2 = other.get$storage();
    if (0 >= t2.length)
      throw $.ioore(0);
    t1[0] = t2[0];
    return this;
  },
  toString$0: function(_) {
    var t1, t2;
    t1 = this.storage;
    if (0 >= t1.length)
      throw $.ioore(0);
    t2 = "[" + $.S(t1[0]) + ",";
    if (1 >= t1.length)
      throw $.ioore(1);
    return t2 + $.S(t1[1]) + "]";
  },
  $negate: function(_) {
    var t1, t2, t3, t4, t5;
    t1 = this.storage;
    t2 = t1.length;
    if (0 >= t2)
      throw $.ioore(0);
    t3 = t1[0];
    if (1 >= t2)
      throw $.ioore(1);
    t1 = t1[1];
    t2 = new $.Vector2(new Float32Array(2));
    t4 = t2.storage;
    t5 = t4.length;
    if (0 >= t5)
      throw $.ioore(0);
    t4[0] = -t3;
    if (1 >= t5)
      throw $.ioore(1);
    t4[1] = -t1;
    return t2;
  },
  $sub: function(_, other) {
    var t1, t2, t3, t4, t5, t6, t7;
    t1 = this.storage;
    t2 = t1.length;
    if (0 >= t2)
      throw $.ioore(0);
    t3 = t1[0];
    t4 = other.get$storage();
    t5 = t4.length;
    if (0 >= t5)
      throw $.ioore(0);
    t6 = t4[0];
    if (1 >= t2)
      throw $.ioore(1);
    t1 = t1[1];
    if (1 >= t5)
      throw $.ioore(1);
    t4 = t4[1];
    t5 = new $.Vector2(new Float32Array(2));
    t2 = t5.storage;
    t7 = t2.length;
    if (0 >= t7)
      throw $.ioore(0);
    t2[0] = t3 - t6;
    if (1 >= t7)
      throw $.ioore(1);
    t2[1] = t1 - t4;
    return t5;
  },
  $add: function(_, other) {
    var t1, t2, t3, t4, t5, t6, t7;
    t1 = this.storage;
    t2 = t1.length;
    if (0 >= t2)
      throw $.ioore(0);
    t3 = t1[0];
    t4 = other.get$storage();
    t5 = t4.length;
    if (0 >= t5)
      throw $.ioore(0);
    t6 = t4[0];
    if (1 >= t2)
      throw $.ioore(1);
    t1 = t1[1];
    if (1 >= t5)
      throw $.ioore(1);
    t4 = t4[1];
    t5 = new $.Vector2(new Float32Array(2));
    t2 = t5.storage;
    t7 = t2.length;
    if (0 >= t7)
      throw $.ioore(0);
    t2[0] = t3 + t6;
    if (1 >= t7)
      throw $.ioore(1);
    t2[1] = t1 + t4;
    return t5;
  },
  $div: function(_, scale) {
    var o, t1, t2, t3, t4, t5;
    o = 1 / scale;
    t1 = this.storage;
    t2 = t1.length;
    if (0 >= t2)
      throw $.ioore(0);
    t3 = t1[0];
    if (1 >= t2)
      throw $.ioore(1);
    t1 = t1[1];
    t2 = new $.Vector2(new Float32Array(2));
    t4 = t2.storage;
    t5 = t4.length;
    if (0 >= t5)
      throw $.ioore(0);
    t4[0] = t3 * o;
    if (1 >= t5)
      throw $.ioore(1);
    t4[1] = t1 * o;
    return t2;
  },
  $mul: function(_, scale) {
    var t1, t2, t3, t4, t5;
    t1 = this.storage;
    t2 = t1.length;
    if (0 >= t2)
      throw $.ioore(0);
    t3 = t1[0];
    if (typeof scale !== "number")
      throw $.iae(scale);
    if (1 >= t2)
      throw $.ioore(1);
    t1 = t1[1];
    t2 = new $.Vector2(new Float32Array(2));
    t4 = t2.storage;
    t5 = t4.length;
    if (0 >= t5)
      throw $.ioore(0);
    t4[0] = t3 * scale;
    if (1 >= t5)
      throw $.ioore(1);
    t4[1] = t1 * scale;
    return t2;
  },
  $index: function(_, i) {
    var t1 = this.storage;
    if (i >>> 0 !== i || i >= t1.length)
      throw $.ioore(i);
    return t1[i];
  },
  $indexSet: function(_, i, v) {
    var t1 = this.storage;
    if (i >>> 0 !== i || i >= t1.length)
      throw $.ioore(i);
    t1[i] = v;
  },
  get$length: function(_) {
    var t1, t2, t3, sum;
    t1 = this.storage;
    t2 = t1.length;
    if (0 >= t2)
      throw $.ioore(0);
    t3 = t1[0];
    if (1 >= t2)
      throw $.ioore(1);
    t1 = t1[1];
    sum = t3 * t3 + t1 * t1;
    return Math.sqrt(sum);
  },
  get$length2: function() {
    var t1, t2, t3;
    t1 = this.storage;
    t2 = t1.length;
    if (0 >= t2)
      throw $.ioore(0);
    t3 = t1[0];
    if (1 >= t2)
      throw $.ioore(1);
    t1 = t1[1];
    return t3 * t3 + t1 * t1;
  },
  normalize$0: function() {
    var l, t1, t2;
    l = this.get$length(this);
    if (l === 0)
      return this;
    l = 1 / l;
    t1 = this.storage;
    t2 = t1.length;
    if (0 >= t2)
      throw $.ioore(0);
    t1[0] = t1[0] * l;
    if (1 >= t2)
      throw $.ioore(1);
    t1[1] = t1[1] * l;
    return this;
  },
  normalizeLength$0: function() {
    var l, t1, t2;
    l = this.get$length(this);
    if (l === 0)
      return 0;
    l = 1 / l;
    t1 = this.storage;
    t2 = t1.length;
    if (0 >= t2)
      throw $.ioore(0);
    t1[0] = t1[0] * l;
    if (1 >= t2)
      throw $.ioore(1);
    t1[1] = t1[1] * l;
    return l;
  },
  dot$1: function(other) {
    var t1, t2, t3, t4, t5, t6;
    t1 = this.storage;
    t2 = t1.length;
    if (0 >= t2)
      throw $.ioore(0);
    t3 = t1[0];
    t4 = other.get$storage();
    t5 = t4.length;
    if (0 >= t5)
      throw $.ioore(0);
    t6 = t4[0];
    if (1 >= t2)
      throw $.ioore(1);
    t1 = t1[1];
    if (1 >= t5)
      throw $.ioore(1);
    return t3 * t6 + t1 * t4[1];
  },
  cross$1: function(other) {
    var t1, t2, t3, t4, t5;
    t1 = this.storage;
    t2 = t1.length;
    if (0 >= t2)
      throw $.ioore(0);
    t3 = t1[0];
    t4 = other.storage;
    if (1 >= t4.length)
      throw $.ioore(1);
    t5 = t4[1];
    if (1 >= t2)
      throw $.ioore(1);
    return t3 * t5 - t1[1] * t4[0];
  },
  add$1: function(_, arg) {
    var t1, t2, t3, t4;
    t1 = this.storage;
    t2 = t1.length;
    if (0 >= t2)
      throw $.ioore(0);
    t3 = t1[0];
    t4 = arg.get$storage();
    if (0 >= t4.length)
      throw $.ioore(0);
    t1[0] = t3 + t4[0];
    if (1 >= t2)
      throw $.ioore(1);
    t2 = t1[1];
    t4 = arg.get$storage();
    if (1 >= t4.length)
      throw $.ioore(1);
    t1[1] = t2 + t4[1];
    return this;
  },
  sub$1: function(arg) {
    var t1, t2, t3, t4, t5;
    t1 = this.storage;
    t2 = t1.length;
    if (0 >= t2)
      throw $.ioore(0);
    t3 = t1[0];
    t4 = arg.storage;
    t5 = t4.length;
    if (0 >= t5)
      throw $.ioore(0);
    t1[0] = t3 - t4[0];
    if (1 >= t2)
      throw $.ioore(1);
    t2 = t1[1];
    if (1 >= t5)
      throw $.ioore(1);
    t1[1] = t2 - t4[1];
    return this;
  },
  scale$1: function(_, arg) {
    var t1, t2;
    t1 = this.storage;
    if (1 >= t1.length)
      throw $.ioore(1);
    t2 = t1[1];
    if (typeof arg !== "number")
      throw $.iae(arg);
    t1[1] = t2 * arg;
    t1[0] = t1[0] * arg;
    return this;
  },
  negate$0: function() {
    var t1 = this.storage;
    if (1 >= t1.length)
      throw $.ioore(1);
    t1[1] = -t1[1];
    t1[0] = -t1[0];
    return this;
  },
  set$t: function(arg) {
    var t1 = this.storage;
    if (1 >= t1.length)
      throw $.ioore(1);
    t1[1] = arg;
    return arg;
  },
  set$x: function(_, arg) {
    var t1 = this.storage;
    if (0 >= t1.length)
      throw $.ioore(0);
    t1[0] = arg;
    return arg;
  },
  set$y: function(_, arg) {
    var t1 = this.storage;
    if (1 >= t1.length)
      throw $.ioore(1);
    t1[1] = arg;
    return arg;
  },
  get$x: function(_) {
    var t1 = this.storage;
    if (0 >= t1.length)
      throw $.ioore(0);
    return t1[0];
  },
  get$y: function(_) {
    var t1 = this.storage;
    if (1 >= t1.length)
      throw $.ioore(1);
    return t1[1];
  },
  $isVector2: true
}}],
]);
Isolate.$finishClasses($$, $, null);
$$ = null;

$.main$closure = new $.Closure$main($.main, "main$closure");
$.IsolateNatives__processWorkerMessage$closure = new $.Closure$_processWorkerMessage($.IsolateNatives__processWorkerMessage, "IsolateNatives__processWorkerMessage$closure");
$.toStringWrapper$closure = new $.Closure$toStringWrapper($.toStringWrapper, "toStringWrapper$closure");
$.invokeClosure$closure = new $.Closure$invokeClosure($.invokeClosure, "invokeClosure$closure");
$.typeNameInChrome$closure = new $.Closure$typeNameInChrome($.typeNameInChrome, "typeNameInChrome$closure");
$.typeNameInSafari$closure = new $.Closure$typeNameInSafari($.typeNameInSafari, "typeNameInSafari$closure");
$.typeNameInOpera$closure = new $.Closure$typeNameInOpera($.typeNameInOpera, "typeNameInOpera$closure");
$.typeNameInFirefox$closure = new $.Closure$typeNameInFirefox($.typeNameInFirefox, "typeNameInFirefox$closure");
$.typeNameInIE$closure = new $.Closure$typeNameInIE($.typeNameInIE, "typeNameInIE$closure");
$.constructorNameFallback$closure = new $.Closure$constructorNameFallback($.constructorNameFallback, "constructorNameFallback$closure");
$.callDartFunctionWith1Arg$closure = new $.Closure$callDartFunctionWith1Arg($.callDartFunctionWith1Arg, "callDartFunctionWith1Arg$closure");
$._asyncRunCallback$closure = new $.Closure$_asyncRunCallback($._asyncRunCallback, "_asyncRunCallback$closure");
$._nullDataHandler$closure = new $.Closure$_nullDataHandler($._nullDataHandler, "_nullDataHandler$closure");
$._nullErrorHandler$closure = new $.Closure$_nullErrorHandler($._nullErrorHandler, "_nullErrorHandler$closure");
$._nullDoneHandler$closure = new $.Closure$_nullDoneHandler($._nullDoneHandler, "_nullDoneHandler$closure");
$.Comparable_compare$closure = new $.Closure$compare($.Comparable_compare, "Comparable_compare$closure");
$.getInterceptor = function(receiver) {
  if (typeof receiver == "number") {
    if (Math.floor(receiver) == receiver)
      return $.JSInt.prototype;
    return $.JSDouble.prototype;
  }
  if (typeof receiver == "string")
    return $.JSString.prototype;
  if (receiver == null)
    return $.JSNull.prototype;
  if (typeof receiver == "boolean")
    return $.JSBool.prototype;
  if (receiver.constructor == Array)
    return $.JSArray.prototype;
  if (typeof receiver != "object")
    return receiver;
  if (receiver instanceof $.Object)
    return receiver;
  return $.getNativeInterceptor(receiver);
};
$.getInterceptor$asx = function(receiver) {
  if (typeof receiver == "string")
    return $.JSString.prototype;
  if (receiver == null)
    return receiver;
  if (receiver.constructor == Array)
    return $.JSArray.prototype;
  if (typeof receiver != "object")
    return receiver;
  if (receiver instanceof $.Object)
    return receiver;
  return $.getNativeInterceptor(receiver);
};
$.getInterceptor$ax = function(receiver) {
  if (receiver == null)
    return receiver;
  if (receiver.constructor == Array)
    return $.JSArray.prototype;
  if (typeof receiver != "object")
    return receiver;
  if (receiver instanceof $.Object)
    return receiver;
  return $.getNativeInterceptor(receiver);
};
$.getInterceptor$n = function(receiver) {
  if (typeof receiver == "number")
    return $.JSNumber.prototype;
  if (receiver == null)
    return receiver;
  if (!(receiver instanceof $.Object))
    return $.UnknownJavaScriptObject.prototype;
  return receiver;
};
$.getInterceptor$ns = function(receiver) {
  if (typeof receiver == "number")
    return $.JSNumber.prototype;
  if (typeof receiver == "string")
    return $.JSString.prototype;
  if (receiver == null)
    return receiver;
  if (!(receiver instanceof $.Object))
    return $.UnknownJavaScriptObject.prototype;
  return receiver;
};
$.getInterceptor$s = function(receiver) {
  if (typeof receiver == "string")
    return $.JSString.prototype;
  if (receiver == null)
    return receiver;
  if (!(receiver instanceof $.Object))
    return $.UnknownJavaScriptObject.prototype;
  return receiver;
};
$.getInterceptor$x = function(receiver) {
  if (receiver == null)
    return receiver;
  if (typeof receiver != "object")
    return receiver;
  if (receiver instanceof $.Object)
    return receiver;
  return $.getNativeInterceptor(receiver);
};
var C = {};
C.C_CloseToken = new $.CloseToken();
C.C_UnknownJavaScriptObject = new $.UnknownJavaScriptObject();
C.C__DelayedDone = new $._DelayedDone();
C.C__Random = new $._Random();
C.Duration_0 = new $.Duration(0);
C.Duration_1000000 = new $.Duration(1000000);
C.EventStreamProvider_keydown = new $.EventStreamProvider("keydown");
C.JSArray_methods = $.JSArray.prototype;
C.JSDouble_methods = $.JSDouble.prototype;
C.JSInt_methods = $.JSInt.prototype;
C.JSNull_methods = $.JSNull.prototype;
C.JSNumber_methods = $.JSNumber.prototype;
C.JSString_methods = $.JSString.prototype;
Isolate.makeConstantList = function(list) {
  list.immutable$list = true;
  list.fixed$length = true;
  return list;
};
C.List_empty = Isolate.makeConstantList([]);
C.Window_methods = $.Window.prototype;
$.world = null;
$.CANVAS_WIDTH = null;
$.CANVAS_HEIGHT = null;
$.level = 0;
$.canvas = null;
$.ctx = null;
$.viewport = null;
$.debugDraw = null;
$.dispatchPropertyName = null;
$.lazyPort = null;
$.ReceivePortImpl__nextFreeId = 1;
$.Primitives_mirrorFunctionCacheName = "$cachedFunction";
$.Primitives_mirrorInvokeCacheName = "$cachedInvocation";
$.interceptorsByTag = null;
$.leafTags = null;
$.interceptorToTag = null;
$.TimeOfImpact_toiCalls = null;
$.TimeOfImpact_toiIters = null;
$.TimeOfImpact_toiMaxIters = null;
$.TimeOfImpact_toiRootIters = null;
$.TimeOfImpact_toiMaxRootIters = null;
$._callbacksAreEnqueued = false;
$.Expando__keyCount = 0;
$.$$dom_addEventListener$3$x = function(receiver, a0, a1, a2) {
  return $.getInterceptor$x(receiver).$$dom_addEventListener$3(receiver, a0, a1, a2);
};
$.$$dom_removeEventListener$3$x = function(receiver, a0, a1, a2) {
  return $.getInterceptor$x(receiver).$$dom_removeEventListener$3(receiver, a0, a1, a2);
};
$.$add$ns = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver + a0;
  return $.getInterceptor$ns(receiver).$add(receiver, a0);
};
$.$div$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver / a0;
  return $.getInterceptor$n(receiver).$div(receiver, a0);
};
$.$eq = function(receiver, a0) {
  if (receiver == null)
    return a0 == null;
  if (typeof receiver != "object")
    return a0 != null && receiver === a0;
  return $.getInterceptor(receiver).$eq(receiver, a0);
};
$.$ge$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver >= a0;
  return $.getInterceptor$n(receiver).$ge(receiver, a0);
};
$.$gt$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver > a0;
  return $.getInterceptor$n(receiver).$gt(receiver, a0);
};
$.$index$asx = function(receiver, a0) {
  if (receiver.constructor == Array || typeof receiver == "string")
    if (a0 >>> 0 === a0 && a0 < receiver.length)
      return receiver[a0];
  return $.getInterceptor$asx(receiver).$index(receiver, a0);
};
$.$indexSet$ax = function(receiver, a0, a1) {
  if (receiver.constructor == Array && !receiver.immutable$list && a0 >>> 0 === a0 && a0 < receiver.length)
    return receiver[a0] = a1;
  return $.getInterceptor$ax(receiver).$indexSet(receiver, a0, a1);
};
$.$le$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver <= a0;
  return $.getInterceptor$n(receiver).$le(receiver, a0);
};
$.$lt$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver < a0;
  return $.getInterceptor$n(receiver).$lt(receiver, a0);
};
$.$mul$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver * a0;
  return $.getInterceptor$n(receiver).$mul(receiver, a0);
};
$.$negate$n = function(receiver) {
  if (typeof receiver == "number")
    return -receiver;
  return $.getInterceptor$n(receiver).$negate(receiver);
};
$.$sub$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver - a0;
  return $.getInterceptor$n(receiver).$sub(receiver, a0);
};
$.$tdiv$n = function(receiver, a0) {
  return $.getInterceptor$n(receiver).$tdiv(receiver, a0);
};
$.add$1$ax = function(receiver, a0) {
  return $.getInterceptor$ax(receiver).add$1(receiver, a0);
};
$.clearRect$4$x = function(receiver, a0, a1, a2, a3) {
  return $.getInterceptor$x(receiver).clearRect$4(receiver, a0, a1, a2, a3);
};
$.compareTo$1$ns = function(receiver, a0) {
  return $.getInterceptor$ns(receiver).compareTo$1(receiver, a0);
};
$.elementAt$1$ax = function(receiver, a0) {
  return $.getInterceptor$ax(receiver).elementAt$1(receiver, a0);
};
$.fill$0$x = function(receiver) {
  return $.getInterceptor$x(receiver).fill$0(receiver);
};
$.floor$0$n = function(receiver) {
  return $.getInterceptor$n(receiver).floor$0(receiver);
};
$.forEach$1$ax = function(receiver, a0) {
  return $.getInterceptor$ax(receiver).forEach$1(receiver, a0);
};
$.get$a$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$a(receiver);
};
$.get$body$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$body(receiver);
};
$.get$classes$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$classes(receiver);
};
$.get$hashCode$ = function(receiver) {
  return $.getInterceptor(receiver).get$hashCode(receiver);
};
$.get$id$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$id(receiver);
};
$.get$isEmpty$asx = function(receiver) {
  return $.getInterceptor$asx(receiver).get$isEmpty(receiver);
};
$.get$iterator$ax = function(receiver) {
  return $.getInterceptor$ax(receiver).get$iterator(receiver);
};
$.get$key$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$key(receiver);
};
$.get$length$asx = function(receiver) {
  return $.getInterceptor$asx(receiver).get$length(receiver);
};
$.get$name$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$name(receiver);
};
$.get$parent$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$parent(receiver);
};
$.get$points$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$points(receiver);
};
$.get$position$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$position(receiver);
};
$.get$shape$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$shape(receiver);
};
$.get$type$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$type(receiver);
};
$.get$value$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$value(receiver);
};
$.get$x$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$x(receiver);
};
$.get$y$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$y(receiver);
};
$.getContext$1$x = function(receiver, a0) {
  return $.getInterceptor$x(receiver).getContext$1(receiver, a0);
};
$.set$height$x = function(receiver, value) {
  return $.getInterceptor$x(receiver).set$height(receiver, value);
};
$.set$parent$x = function(receiver, value) {
  return $.getInterceptor$x(receiver).set$parent(receiver, value);
};
$.set$type$x = function(receiver, value) {
  return $.getInterceptor$x(receiver).set$type(receiver, value);
};
$.set$width$x = function(receiver, value) {
  return $.getInterceptor$x(receiver).set$width(receiver, value);
};
$.set$x$x = function(receiver, value) {
  return $.getInterceptor$x(receiver).set$x(receiver, value);
};
$.set$y$x = function(receiver, value) {
  return $.getInterceptor$x(receiver).set$y(receiver, value);
};
$.skip$1$ax = function(receiver, a0) {
  return $.getInterceptor$ax(receiver).skip$1(receiver, a0);
};
$.stroke$0$x = function(receiver) {
  return $.getInterceptor$x(receiver).stroke$0(receiver);
};
$.toList$0$ax = function(receiver) {
  return $.getInterceptor$ax(receiver).toList$0(receiver);
};
$.toString$0 = function(receiver) {
  return $.getInterceptor(receiver).toString$0(receiver);
};
$.trim$0$s = function(receiver) {
  return $.getInterceptor$s(receiver).trim$0(receiver);
};
$.mapTypeToInterceptor = [];
Isolate.$lazy($, "playInfos", "playInfos", "get$playInfos", function() {
  var t1, t2, t3, t4;
  t1 = new $.Vector2(new Float32Array(2));
  t2 = t1.storage;
  t3 = t2.length;
  if (0 >= t3)
    throw $.ioore(0);
  t2[0] = 0;
  if (1 >= t3)
    throw $.ioore(1);
  t2[1] = -50;
  t1 = new $.PlayInfo(t1, 0, null, null, null, null, 2000);
  t1.set$basketWidth(80);
  t2 = new $.Vector2(new Float32Array(2));
  t3 = t2.storage;
  t4 = t3.length;
  if (0 >= t4)
    throw $.ioore(0);
  t3[0] = 0;
  if (1 >= t4)
    throw $.ioore(1);
  t3[1] = -80;
  t2 = new $.PlayInfo(t2, 5, null, null, null, null, 3000);
  t2.set$basketWidth(40);
  return [t1, t2];
});
Isolate.$lazy($, "random", "random", "get$random", function() {
  return C.C__Random;
});
Isolate.$lazy($, "globalThis", "globalThis", "get$globalThis", function() {
  return function() { return this; }();
});
Isolate.$lazy($, "globalWindow", "globalWindow", "get$globalWindow", function() {
  return $.get$globalThis().window;
});
Isolate.$lazy($, "globalWorker", "globalWorker", "get$globalWorker", function() {
  return $.get$globalThis().Worker;
});
Isolate.$lazy($, "globalPostMessageDefined", "globalPostMessageDefined", "get$globalPostMessageDefined", function() {
  return $.get$globalThis().postMessage !== void 0;
});
Isolate.$lazy($, "thisScript", "IsolateNatives_thisScript", "get$IsolateNatives_thisScript", function() {
  return $.IsolateNatives_computeThisScript();
});
Isolate.$lazy($, "workerIds", "IsolateNatives_workerIds", "get$IsolateNatives_workerIds", function() {
  return new $.Expando(null);
});
Isolate.$lazy($, "noSuchMethodPattern", "TypeErrorDecoder_noSuchMethodPattern", "get$TypeErrorDecoder_noSuchMethodPattern", function() {
  return $.TypeErrorDecoder_extractPattern($.TypeErrorDecoder_provokeCallErrorOn({ toString: function() { return "$receiver$"; } }));
});
Isolate.$lazy($, "notClosurePattern", "TypeErrorDecoder_notClosurePattern", "get$TypeErrorDecoder_notClosurePattern", function() {
  return $.TypeErrorDecoder_extractPattern($.TypeErrorDecoder_provokeCallErrorOn({ $method$: null, toString: function() { return "$receiver$"; } }));
});
Isolate.$lazy($, "nullCallPattern", "TypeErrorDecoder_nullCallPattern", "get$TypeErrorDecoder_nullCallPattern", function() {
  return $.TypeErrorDecoder_extractPattern($.TypeErrorDecoder_provokeCallErrorOn(null));
});
Isolate.$lazy($, "nullLiteralCallPattern", "TypeErrorDecoder_nullLiteralCallPattern", "get$TypeErrorDecoder_nullLiteralCallPattern", function() {
  return $.TypeErrorDecoder_extractPattern($.TypeErrorDecoder_provokeCallErrorOnNull());
});
Isolate.$lazy($, "undefinedCallPattern", "TypeErrorDecoder_undefinedCallPattern", "get$TypeErrorDecoder_undefinedCallPattern", function() {
  return $.TypeErrorDecoder_extractPattern($.TypeErrorDecoder_provokeCallErrorOn(void 0));
});
Isolate.$lazy($, "undefinedLiteralCallPattern", "TypeErrorDecoder_undefinedLiteralCallPattern", "get$TypeErrorDecoder_undefinedLiteralCallPattern", function() {
  return $.TypeErrorDecoder_extractPattern($.TypeErrorDecoder_provokeCallErrorOnUndefined());
});
Isolate.$lazy($, "nullPropertyPattern", "TypeErrorDecoder_nullPropertyPattern", "get$TypeErrorDecoder_nullPropertyPattern", function() {
  return $.TypeErrorDecoder_extractPattern($.TypeErrorDecoder_provokePropertyErrorOn(null));
});
Isolate.$lazy($, "nullLiteralPropertyPattern", "TypeErrorDecoder_nullLiteralPropertyPattern", "get$TypeErrorDecoder_nullLiteralPropertyPattern", function() {
  return $.TypeErrorDecoder_extractPattern($.TypeErrorDecoder_provokePropertyErrorOnNull());
});
Isolate.$lazy($, "undefinedPropertyPattern", "TypeErrorDecoder_undefinedPropertyPattern", "get$TypeErrorDecoder_undefinedPropertyPattern", function() {
  return $.TypeErrorDecoder_extractPattern($.TypeErrorDecoder_provokePropertyErrorOn(void 0));
});
Isolate.$lazy($, "undefinedLiteralPropertyPattern", "TypeErrorDecoder_undefinedLiteralPropertyPattern", "get$TypeErrorDecoder_undefinedLiteralPropertyPattern", function() {
  return $.TypeErrorDecoder_extractPattern($.TypeErrorDecoder_provokePropertyErrorOnUndefined());
});
Isolate.$lazy($, "getTypeNameOf", "getTypeNameOf", "get$getTypeNameOf", function() {
  return $.getFunctionForTypeNameOf();
});
Isolate.$lazy($, "_toStringList", "IterableMixinWorkaround__toStringList", "get$IterableMixinWorkaround__toStringList", function() {
  return $.List_List(null);
});
Isolate.$lazy($, "_stackTraceExpando", "_stackTraceExpando", "get$_stackTraceExpando", function() {
  return new $.Expando("asynchronous error");
});
Isolate.$lazy($, "_asyncCallbacks", "_asyncCallbacks", "get$_asyncCallbacks", function() {
  return $.ListQueue$(null);
});
Isolate.$lazy($, "_current", "_Zone__current", "get$_Zone__current", function() {
  return new $._DefaultZone(null, [], 0, false);
});
Isolate.$lazy($, "_toStringList", "ListMixin__toStringList", "get$ListMixin__toStringList", function() {
  return $.List_List(null);
});
Isolate.$lazy($, "_toStringList", "Maps__toStringList", "get$Maps__toStringList", function() {
  return $.List_List(null);
});
// Native classes
$.defineNativeMethods("ArrayBuffer|CanvasGradient|CanvasPattern|DOMError|FileError|MediaError|MediaKeyError|Navigator|NavigatorUserMediaError|PositionError|SQLError|SVGAnimatedEnumeration|SVGAnimatedLength|SVGAnimatedLengthList|SVGAnimatedNumber|SVGAnimatedNumberList|SVGAnimatedTransformList|SVGPointList", $.Interceptor);

$.defineNativeMethods("HTMLBRElement|HTMLBaseElement|HTMLBodyElement|HTMLContentElement|HTMLDListElement|HTMLDataListElement|HTMLDetailsElement|HTMLDialogElement|HTMLDivElement|HTMLHRElement|HTMLHeadElement|HTMLHeadingElement|HTMLHtmlElement|HTMLLabelElement|HTMLLegendElement|HTMLMenuElement|HTMLModElement|HTMLOptGroupElement|HTMLParagraphElement|HTMLPreElement|HTMLQuoteElement|HTMLShadowElement|HTMLSpanElement|HTMLTableCaptionElement|HTMLTableCellElement|HTMLTableColElement|HTMLTableDataCellElement|HTMLTableElement|HTMLTableHeaderCellElement|HTMLTableRowElement|HTMLTableSectionElement|HTMLTemplateElement|HTMLTitleElement|HTMLTrackElement|HTMLUListElement|HTMLUnknownElement", $.HtmlElement);

$.defineNativeMethodsNonleaf("HTMLElement", $.HtmlElement);

$.defineNativeMethods("HTMLAnchorElement", $.AnchorElement);

$.defineNativeMethods("HTMLAreaElement", $.AreaElement);

$.defineNativeMethods("Blob|File", $.Blob);

$.defineNativeMethods("HTMLButtonElement", $.ButtonElement);

$.defineNativeMethods("HTMLCanvasElement", $.CanvasElement);

$.defineNativeMethods("WebGLRenderingContext", $.CanvasRenderingContext);

$.defineNativeMethodsNonleaf("CanvasRenderingContext", $.CanvasRenderingContext);

$.defineNativeMethods("CanvasRenderingContext2D", $.CanvasRenderingContext2D);

$.defineNativeMethods("CDATASection|CharacterData|Comment|Text", $.CharacterData);

$.defineNativeMethods("SVGDocument", $.Document);

$.defineNativeMethodsNonleaf("Document", $.Document);

$.defineNativeMethods("DOMException", $.DomException);

$.defineNativeMethodsNonleaf("Element", $.Element);

$.defineNativeMethods("HTMLEmbedElement", $.EmbedElement);

$.defineNativeMethods("AudioProcessingEvent|AutocompleteErrorEvent|BeforeLoadEvent|CSSFontFaceLoadEvent|CloseEvent|CustomEvent|DeviceMotionEvent|DeviceOrientationEvent|ErrorEvent|HashChangeEvent|IDBVersionChangeEvent|MIDIConnectionEvent|MIDIMessageEvent|MediaKeyEvent|MediaKeyMessageEvent|MediaKeyNeededEvent|MediaStreamEvent|MediaStreamTrackEvent|MessageEvent|MutationEvent|OfflineAudioCompletionEvent|OverflowEvent|PageTransitionEvent|PopStateEvent|RTCDTMFToneChangeEvent|RTCDataChannelEvent|RTCIceCandidateEvent|SecurityPolicyViolationEvent|SpeechInputEvent|SpeechRecognitionError|SpeechRecognitionEvent|SpeechSynthesisEvent|TrackEvent|TransitionEvent|WebGLContextEvent|WebKitAnimationEvent|WebKitTransitionEvent", $.Event);

$.defineNativeMethodsNonleaf("Event", $.Event);

$.defineNativeMethodsNonleaf("EventTarget", $.EventTarget);

$.defineNativeMethods("HTMLFieldSetElement", $.FieldSetElement);

$.defineNativeMethods("HTMLFormElement", $.FormElement);

$.defineNativeMethods("HTMLDocument", $.HtmlDocument);

$.defineNativeMethods("XMLHttpRequestProgressEvent", $.HttpRequestProgressEvent);

$.defineNativeMethods("HTMLIFrameElement", $.IFrameElement);

$.defineNativeMethods("HTMLImageElement", $.ImageElement);

$.defineNativeMethods("HTMLInputElement", $.InputElement);

$.defineNativeMethods("KeyboardEvent", $.KeyboardEvent);

$.defineNativeMethods("HTMLKeygenElement", $.KeygenElement);

$.defineNativeMethods("HTMLLIElement", $.LIElement);

$.defineNativeMethods("HTMLLinkElement", $.LinkElement);

$.defineNativeMethods("HTMLMapElement", $.MapElement);

$.defineNativeMethods("HTMLAudioElement", $.MediaElement);

$.defineNativeMethodsNonleaf("HTMLMediaElement", $.MediaElement);

$.defineNativeMethods("HTMLMetaElement", $.MetaElement);

$.defineNativeMethods("HTMLMeterElement", $.MeterElement);

$.defineNativeMethods("DocumentFragment|DocumentType|Entity|Notation|ProcessingInstruction|ShadowRoot", $.Node);

$.defineNativeMethodsNonleaf("Node", $.Node);

$.defineNativeMethods("HTMLOListElement", $.OListElement);

$.defineNativeMethods("HTMLObjectElement", $.ObjectElement);

$.defineNativeMethods("HTMLOptionElement", $.OptionElement);

$.defineNativeMethods("HTMLOutputElement", $.OutputElement);

$.defineNativeMethods("HTMLParamElement", $.ParamElement);

$.defineNativeMethods("HTMLProgressElement", $.ProgressElement);

$.defineNativeMethods("ResourceProgressEvent", $.ProgressEvent);

$.defineNativeMethodsNonleaf("ProgressEvent", $.ProgressEvent);

$.defineNativeMethods("HTMLScriptElement", $.ScriptElement);

$.defineNativeMethods("HTMLSelectElement", $.SelectElement);

$.defineNativeMethods("HTMLSourceElement", $.SourceElement);

$.defineNativeMethods("StorageEvent", $.StorageEvent);

$.defineNativeMethods("HTMLStyleElement", $.StyleElement);

$.defineNativeMethods("HTMLTextAreaElement", $.TextAreaElement);

$.defineNativeMethods("CompositionEvent|DragEvent|FocusEvent|MouseEvent|MouseScrollEvent|MouseWheelEvent|SVGZoomEvent|TextEvent|TouchEvent|WheelEvent", $.UIEvent);

$.defineNativeMethodsNonleaf("UIEvent", $.UIEvent);

$.defineNativeMethods("HTMLVideoElement", $.VideoElement);

$.defineNativeMethods("DOMWindow|Window", $.Window);

$.defineNativeMethods("Attr", $._Attr);

$.defineNativeMethods("MozNamedAttrMap|NamedNodeMap", $._NamedNodeMap);

$.defineNativeMethods("SVGFEBlendElement", $.FEBlendElement);

$.defineNativeMethods("SVGFEColorMatrixElement", $.FEColorMatrixElement);

$.defineNativeMethods("SVGFEComponentTransferElement", $.FEComponentTransferElement);

$.defineNativeMethods("SVGFECompositeElement", $.FECompositeElement);

$.defineNativeMethods("SVGFEConvolveMatrixElement", $.FEConvolveMatrixElement);

$.defineNativeMethods("SVGFEDiffuseLightingElement", $.FEDiffuseLightingElement);

$.defineNativeMethods("SVGFEDisplacementMapElement", $.FEDisplacementMapElement);

$.defineNativeMethods("SVGFEFloodElement", $.FEFloodElement);

$.defineNativeMethods("SVGFEGaussianBlurElement", $.FEGaussianBlurElement);

$.defineNativeMethods("SVGFEImageElement", $.FEImageElement);

$.defineNativeMethods("SVGFEMergeElement", $.FEMergeElement);

$.defineNativeMethods("SVGFEMorphologyElement", $.FEMorphologyElement);

$.defineNativeMethods("SVGFEOffsetElement", $.FEOffsetElement);

$.defineNativeMethods("SVGFEPointLightElement", $.FEPointLightElement);

$.defineNativeMethods("SVGFESpecularLightingElement", $.FESpecularLightingElement);

$.defineNativeMethods("SVGFESpotLightElement", $.FESpotLightElement);

$.defineNativeMethods("SVGFETileElement", $.FETileElement);

$.defineNativeMethods("SVGFETurbulenceElement", $.FETurbulenceElement);

$.defineNativeMethods("SVGFilterElement", $.FilterElement);

$.defineNativeMethods("SVGForeignObjectElement", $.ForeignObjectElement);

$.defineNativeMethods("SVGAElement|SVGCircleElement|SVGClipPathElement|SVGDefsElement|SVGEllipseElement|SVGGElement|SVGLineElement|SVGPathElement|SVGSwitchElement", $.GraphicsElement);

$.defineNativeMethodsNonleaf("SVGGraphicsElement", $.GraphicsElement);

$.defineNativeMethods("SVGImageElement", $.ImageElement0);

$.defineNativeMethods("SVGMaskElement", $.MaskElement);

$.defineNativeMethods("SVGPatternElement", $.PatternElement);

$.defineNativeMethods("SVGPolygonElement", $.PolygonElement);

$.defineNativeMethods("SVGPolylineElement", $.PolylineElement);

$.defineNativeMethods("SVGRectElement", $.RectElement);

$.defineNativeMethods("SVGScriptElement", $.ScriptElement0);

$.defineNativeMethods("SVGStyleElement", $.StyleElement0);

$.defineNativeMethods("SVGDescElement|SVGGradientElement|SVGLinearGradientElement|SVGMarkerElement|SVGRadialGradientElement|SVGStopElement|SVGSymbolElement|SVGTitleElement", $.StyledElement);

$.defineNativeMethodsNonleaf("SVGStyledElement", $.StyledElement);

$.defineNativeMethods("SVGAnimateElement|SVGAnimateMotionElement|SVGAnimateTransformElement|SVGAnimationElement|SVGComponentTransferFunctionElement|SVGFEDistantLightElement|SVGFEFuncAElement|SVGFEFuncBElement|SVGFEFuncGElement|SVGFEFuncRElement|SVGFEMergeNodeElement|SVGMetadataElement|SVGSetElement|SVGViewElement", $.SvgElement);

$.defineNativeMethodsNonleaf("SVGElement", $.SvgElement);

$.defineNativeMethods("SVGSVGElement", $.SvgSvgElement);

$.defineNativeMethods("SVGTextPathElement", $.TextContentElement);

$.defineNativeMethodsNonleaf("SVGTextContentElement", $.TextContentElement);

$.defineNativeMethods("SVGAltGlyphElement|SVGTSpanElement|SVGTextElement|SVGTextPositioningElement", $.TextPositioningElement);

$.defineNativeMethods("SVGUseElement", $.UseElement);

$.defineNativeMethods("DataView", $.TypedData);

$.defineNativeMethodsExtended("ArrayBufferView", $.TypedData, [$.TypedData_ListMixin, $.TypedData_ListMixin_FixedLengthListMixin, $.TypedData_ListMixin0, $.TypedData_ListMixin_FixedLengthListMixin0, $.TypedData_ListMixin1, $.TypedData_ListMixin_FixedLengthListMixin1, $.TypedData_ListMixin2, $.TypedData_ListMixin_FixedLengthListMixin2, $.TypedData_ListMixin3, $.TypedData_ListMixin_FixedLengthListMixin3, $.TypedData_ListMixin4, $.TypedData_ListMixin_FixedLengthListMixin4, $.TypedData_ListMixin5, $.TypedData_ListMixin_FixedLengthListMixin5, $.TypedData_ListMixin6, $.TypedData_ListMixin_FixedLengthListMixin6, $.Int64List, $.Uint64List]);

$.defineNativeMethods("Float32Array", $.Float32List);

$.defineNativeMethods("Float64Array", $.Float64List);

$.defineNativeMethods("Int16Array", $.Int16List);

$.defineNativeMethods("Int32Array", $.Int32List);

$.defineNativeMethods("Int8Array", $.Int8List);

$.defineNativeMethods("Uint16Array", $.Uint16List);

$.defineNativeMethods("Uint32Array", $.Uint32List);

$.defineNativeMethods("CanvasPixelArray|Uint8ClampedArray", $.Uint8ClampedList);

$.defineNativeMethodsNonleaf("Uint8Array", $.Uint8List);


init.metadata = [];
$ = null;
Isolate = Isolate.$finishIsolateConstructor(Isolate);
$ = new Isolate();
$.initializeDispatchProperty(function(a) {
  $.getDispatchProperty = a;
}, "___dart_dispatch_record_ZxYxX_0_", $.PlainJavaScriptObject.prototype);
// BEGIN invoke [main].
;(function (callback) {
  if (typeof document === 'undefined') {
    callback(null);
    return;
  }
  if (document.currentScript) {
    callback(document.currentScript);
    return;
  }

  var scripts = document.scripts;
  function onLoad(event) {
    for (var i = 0; i < scripts.length; ++i) {
      scripts[i].removeEventListener('load', onLoad, false);
    }
    callback(event.target);
  }
  for (var i = 0; i < scripts.length; ++i) {
    scripts[i].addEventListener('load', onLoad, false);
  }
})(function(currentScript) {
  Isolate.$isolateProperties.$currentScript =
      currentScript;

  if (typeof console !== 'undefined' && typeof document !== 'undefined' &&
      document.readyState == "loading") {
    console.warn("Dart script executed synchronously, use <script src='" +
        currentScript.src + "' defer></scr" + "ipt> to execute after parsing " +
        "has completed. See also http://dartbug.com/12281.");
  }
  if (typeof dartMainRunner === "function") {
    dartMainRunner(function() { $.startRootIsolate($.main$closure); });
  } else {
    $.startRootIsolate($.main$closure);
  }
});
// END invoke [main].
function init() {
  Isolate.$isolateProperties = {};
  function generateAccessor(field, prototype) {
    var len = field.length;
    var code = field.charCodeAt(len - 1);
    code = code >= 60 && code <= 64 ? code - 59 : code >= 123 && code <= 126 ? code - 117 : code >= 37 && code <= 43 ? code - 27 : 0;
    if (code) {
      var getterCode = code & 3;
      var setterCode = code >> 2;
      var accessorName = field = field.substring(0, len - 1);
      var divider = field.indexOf(":");
      if (divider > 0) {
        accessorName = field.substring(0, divider);
        field = field.substring(divider + 1);
      }
      if (getterCode) {
        var args = getterCode & 2 ? "receiver" : "";
        var receiver = getterCode & 1 ? "this" : "receiver";
        var body = "return " + receiver + "." + field;
        prototype["get$" + accessorName] = new Function(args, body);
      }
      if (setterCode) {
        var args = setterCode & 2 ? "receiver, value" : "value";
        var receiver = setterCode & 1 ? "this" : "receiver";
        var body = receiver + "." + field + " = value";
        prototype["set$" + accessorName] = new Function(args, body);
      }
    }
    return field;
  }
  Isolate.$isolateProperties.$generateAccessor = generateAccessor;
  function defineClass(name, cls, fields, prototype) {
    var constructor;
    if (typeof fields == "function") {
      constructor = fields;
    } else {
      var str = "function " + cls + "(";
      var body = "";
      for (var i = 0; i < fields.length; i++) {
        if (i != 0)
          str += ", ";
        var field = generateAccessor(fields[i], prototype);
        var parameter = "parameter_" + field;
        str += parameter;
        body += "this." + field + " = " + parameter + ";\n";
      }
      str += ") {" + body + "}\nreturn " + cls;
      constructor = new Function(str)();
    }
    constructor.prototype = prototype;
    constructor.builtin$cls = name;
    return constructor;
  }
  var supportsProto = false;
  var tmp = defineClass("c", "c", ["f<"], {}).prototype;
  if (tmp.__proto__) {
    tmp.__proto__ = {};
    if (typeof tmp.get$f != "undefined")
      supportsProto = true;
  }
  Isolate.$finishClasses = function(collectedClasses, isolateProperties, existingIsolateProperties) {
    var pendingClasses = {};
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    for (var cls in collectedClasses) {
      if (hasOwnProperty.call(collectedClasses, cls)) {
        var desc = collectedClasses[cls];
        var classData = desc[""], supr, name = cls, fields = classData;
        if (typeof classData == "string") {
          var split = classData.split("/");
          if (split.length == 2) {
            name = split[0];
            fields = split[1];
          }
        }
        if (typeof fields == "string") {
          var s = fields.split(";");
          fields = s[1] == "" ? [] : s[1].split(",");
          supr = s[0];
        } else {
          supr = desc.super;
          if (!!desc.$name)
            name = desc.$name;
        }
        if (supr && supr.indexOf("+") > 0) {
          s = supr.split("+");
          supr = s[0];
          var mixin = collectedClasses[s[1]];
          for (var d in mixin) {
            if (hasOwnProperty.call(mixin, d) && !hasOwnProperty.call(desc, d))
              desc[d] = mixin[d];
          }
        }
        var constructor = defineClass(name, cls, fields, desc);
        isolateProperties[cls] = constructor;
        if (supr)
          pendingClasses[cls] = supr;
      }
    }
    var finishedClasses = {};
    function finishClass(cls) {
      var hasOwnProperty = Object.prototype.hasOwnProperty;
      if (hasOwnProperty.call(finishedClasses, cls))
        return;
      finishedClasses[cls] = true;
      var superclass = pendingClasses[cls];
      if (!superclass || typeof superclass != "string")
        return;
      finishClass(superclass);
      var constructor = isolateProperties[cls];
      var superConstructor = isolateProperties[superclass];
      if (!superConstructor)
        superConstructor = existingIsolateProperties[superclass];
      var prototype = constructor.prototype;
      if (supportsProto) {
        prototype.__proto__ = superConstructor.prototype;
        prototype.constructor = constructor;
      } else {
        function tmp() {
        }
        tmp.prototype = superConstructor.prototype;
        var newPrototype = new tmp();
        constructor.prototype = newPrototype;
        newPrototype.constructor = constructor;
        for (var member in prototype) {
          if (!member)
            continue;
          if (hasOwnProperty.call(prototype, member)) {
            newPrototype[member] = prototype[member];
          }
        }
      }
    }
    for (var cls in pendingClasses)
      finishClass(cls);
  };
  Isolate.$lazy = function(prototype, staticName, fieldName, getterName, lazyValue) {
    var getter = new Function("{ return this." + fieldName + ";}");
    var sentinelUndefined = {};
    var sentinelInProgress = {};
    prototype[fieldName] = sentinelUndefined;
    prototype[getterName] = function() {
      var result = $[fieldName];
      try {
        if (result === sentinelUndefined) {
          $[fieldName] = sentinelInProgress;
          try {
            result = $[fieldName] = lazyValue();
          } finally {
            if (result === sentinelUndefined) {
              if ($[fieldName] === sentinelInProgress) {
                $[fieldName] = null;
              }
            }
          }
        } else {
          if (result === sentinelInProgress)
            $.throwCyclicInit(staticName);
        }
        return result;
      } finally {
        $[getterName] = getter;
      }
    };
  };
  Isolate.$finishIsolateConstructor = function(oldIsolate) {
    var isolateProperties = oldIsolate.$isolateProperties;
    isolateProperties.$currentScript = null;
    var isolatePrototype = oldIsolate.prototype;
    var str = "{\n";
    str += "var properties = arguments.callee.$isolateProperties;\n";
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    for (var staticName in isolateProperties) {
      if (hasOwnProperty.call(isolateProperties, staticName)) {
        str += "this." + staticName + "= properties." + staticName + ";\n";
      }
    }
    str += "}\n";
    var Constants = function() {
    };
    Constants.prototype = C;
    var newIsolate = new Function(str);
    newIsolate.prototype = isolatePrototype;
    isolatePrototype.constructor = newIsolate;
    newIsolate.$isolateProperties = isolateProperties;
    newIsolate.makeConstantList = oldIsolate.makeConstantList;
    newIsolate.$finishClasses = oldIsolate.$finishClasses;
    return newIsolate;
  };
}
})()

//# sourceMappingURL=box2dtest.dart.js.map
//@ sourceMappingURL=box2dtest.dart.js.map
